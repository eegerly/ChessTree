<map version="freeplane 1.7.0">
<!--To view this file, download free mind mapping software Freeplane from http://freeplane.sourceforge.net -->
<node TEXT="ChessTree" FOLDED="false" ID="ID_1869326925" CREATED="1521562113754" MODIFIED="1549009837144" LINK="http://noUpdateURL.com" BACKGROUND_COLOR="#97c7dc" STYLE="oval">
<font SIZE="16" BOLD="true" ITALIC="true"/>
<hook NAME="MapStyle">
    <properties show_icon_for_attributes="true" fit_to_viewport="false" show_note_icons="true" edgeColorConfiguration="#808080ff,#ff0000ff,#0000ffff,#00ff00ff,#ff00ffff,#00ffffff,#7c0000ff,#00007cff,#007c00ff,#7c007cff,#007c7cff,#7c7c00ff"/>

<map_styles>
<stylenode LOCALIZED_TEXT="styles.root_node" STYLE="oval" UNIFORM_SHAPE="true" VGAP_QUANTITY="24.0 pt">
<font SIZE="24"/>
<stylenode LOCALIZED_TEXT="styles.predefined" POSITION="right" STYLE="bubble">
<stylenode LOCALIZED_TEXT="default" ICON_SIZE="12.0 pt" COLOR="#000000" STYLE="fork">
<font NAME="SansSerif" SIZE="10" BOLD="false" ITALIC="false"/>
</stylenode>
<stylenode LOCALIZED_TEXT="defaultstyle.details"/>
<stylenode LOCALIZED_TEXT="defaultstyle.attributes">
<font SIZE="9"/>
</stylenode>
<stylenode LOCALIZED_TEXT="defaultstyle.note" COLOR="#000000" BACKGROUND_COLOR="#ffffff" TEXT_ALIGN="LEFT"/>
<stylenode LOCALIZED_TEXT="defaultstyle.floating">
<edge STYLE="hide_edge"/>
<cloud COLOR="#f0f0f0" SHAPE="ROUND_RECT"/>
</stylenode>
</stylenode>
<stylenode LOCALIZED_TEXT="styles.user-defined" POSITION="right" STYLE="bubble">
<stylenode LOCALIZED_TEXT="styles.topic" COLOR="#18898b" STYLE="fork">
<font NAME="Liberation Sans" SIZE="10" BOLD="true"/>
</stylenode>
<stylenode LOCALIZED_TEXT="styles.subtopic" COLOR="#cc3300" STYLE="fork">
<font NAME="Liberation Sans" SIZE="10" BOLD="true"/>
</stylenode>
<stylenode LOCALIZED_TEXT="styles.subsubtopic" COLOR="#669900">
<font NAME="Liberation Sans" SIZE="10" BOLD="true"/>
</stylenode>
<stylenode LOCALIZED_TEXT="styles.important">
<icon BUILTIN="yes"/>
</stylenode>
</stylenode>
<stylenode LOCALIZED_TEXT="styles.AutomaticLayout" POSITION="right" STYLE="bubble">
<stylenode LOCALIZED_TEXT="AutomaticLayout.level.root" COLOR="#000000" STYLE="oval" SHAPE_HORIZONTAL_MARGIN="10.0 pt" SHAPE_VERTICAL_MARGIN="10.0 pt">
<font SIZE="18"/>
</stylenode>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,1" COLOR="#0033ff">
<font SIZE="16"/>
</stylenode>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,2" COLOR="#00b439">
<font SIZE="14"/>
</stylenode>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,3" COLOR="#990000">
<font SIZE="12"/>
</stylenode>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,4" COLOR="#111111">
<font SIZE="10"/>
</stylenode>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,5"/>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,6"/>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,7"/>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,8"/>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,9"/>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,10"/>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,11"/>
</stylenode>
</stylenode>
</map_styles>
</hook>
<hook NAME="AutomaticEdgeColor" COUNTER="11" RULE="ON_BRANCH_CREATION"/>
<attribute_layout NAME_WIDTH="107.99999678134928 pt" VALUE_WIDTH="134.9999959766866 pt"/>
<attribute NAME="name" VALUE="chessTree"/>
<attribute NAME="version" VALUE="0.0.1"/>
<attribute NAME="author" VALUE="Gergely Kiss"/>
<attribute NAME="freeplaneVersionFrom" VALUE="1.7.4"/>
<attribute NAME="freeplaneVersionTo" VALUE=""/>
<attribute NAME="updateUrl" VALUE="http://noUpdateURL.com" OBJECT="java.net.URI|http://noUpdateURL.com"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      The homepage of this add-on should be set as the link of the root node.
    </p>
    <p>
      The basic properties of this add-on. They can be used in script names and other attributes, e.g. &quot;${name}.groovy&quot;.
    </p>
    <ul>
      <li>
        name: The name of the add-on, normally a technically one (no spaces, no special characters except _.-).
      </li>
      <li>
        author: Author's name(s) and (optionally) email adresses.
      </li>
      <li>
        version: Since it's difficult to protect numbers like 1.0 from Freeplane's number parser it's advised to prepend a 'v' to the number, e.g. 'v1.0'.
      </li>
      <li>
        freeplane-version-from: The oldest compatible Freeplane version. The add-on will not be installed if the Freeplane version is too old.
      </li>
      <li>
        freeplane-version-to: Normally empty: The newest compatible Freeplane version. The add-on will not be installed if the Freeplane version is too new.
      </li>
      <li>
        updateUrl: URL of the file containing information (version, download url) on the latest version of this add-on. By default: &quot;${homepage}/version.properties&quot;
      </li>
    </ul>
  </body>
</html>
</richcontent>
<node TEXT="description" POSITION="left" ID="ID_752418840" CREATED="1521562135104" MODIFIED="1540216035317">
<edge COLOR="#ff0000"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      Description would be awkward to edit as an attribute.
    </p>
    <p>
      So you have to put the add-on description as a child of the <i>'description'</i>&#160;node.
    </p>
    <p>
      To translate the description you have to define a translation for the key 'addons.${name}.description'.
    </p>
  </body>
</html>
</richcontent>
<node ID="ID_281132702" CREATED="1521563587956" MODIFIED="1521563734014"><richcontent TYPE="NODE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      This addon is intended to ease the creation and maintenance of mindmaps containing trees for chess movements.
    </p>
    <p>
      
    </p>
    <p>
      0.) Template is available after addon installation from <i><b>File</b></i>&#160; --&gt; <i><b>New map from template...</b></i>&#160;choosing <i><b>template.ChessTree.mm</b></i>. Any additional information can be found in the template.
    </p>
    <p>
      
    </p>
  </body>
</html>
</richcontent>
<attribute_layout VALUE_WIDTH="134.9999959766866 pt"/>
</node>
</node>
<node TEXT="changes" POSITION="left" ID="ID_845634758" CREATED="1521562135109" MODIFIED="1540216035330">
<edge COLOR="#0000ff"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      Change log of this add-on: append one node for each noteworthy version and put the details for each version into a child node.
    </p>
  </body>
</html>
</richcontent>
</node>
<node TEXT="license" FOLDED="true" POSITION="left" ID="ID_1331637895" CREATED="1521562135113" MODIFIED="1540216035338">
<edge COLOR="#00ff00"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      The add-ons's license that the user has to accept before she can install it.
    </p>
    <p>
      
    </p>
    <p>
      The License text has to be entered as a child of the <i>'license'</i>&#160;node, either as plain text or as HTML.
    </p>
  </body>
</html>
</richcontent>
<node TEXT="&#xa;This add-on is free software: you can redistribute it and/or modify&#xa;it under the terms of the GNU General Public License as published by&#xa;the Free Software Foundation, either version 2 of the License, or&#xa;(at your option) any later version.&#xa;&#xa;This program is distributed in the hope that it will be useful,&#xa;but WITHOUT ANY WARRANTY; without even the implied warranty of&#xa;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the&#xa;GNU General Public License for more details.&#xa;" ID="ID_1555852289" CREATED="1521562135117" MODIFIED="1521566722845"/>
</node>
<node TEXT="preferences.xml" POSITION="left" ID="ID_136508631" CREATED="1521562135121" MODIFIED="1540216035346">
<edge COLOR="#ff00ff"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      <font color="#000000" face="SansSerif, sans-serif">The child node contains the add-on configuration as an extension to mindmapmodemenu.xml (in Tools-&gt;Preferences-&gt;Add-ons). </font>
    </p>
    <p>
      <font color="#000000" face="SansSerif, sans-serif">Every property in the configuration should receive a default value in <i>default.properties</i>&#160;node.</font>
    </p>
  </body>
</html>
</richcontent>
</node>
<node TEXT="default.properties" POSITION="left" ID="ID_1494843788" CREATED="1521562135125" MODIFIED="1540216035353">
<edge COLOR="#00ffff"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      These properties play together with the preferences: Each property defined in the preferences should have a default value in the attributes of this node.
    </p>
  </body>
</html>
</richcontent>
</node>
<node TEXT="translations" POSITION="left" ID="ID_461099033" CREATED="1521562135130" MODIFIED="1540216035360">
<edge COLOR="#7c0000"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      The translation keys that this script uses. Define one child node per supported locale. The attributes contain the translations. Define at least
    </p>
    <ul>
      <li>
        'addons.${name}' for the add-on's name
      </li>
      <li>
        'addons.${name}.description' for the description, e.g. in the add-on overview dialog (not necessary for English)
      </li>
      <li>
        'addons.${name}.&lt;scriptname&gt;' for each script since it will be the menu title.
      </li>
    </ul>
  </body>
</html>
</richcontent>
<node TEXT="en" ID="ID_1779268052" CREATED="1521562135133" MODIFIED="1540215919911" MAX_WIDTH="322.49999056756525 pt" MIN_WIDTH="322.49999056756525 pt">
<attribute_layout NAME_WIDTH="155.99999535083785 pt" VALUE_WIDTH="123.74999631196272 pt"/>
<attribute NAME="addons.${name}" VALUE="ChessTree"/>
<attribute NAME="addon.${name}.updateChessTree" VALUE="Update ChessTree..."/>
<attribute NAME="addon.${name}.pasteBranch" VALUE="Paste branch..."/>
</node>
</node>
<node TEXT="deinstall" POSITION="left" ID="ID_1510539068" CREATED="1521562135137" MODIFIED="1540216035366">
<edge COLOR="#00007c"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      List of files and/or directories to remove on uninstall
    </p>
  </body>
</html>
</richcontent>
<attribute_layout NAME_WIDTH="52.499998435378124 pt" VALUE_WIDTH="271.4999919086697 pt"/>
<attribute NAME="delete" VALUE="${installationbase}/addons/${name}.script.xml"/>
<attribute NAME="delete" VALUE="${installationbase}/templates/template.ChessTree.mm"/>
<attribute NAME="delete" VALUE="${installationbase}/lib/ChessTree.jar"/>
<attribute NAME="delete" VALUE="${installationbase}/addons/${name}/scripts/pasteBranch.groovy"/>
<attribute NAME="delete" VALUE="${installationbase}/addons/${name}/scripts/updateChessTree.groovy"/>
</node>
<node TEXT="scripts" POSITION="right" ID="ID_836008002" CREATED="1521562135167" MODIFIED="1540216035376">
<edge COLOR="#007c00"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      An add-on may contain multiple scripts. The node text defines the script name (e.g. inserInlineImage.groovy). The name must have a suffix of a supported script language like .groovy or .js and may only consist of letters and digits. The script properties have to be configured via attributes:
    </p>
    <p>
      
    </p>
    <p>
      * menuLocation: &lt;locationkey&gt;
    </p>
    <p>
      &#160;&#160;&#160;- Defines where the menu location.
    </p>
    <p>
      &#160;&#160;&#160;-&#160;See mindmapmodemenu.xml for how the menu locations look like.
    </p>
    <p>
      &#160;&#160;&#160;- http://freeplane.bzr.sf.net/bzr/freeplane/freeplane_program/trunk/annotate/head%3A/freeplane/resources/xml/mindmapmodemenu.xml
    </p>
    <p>
      &#160;&#160;&#160;- This attribute is mandatory
    </p>
    <p>
      
    </p>
    <p>
      * menuTitleKey: &lt;key&gt;
    </p>
    <p>
      &#160;&#160;&#160;- The menu item title will be looked up under the translation key &lt;key&gt; - don't forget to define its translation.
    </p>
    <p>
      &#160;&#160;&#160;- This attribute is mandatory
    </p>
    <p>
      
    </p>
    <p>
      * executionMode: &lt;mode&gt;
    </p>
    <p>
      &#160;&#160;&#160;- The execution mode as described in the Freeplane wiki (http://freeplane.sourceforge.net/wiki/index.php/Scripting)
    </p>
    <p>
      &#160;&#160;&#160;- ON_SINGLE_NODE: Execute the script once. The <i>node</i>&#160;variable is set to the selected node.
    </p>
    <p>
      &#160;&#160;&#160;- ON_SELECTED_NODE: Execute the script n times for n selected nodes, once for each node.
    </p>
    <p>
      &#160;&#160;&#160;- ON_SELECTED_NODE_RECURSIVELY: Execute the script on every selected node and recursively on all of its children.
    </p>
    <p>
      &#160;&#160;&#160;- In doubt use ON_SINGLE_NODE.
    </p>
    <p>
      &#160;&#160;&#160;- This attribute is mandatory
    </p>
    <p>
      
    </p>
    <p>
      * keyboardShortcut: &lt;shortcut&gt;
    </p>
    <p>
      &#160;&#160;&#160;- Optional: keyboard combination / accelerator for this script, e.g. control alt I
    </p>
    <p>
      &#160;&#160;&#160;- Use lowercase letters for modifiers and uppercase for letters. Use no + signs.
    </p>
    <p>
      &#160;&#160;&#160;- The available key names are listed at http://download.oracle.com/javase/1.4.2/docs/api/java/awt/event/KeyEvent.html#VK_0
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;In the list only entries with a 'VK_' prefix count. Omit the prefix in the shortcut definition.
    </p>
    <p>
      
    </p>
    <p>
      * Permissions&#160;that the script(s) require, each either false or true:
    </p>
    <p>
      &#160;&#160;&#160;- execute_scripts_without_asking
    </p>
    <p>
      &#160;&#160;&#160;- execute_scripts_without_file_restriction: permission to read files
    </p>
    <p>
      &#160;&#160;&#160;- execute_scripts_without_write_restriction: permission to create/change/delete files
    </p>
    <p>
      &#160;&#160;&#160;- execute_scripts_without_exec_restriction: permission to execute other programs
    </p>
    <p>
      &#160;&#160;&#160;- execute_scripts_without_network_restriction: permission to access the network
    </p>
    <p>
      &#160;&#160;Notes:
    </p>
    <p>
      &#160;&#160;- The set of permissions is fixed.
    </p>
    <p>
      &#160;&#160;- Don't change the attribute names, don't omit one.
    </p>
    <p>
      &#160;&#160;- Set the values either to true or to false
    </p>
    <p>
      &#160;&#160;- In any case set execute_scripts_without_asking to true unless you want to annoy users.
    </p>
  </body>
</html>
</richcontent>
<node TEXT="pasteBranch.groovy" FOLDED="true" ID="ID_1708118480" CREATED="1522494712280" MODIFIED="1522494830917">
<attribute_layout NAME_WIDTH="146.2499956414105 pt" VALUE_WIDTH="134.9999959766866 pt"/>
<attribute NAME="menuTitleKey" VALUE="addon.${name}.pasteBranch"/>
<attribute NAME="menuLocation" VALUE="/menu_bar/addons.${name}"/>
<attribute NAME="executionMode" VALUE="on_single_node"/>
<attribute NAME="keyboardShortcut" VALUE=""/>
<attribute NAME="execute_scripts_without_asking" VALUE="true"/>
<attribute NAME="execute_scripts_without_file_restriction" VALUE="true"/>
<attribute NAME="execute_scripts_without_write_restriction" VALUE="true"/>
<attribute NAME="execute_scripts_without_exec_restriction" VALUE="true"/>
<attribute NAME="execute_scripts_without_network_restriction" VALUE="true"/>
<node TEXT="import org.freeplane.plugin.script.proxy.ScriptUtils&#xd;&#xa;import groovy.swing.SwingBuilder&#xd;&#xa;//import groovy.io.File&#xd;&#xa;import groovy.io.FileType&#xd;&#xa;&#xd;&#xa;import java.awt.FlowLayout as FL&#xd;&#xa;import java.awt.event.ActionEvent;&#xd;&#xa;import java.awt.event.ActionListener;&#xd;&#xa;import java.awt.Dimension;&#xd;&#xa;import java.awt.KeyStroke;&#xd;&#xa;import java.awt.event.KeyEvent;&#xd;&#xa;import java.awt.event.KeyAdapter;&#xd;&#xa;import java.awt.Action;&#xd;&#xa;import java.awt.Font;&#xd;&#xa;&#xd;&#xa;import javax.swing.BoxLayout as BXL&#xd;&#xa;import javax.swing.JFrame&#xd;&#xa;import javax.swing.AbstractAction;&#xd;&#xa;import javax.swing.Action;&#xd;&#xa;import javax.swing.BoxLayout;&#xd;&#xa;import javax.swing.JComponent;&#xd;&#xa;import javax.swing.JList;&#xd;&#xa;import javax.swing.JPanel;&#xd;&#xa;import javax.swing.KeyStroke;&#xd;&#xa;import javax.swing.JScrollPane&#xd;&#xa;import javax.swing.JFileChooser;&#xd;&#xa;&#xd;&#xa;import java.awt.Toolkit&#xd;&#xa;import java.awt.datatransfer.Clipboard&#xd;&#xa;import java.awt.datatransfer.DataFlavor&#xd;&#xa;import java.awt.datatransfer.StringSelection&#xd;&#xa;&#xd;&#xa;import ChessTree.Notation&#xd;&#xa;import ChessTree.NotationTranslator&#xd;&#xa;import ChessTree.ChessTreeSettings&#xd;&#xa;import ChessTree.PositionInterpreter&#xd;&#xa;&#xd;&#xa;/*************/&#xd;&#xa;/** Globals **/&#xd;&#xa;/*************/&#xd;&#xa;chessTreeSettings = new ChessTreeSettings(this.node.map)&#xd;&#xa;/* CONSTANTS */ &#xd;&#xa;SUPPORTED_LANGUAGES = chessTreeSettings.SUPPORTED_LANGUAGES&#xd;&#xa;DICTIONARY = chessTreeSettings.DICTIONARY&#xd;&#xa;&#xd;&#xa;LANGUAGE_CURRENT = chessTreeSettings.get(&quot;chesstree_language&quot;)&#xd;&#xa;&#xd;&#xa;ROOT = this.node.map.root&#xd;&#xa;&#xd;&#xa;/* FUNCTIONS */&#xd;&#xa;&#xd;&#xa;/* Static functions for ClipBoard handling */ &#xd;&#xa;static String getClipboardContents(){    return Toolkit.getDefaultToolkit().getSystemClipboard().getContents(null).getTransferData(DataFlavor.stringFlavor)    }&#xd;&#xa;&#xd;&#xa;def showPGNFileChooser() {&#xd;&#xa;    if(guiPGNFolderRB.selected) {&#xd;&#xa;        JFileChooser chooser = new JFileChooser();&#xd;&#xa;        chooser.setCurrentDirectory(new java.io.File(&quot;.&quot;));&#xd;&#xa;        chooser.setDialogTitle(&quot;Choose directory containing PGN files...&quot;);&#xd;&#xa;        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);&#xd;&#xa;        chooser.setAcceptAllFileFilterUsed(false);&#xd;&#xa;        &#xd;&#xa;        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {&#xd;&#xa;            return chooser.getCurrentDirectory()&#xd;&#xa;        } else {&#xd;&#xa;            return &quot;&quot;&#xd;&#xa;        }&#xd;&#xa;    } else {&#xd;&#xa;        return &quot;&quot;&#xd;&#xa;    }&#xd;&#xa;&#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;def switchPGNinput() {&#xd;&#xa;    guiPGNClipboard.editable = guiPGNClipboardRB.selected    &#xd;&#xa;    guiPGNClipboard.enabled = guiPGNClipboardRB.selected&#xd;&#xa;    guiPGNFolder.editable = guiPGNFolderRB.selected&#xd;&#xa;    guiPGNFolder.enabled = guiPGNFolderRB.selected    &#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;def getNodeNotation(aNode) { // not used // FEN is retrieved from PGN notation, not needed for nodeNotation&#xd;&#xa;    def nn = &quot;[FEN \&quot;&quot;&#xd;&#xa;    nn += aNode.attributes.containsKey(&quot;FEN&quot;) ? aNode[&quot;FEN&quot;] : &quot;&quot;&#xd;&#xa;    nn += &quot;\&quot;] &quot; + aNode.getDisplayedText()&#xd;&#xa;    return nn&#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;def getNodeFEN(aNode) {&#xd;&#xa;    return aNode.attributes.containsKey(&quot;FEN&quot;) ? aNode[&quot;FEN&quot;] : PositionInterpreter.FEN_STARTING&#xd;&#xa;}&#xd;&#xa;/****************/&#xd;&#xa;/**** M A I N ***/&#xd;&#xa;/****************/&#xd;&#xa;&#xd;&#xa;/* Build Dialog window */&#xd;&#xa;def s = new SwingBuilder()&#xd;&#xa;s.setVariable(&apos;myDialog-properties&apos;,[:])&#xd;&#xa;def vars = s.variables&#xd;&#xa;def disableItem(item) {vars.guiPGNClip.editable = false}&#xd;&#xa;&#xd;&#xa;def dial = s.dialog(title:&quot;Paste branch ...&quot;, id:&apos;myDialog&apos;, modal:true, locationRelativeTo:ui.frame, owner:ui.frame, defaultCloseOperation:JFrame.DISPOSE_ON_CLOSE, pack:true, show:true) {&#xd;&#xa;    panel(id:&apos;pMain&apos;) {&#xd;&#xa;        boxLayout(axis:BXL.Y_AXIS)&#xd;&#xa;                &#xd;&#xa;        guiPGNSource = buttonGroup();&#xd;&#xa;        panel(alignmentX:0f) {&#xd;&#xa;            flowLayout(alignment:FL.LEFT)&#xd;&#xa;            guiPGNClipboardRB = radioButton(preferredSize: [150, 20], text:&quot;PGN from ClipBoard&quot;, buttonGroup:guiPGNSource, selected:true, mouseClicked: {switchPGNinput()});&#xd;&#xa;            scrollPane(horizontalScrollBarPolicy:JScrollPane.HORIZONTAL_SCROLLBAR_NEVER, verticalScrollBarPolicy:JScrollPane.VERTICAL_SCROLLBAR_ALWAYS) {&#xd;&#xa;                guiPGNClipboard = textArea( id:&apos;guiPGNClip&apos;, columns: 60, rows: 6, font: new Font(&quot;Consolas&quot;, Font.PLAIN, 11), text: getClipboardContents(), wrapStyleWord:true, lineWrap:true)&#xd;&#xa;            }&#xd;&#xa;        }  &#x9;&#xd;&#xa;        panel(alignmentX:0f) {&#xd;&#xa;            flowLayout(alignment:FL.LEFT)            &#xd;&#xa;            guiPGNFolderRB = radioButton(preferredSize: [150, 20], text:&quot;PGN from folder&quot;, buttonGroup:guiPGNSource, mouseClicked: {switchPGNinput()});&#xd;&#xa;            guiPGNFolder = textField(columns:60, font: new Font(&quot;Consolas&quot;, Font.PLAIN, 11), mouseClicked: { guiPGNFolder.text = showPGNFileChooser() }, editable: guiPGNFolderRB.selected)    &#xd;&#xa;            &#xd;&#xa;        }&#xd;&#xa;        panel(alignmentX:0f) {&#xd;&#xa;            flowLayout(alignment:FL.LEFT)&#xd;&#xa;            label(&apos;Language&apos;, preferredSize: [60, 24])&#xd;&#xa;&#x9;&#x9;&#x9;comboBox(id: &apos;guiLanguage&apos;, preferredSize: [100, 24], editable:true,&#xd;&#xa;&#x9;&#x9;&#x9;&#x9;items:SUPPORTED_LANGUAGES.collect{it.value}, selectedItem:SUPPORTED_LANGUAGES[LANGUAGE_CURRENT]) &#xd;&#xa;        }         &#xd;&#xa;        panel(alignmentX:0f) {&#xd;&#xa;            flowLayout(alignment:FL.LEFT)&#xd;&#xa;            button(&apos;Paste&apos;, preferredSize:[110, 24],&#xd;&#xa;                   actionPerformed:{&#xd;&#xa;                       vars.dialogResult = &apos;paste&apos;&#xd;&#xa;                       dispose()&#xd;&#xa;            })&#xd;&#xa;            button(&apos;Cancel&apos;, preferredSize:[120, 24],&#xd;&#xa;                   actionPerformed:{&#xd;&#xa;                       vars.dialogResult = &apos;cancel&apos;&#xd;&#xa;                       dispose()&#xd;&#xa;            })&#xd;&#xa;        }&#xd;&#xa;        panel(alignmentX:0f) {&#xd;&#xa;        }&#xd;&#xa;    }&#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;/* Handle received data */&#xd;&#xa;pgn = &quot;&quot;&#xd;&#xa;if (vars.dialogResult == &apos;paste&apos;) {&#xd;&#xa;&#x9;/* Update attributes */&#xd;&#xa;    PGN_LANGUAGE = SUPPORTED_LANGUAGES.find{it.value == vars.guiLanguage.getSelectedItem()}.key&#xd;&#xa;    switch (guiPGNSource.getSelection()) {&#xd;&#xa;        case (guiPGNClipboardRB.model):&#xd;&#xa;            pgn = guiPGNClipboard.text&#xd;&#xa;            break;&#xd;&#xa;        case (guiPGNFolderRB.model):&#xd;&#xa;            dir = new File(guiPGNFolder.text)&#xd;&#xa;            if (dir.path != &quot;&quot;) {&#xd;&#xa;                dir.eachDirRecurse() { dir -&gt;  &#xd;&#xa;                    dir.eachFileMatch(~/.*.pgn/) { file -&gt;  &#xd;&#xa;                        pgn += new File(file.getPath()).text&#xd;&#xa;                    }  &#xd;&#xa;                }  &#xd;&#xa;            } // else no folder selected&#xd;&#xa;            &#xd;&#xa;            break;&#xd;&#xa;        default: break;&#xd;&#xa;    }&#xd;&#xa;    &#xd;&#xa;&#xd;&#xa;} else {&#xd;&#xa;    return;&#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;/* Initialization */&#xd;&#xa;def translationNeeded = (PGN_LANGUAGE != LANGUAGE_CURRENT)&#xd;&#xa;def nextNodeStack = []&#xd;&#xa;def nextNodeStackAlt = []&#xd;&#xa;&#xd;&#xa;def pgnNotation = new Notation(pgn, PGN_LANGUAGE)&#xd;&#xa;def nodeNotation = new Notation(this.node.getDisplayedText(), LANGUAGE_CURRENT) // FEN is retrieved from PGN notation, not needed for nodeNotation&#xd;&#xa;&#xd;&#xa;/* Determine starting node */&#xd;&#xa;// Search for starting node with ancestors first order &#xd;&#xa;def currentNode = this.node&#xd;&#xa;while (pgnNotation.getTag(&quot;FEN&quot;) != getNodeFEN(currentNode)) {&#xd;&#xa;    currentNode = currentNode.parent&#xd;&#xa;    if (currentNode == null) {&#xd;&#xa;        break;&#xd;&#xa;    }&#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;if (currentNode == null) {&#xd;&#xa;    currentNode = this.node.createChild(&quot;Starting position&quot;) // no matching node found&#xd;&#xa;    currentNode.style.setName(&quot;Starting position&quot;)&#xd;&#xa;    currentNode[&quot;FEN&quot;] = pgnNotation.position.FEN&#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;/* Walk through PGN */&#xd;&#xa;&#xd;&#xa;while (pgn.length() &gt; 0) {&#xd;&#xa;    if (pgnNotation.getMove() == &quot;&quot;) break;&#xd;&#xa;    &#xd;&#xa;    /* Parse ChessTree specific comment parts: Odds, Freq, Opening */&#xd;&#xa;    comments = pgnNotation.getComment()&#xd;&#xa;    odds = opening = freq = &quot;&quot;&#xd;&#xa;    &#xd;&#xa;    &#xd;&#xa;    odds = (comments =~ /(?i)\s*odds\s*:\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*;/)&#xd;&#xa;    if (odds.count&gt;0) {&#xd;&#xa;        //comments = comments.replace(odds[0][0], &quot;&quot;)&#xd;&#xa;        odds = &quot;${odds[0][1]},${odds[0][2]},${odds[0][3]}&quot;&#xd;&#xa;    } else {&#xd;&#xa;        odds = &quot;&quot;&#xd;&#xa;    }&#xd;&#xa;    &#xd;&#xa;    freq = (comments =~ /(?i)\s*freq\s*:\s*(\d+)\s*;/)&#xd;&#xa;    if (freq.count&gt;0) {&#xd;&#xa;        //comments = comments.replace(freq[0][0], &quot;&quot;)&#xd;&#xa;        freq = &quot;${freq[0][1]}&quot;&#xd;&#xa;    } else {&#xd;&#xa;        freq = &quot;&quot;&#xd;&#xa;    }&#xd;&#xa;    &#xd;&#xa;    opening = (comments =~ /(?i)\s*opening\s*:\s*([^;]+)\s*;/)&#xd;&#xa;    if (opening.count&gt;0) {&#xd;&#xa;        //comments = comments.replace(opening[0][0], &quot;&quot;)&#xd;&#xa;        opening = &quot;${opening[0][1]}&quot;&#xd;&#xa;    } else {&#xd;&#xa;        opening = &quot;&quot;&#xd;&#xa;    }&#xd;&#xa;    //println pgnNotation.getMoveNumber() + &quot; _ &quot; + pgnNotation.getMove() + &quot; _ &quot; + pgnNotation.getComment()&#xd;&#xa;    //println &quot;      &quot; + odds + &quot; _ &quot; + freq + &quot; _ &quot; + opening&#xd;&#xa;    println &quot;********************&quot;&#xd;&#xa;    println pgnNotation.getNumbering() + &quot; &quot; + pgnNotation.getMove()&#xd;&#xa;&#xd;&#xa;    //println pgnNotation.getRemainingText()&#xd;&#xa;    //println pgnNotation.branchingStarts() + &quot; / &quot; + pgnNotation.branchingEnds()&#xd;&#xa;&#xd;&#xa;    /* Handle translated notation within chesstree */&#xd;&#xa;    if (translationNeeded) {&#xd;&#xa;        pgnNotation.translateTo(LANGUAGE_CURRENT)&#xd;&#xa;    }&#xd;&#xa;    &#xd;&#xa;    /* Process branching */&#xd;&#xa;    def numOfUnusedBranches = pgnNotation.branchingEnds()-pgnNotation.branchingStarts()&#xd;&#xa;    if (numOfUnusedBranches&gt;0) { // Branch ends&#xd;&#xa;        numOfUnusedBranches.times({&#xd;&#xa;            currentNode=nextNodeStack.pop()&#xd;&#xa;            nextNodeStackAlt.pop()&#xd;&#xa;        })&#xd;&#xa;    }&#xd;&#xa;    &#xd;&#xa;    if (pgnNotation.branchingStarts()) { // Branch starts : at least one move is assumed after one &quot;(&quot;, no consecutive &quot;(&quot;-s!&#xd;&#xa;        if (pgnNotation.branchingEnds())&#xd;&#xa;        {&#xd;&#xa;            currentNode = nextNodeStackAlt[0]&#xd;&#xa;        } else {&#xd;&#xa;            nextNodeStackAlt.push(currentNode.parent)&#xd;&#xa;            nextNodeStack.push(currentNode)&#xd;&#xa;            currentNode = currentNode.parent&#xd;&#xa;        }&#xd;&#xa;    }&#xd;&#xa;    &#xd;&#xa;    /* Search for child node matching moveEng, FEN match is assumed */&#xd;&#xa;    matchingChild = currentNode.children.find {&#xd;&#xa;        nodeNotation.set(it.getDisplayedText()) // FEN is retrieved from PGN notation, not needed for nodeNotation&#xd;&#xa;        if (pgnNotation.getMoveEng() == nodeNotation.getMoveEng()) {&#xd;&#xa;            return true // found&#xd;&#xa;        } else {&#xd;&#xa;            return false // not found&#xd;&#xa;        }&#xd;&#xa;        &#xd;&#xa;    }&#xd;&#xa;    &#xd;&#xa;    /* Process pgnNotation : node text */&#xd;&#xa;    if (matchingChild == null) {&#xd;&#xa;        // no mathing child found, create it&#xd;&#xa;        currentNode = currentNode.createChild()&#xd;&#xa;        currentNode.text = pgnNotation.getMove()&#xd;&#xa;    } else {&#xd;&#xa;        currentNode = matchingChild // matching child found, advance map processing&#xd;&#xa;    }&#xd;&#xa;    &#xd;&#xa;    /* Process pgnNotation : node[&quot;FEN&quot;] */&#xd;&#xa;    /* Update FEN from pgn even if matching child was found and its FEN was correct. &#xd;&#xa;    FEN counters, enpassant, castling infos are guaranteed by starting position search at script startup. */&#xd;&#xa;    currentNode[&quot;FEN&quot;] = pgnNotation.positionAfterMove.FEN    &#xd;&#xa;&#xd;&#xa;    /* Process pgnNotation : opening */&#xd;&#xa;    if (opening != &quot;&quot;) {&#xd;&#xa;        currentNode[&quot;Opening&quot;] = opening&#xd;&#xa;        if (currentNode.children.findAll{it.style.name==&quot;Opening&quot;}.size() &gt; 0){&#xd;&#xa;            currentNode.children.findAll{it.style.name==&quot;Opening&quot;}[-1].text = opening&#xd;&#xa;        } else {&#xd;&#xa;            opening = currentNode.createChild(opening)&#xd;&#xa;            opening.style.setName(&quot;Opening&quot;)&#xd;&#xa;            opening.setFree(true)&#xd;&#xa;        }&#xd;&#xa;    }&#xd;&#xa;    &#xd;&#xa;    /* Process pgnNotation : odds */&#xd;&#xa;    if (odds != &quot;&quot;) {&#xd;&#xa;        currentNode[&quot;Odds&quot;] = odds&#xd;&#xa;        //TODO: wait for OddsView class, implement here update oddsNode, &#xd;&#xa;    }&#xd;&#xa;&#xd;&#xa;    /* Process pgnNotation : frequency */&#xd;&#xa;    if (freq != &quot;&quot;) {&#xd;&#xa;        currentNode[&quot;Freq&quot;] = freq&#xd;&#xa;        //TODO: wait for ConnectorView class, implement here update connector&#xd;&#xa;    }&#xd;&#xa;   &#xd;&#xa;    /* Advance pgnNotation processing */&#xd;&#xa;    pgn = pgnNotation.getRemainingText()&#xd;&#xa;    pgnNotation.set(pgn)&#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;return 0" ID="ID_360807584" CREATED="1549009856514" MODIFIED="1549009856521"/>
</node>
<node TEXT="updateChessTree.groovy" FOLDED="true" ID="ID_728751355" CREATED="1538315999856" MODIFIED="1540215984948">
<attribute_layout VALUE_WIDTH="134.9999959766866 pt"/>
<attribute NAME="menuTitleKey" VALUE="addon.${name}.updateChessTree"/>
<attribute NAME="menuLocation" VALUE="/menu_bar/addons.${name}"/>
<attribute NAME="executionMode" VALUE="on_single_node"/>
<attribute NAME="keyboardShortcut" VALUE=""/>
<attribute NAME="execute_scripts_without_asking" VALUE="true"/>
<attribute NAME="execute_scripts_without_file_restriction" VALUE="true"/>
<attribute NAME="execute_scripts_without_write_restriction" VALUE="true"/>
<attribute NAME="execute_scripts_without_exec_restriction" VALUE="true"/>
<attribute NAME="execute_scripts_without_network_restriction" VALUE="true"/>
<node TEXT="import org.freeplane.features.map.MapModel;&#xd;&#xa;import org.freeplane.features.attribute.AttributeRegistry;&#xd;&#xa;import org.freeplane.features.attribute.AttributeRegistryElement;&#xd;&#xa;&#xd;&#xa;import org.freeplane.plugin.script.proxy.ScriptUtils&#xd;&#xa;import groovy.swing.SwingBuilder&#xd;&#xa;import java.awt.FlowLayout as FL&#xd;&#xa;import java.awt.event.ActionEvent;&#xd;&#xa;import java.awt.event.ActionListener;&#xd;&#xa;import java.awt.Dimension;&#xd;&#xa;import java.awt.KeyStroke;&#xd;&#xa;import java.awt.event.KeyEvent;&#xd;&#xa;import java.awt.event.KeyAdapter;&#xd;&#xa;import java.awt.Action;&#xd;&#xa;&#xd;&#xa;import javax.swing.BoxLayout as BXL&#xd;&#xa;import javax.swing.JFrame&#xd;&#xa;import javax.swing.AbstractAction;&#xd;&#xa;import javax.swing.Action;&#xd;&#xa;import javax.swing.BoxLayout;&#xd;&#xa;import javax.swing.JComponent;&#xd;&#xa;import javax.swing.JList;&#xd;&#xa;import javax.swing.JPanel;&#xd;&#xa;import javax.swing.KeyStroke;&#xd;&#xa;import groovy.transform.Field&#xd;&#xa;&#xd;&#xa;import ChessTree.Notation&#xd;&#xa;import ChessTree.NotationTranslator&#xd;&#xa;import ChessTree.ChessTreeSettings&#xd;&#xa;import ChessTree.OddsView&#xd;&#xa;import ChessTree.ConnectorView&#xd;&#xa;import ChessTree.PositionInterpreter&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;/*************/&#xd;&#xa;/** Globals **/&#xd;&#xa;/*************/&#xd;&#xa;cts = new ChessTreeSettings(this.node.map)&#xd;&#xa;&#xd;&#xa;DICTIONARY = cts.DICTIONARY&#xd;&#xa;&#xd;&#xa;ROOT = this.node.map.root&#xd;&#xa;LANGUAGE_CURRENT = cts.get(&quot;chesstree_language&quot;)&#xd;&#xa;NUMBERING_CURRENT = cts.get(&quot;chesstree_numbering&quot;)&#xd;&#xa;NAG_CURRENT = cts.get(&quot;chesstree_NAG&quot;)&#xd;&#xa;CONNECTOR_CURRENT = cts.get(&quot;chesstree_connectors&quot;)&#xd;&#xa;ODDS_CURRENT = cts.get(&quot;chesstree_odds&quot;)&#xd;&#xa;&#xd;&#xa;/* Globals for odds image updater */ &#xd;&#xa;mapfile=this.node.map.file&#xd;&#xa;mapfilePath = mapfile.parent.replace(&quot;\\&quot;, &quot;/&quot;)&#xd;&#xa;mapfileName = mapfile.name.lastIndexOf(&apos;.&apos;).with {it != -1 ? mapfile.name[0..&lt;it] : mapfile.name}&#xd;&#xa;imgAbsPath = mapfilePath + &quot;/img_&quot; + mapfileName&#xd;&#xa;imgRelPath = &quot;./img_&quot; + mapfileName&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;/*****************/&#xd;&#xa;/**** Settings ***/ &#xd;&#xa;/*****************/&#xd;&#xa;&#xd;&#xa;/* Build Dialog window */&#xd;&#xa;def s = new SwingBuilder()&#xd;&#xa;s.setVariable(&apos;myDialog-properties&apos;,[:])&#xd;&#xa;def vars = s.variables&#xd;&#xa;def disableItem(item) {item.enabled = !item.enabled}&#xd;&#xa;def dial = s.dialog(title:&quot;ChessTree settings...&quot;, id:&apos;myDialog&apos;, modal:true, &#xd;&#xa;            locationRelativeTo:ui.frame, owner:ui.frame, defaultCloseOperation:JFrame.DISPOSE_ON_CLOSE, &#xd;&#xa;            preferredSize: [280, 300], pack:true, show:true) {&#xd;&#xa;    panel(id:&apos;pMain&apos;) {&#xd;&#xa;        boxLayout(axis:BXL.Y_AXIS)&#xd;&#xa;        /* &#xd;&#xa;        Text: Current language is ___. Check tooltip if you don&apos;t agree. &#xd;&#xa;        Tooltip: If the language of notation in the mindmap is inconsistent you should edit the mindmap manually to make its language consistent. &#xd;&#xa;        Otherwise change below settings and click on &quot;Save&quot;. It affects settings saved in Mindmap properties, Mindmap content will not change. &#xd;&#xa;        */&#xd;&#xa;        panel(alignmentX:0f) {&#xd;&#xa;            flowLayout(alignment:FL.LEFT)&#xd;&#xa;            label(&apos;Language&apos;, preferredSize: [120, 24], mouseClicked:{disableItem(guiCategory)})&#xd;&#xa;&#x9;&#x9;&#x9;comboBox(id: &apos;chesstree_language&apos;, preferredSize: [100, 24], editable:true,&#xd;&#xa;&#x9;&#x9;&#x9;&#x9;items:cts.SUPPORTED_LANGUAGES.collect{it.value}, selectedItem:cts.SUPPORTED_LANGUAGES[LANGUAGE_CURRENT]) &#xd;&#xa;        }  &#x9;&#x9;&#xd;&#xa;        panel(alignmentX:0f) {&#xd;&#xa;            flowLayout(alignment:FL.LEFT)&#xd;&#xa;            label(&apos;Numbering&apos;, preferredSize: [120, 24], mouseClicked:{disableItem(guiCategory)})&#xd;&#xa;&#x9;&#x9;&#x9;comboBox(id: &apos;chesstree_numbering&apos;, preferredSize: [100, 24], editable:true,&#xd;&#xa;&#x9;&#x9;&#x9;&#x9;items:cts.SUPPORTED_NUMBERING.collect{it.value}, selectedItem:cts.SUPPORTED_NUMBERING[NUMBERING_CURRENT]) &#xd;&#xa;        }  &#x9;&#x9;&#xd;&#xa;        panel(alignmentX:0f) {&#xd;&#xa;            flowLayout(alignment:FL.LEFT)&#xd;&#xa;            label(&apos;NAG&apos;, preferredSize: [120, 24], mouseClicked:{disableItem(guiCategory)})&#xd;&#xa;&#x9;&#x9;&#x9;comboBox(id: &apos;chesstree_NAG&apos;, preferredSize: [100, 24], editable:true,&#xd;&#xa;&#x9;&#x9;&#x9;&#x9;items:cts.SUPPORTED_NAG.collect{it.value}, selectedItem:cts.SUPPORTED_NAG[NAG_CURRENT]) &#xd;&#xa;        }  &#x9;&#x9;&#x9;&#xd;&#xa;        panel(alignmentX:0f) {&#xd;&#xa;            flowLayout(alignment:FL.LEFT)&#xd;&#xa;            label(&apos;Connectors&apos;, preferredSize: [120, 24], mouseClicked:{disableItem(guiCategory)})&#xd;&#xa;&#x9;&#x9;&#x9;comboBox(id: &apos;chesstree_connectors&apos;, preferredSize: [100, 24], editable:true,&#xd;&#xa;&#x9;&#x9;&#x9;&#x9;items:cts.SUPPORTED_CONNECTOR.collect{it.value}, selectedItem:cts.SUPPORTED_CONNECTOR[CONNECTOR_CURRENT]) &#xd;&#xa;        }  &#x9;&#x9;&#xd;&#xa;        panel(alignmentX:0f) {&#xd;&#xa;            flowLayout(alignment:FL.LEFT)&#xd;&#xa;            label(&apos;Odds&apos;, preferredSize: [120, 24], mouseClicked:{disableItem(guiCategory)})&#xd;&#xa;&#x9;&#x9;&#x9;comboBox(id: &apos;chesstree_odds&apos;, preferredSize: [100, 24], editable:true,&#xd;&#xa;&#x9;&#x9;&#x9;&#x9;items:cts.SUPPORTED_ODDS.collect{it.value}, selectedItem:cts.SUPPORTED_ODDS[ODDS_CURRENT]) &#xd;&#xa;        }  &#x9;&#x9;&#xd;&#xa;        panel(alignmentX:0f) {&#xd;&#xa;            flowLayout(alignment:FL.LEFT)&#xd;&#xa;            button(&apos;Save &amp; Apply&apos;, preferredSize:[120, 24],&#xd;&#xa;                   actionPerformed:{&#xd;&#xa;                       vars.dialogResult = &apos;save&amp;apply&apos;&#xd;&#xa;                       dispose()&#xd;&#xa;            })&#xd;&#xa;            button(&apos;Save&apos;, preferredSize:[120, 24],&#xd;&#xa;                   actionPerformed:{&#xd;&#xa;                       vars.dialogResult = &apos;save&apos;&#xd;&#xa;                       dispose()&#xd;&#xa;            })&#xd;&#xa;        }&#xd;&#xa;        panel(alignmentX:0f) {&#xd;&#xa;            button(&apos;Cancel&apos;, preferredSize:[120, 24],&#xd;&#xa;                   actionPerformed:{&#xd;&#xa;                       vars.dialogResult = &apos;cancel&apos;&#xd;&#xa;                       dispose()&#xd;&#xa;            })&#xd;&#xa;        }&#xd;&#xa;    }&#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;/*************/&#xd;&#xa;/**** Main ***/ &#xd;&#xa;/*************/&#xd;&#xa;logger.createLogger() &#xd;&#xa;&#xd;&#xa;&#xd;&#xa;if (vars.dialogResult == &apos;save&amp;apply&apos;) {&#xd;&#xa;    /* Handle received data */&#xd;&#xa;&#xd;&#xa;    def language_next = cts.SUPPORTED_LANGUAGES.find{it.value == vars[&quot;chesstree_language&quot;].getSelectedItem()}.key&#xd;&#xa;    def numbering_next = cts.SUPPORTED_NUMBERING.find{it.value == vars[&quot;chesstree_numbering&quot;].getSelectedItem()}.key&#xd;&#xa;    def NAG_next = cts.SUPPORTED_NAG.find{it.value == vars[&quot;chesstree_NAG&quot;].getSelectedItem()}.key&#xd;&#xa;    def connector_next = cts.SUPPORTED_CONNECTOR.find{it.value == vars[&quot;chesstree_connectors&quot;].getSelectedItem()}.key&#xd;&#xa;    def odds_next = cts.SUPPORTED_ODDS.find{it.value == vars[&quot;chesstree_odds&quot;].getSelectedItem()}.key&#xd;&#xa;&#xd;&#xa;    if ((LANGUAGE_CURRENT != language_next) || (NUMBERING_CURRENT != numbering_next)) {&#xd;&#xa;        // notation text modification is needed&#xd;&#xa;        updateNotation(language_next, numbering_next)&#xd;&#xa;    }&#xd;&#xa;    &#xd;&#xa;    if (NAG_CURRENT != NAG_next) {&#xd;&#xa;        // TODO: updateDetails(hide/show)...&#xd;&#xa;    }&#xd;&#xa;    &#xd;&#xa;    if (ODDS_CURRENT != odds_next) {&#xd;&#xa;        oddsView = new OddsView(this.node.map)&#xd;&#xa;        oddsView.updateCharts(odds_next==&quot;show&quot;)&#xd;&#xa;    }&#xd;&#xa;    if (CONNECTOR_CURRENT != connector_next) {&#xd;&#xa;        connectorView = new ConnectorView(this.node.map)&#xd;&#xa;        connectorView.updateConnectors(connector_next==&quot;freq&quot;)&#xd;&#xa;    }&#xd;&#xa;    &#xd;&#xa;    &#xd;&#xa;    /* Update properties */&#xd;&#xa;    saveSettings(vars)&#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;if (vars.dialogResult == &apos;save&apos;) {&#xd;&#xa;    saveSettings(vars)&#xd;&#xa;}&#xd;&#xa;return 0&#xd;&#xa;&#xd;&#xa;/*************/&#xd;&#xa;/* Functions */&#xd;&#xa;/*************/&#xd;&#xa;def saveSettings(vars) {&#xd;&#xa;    cts.getSupportedProperties().each{&#xd;&#xa;        def value = &quot;&quot;&#xd;&#xa;        value = vars[it].getSelectedItem()&#xd;&#xa;        cts.setByValue(it, value)&#xd;&#xa;    }&#xd;&#xa;    this.node.map.save(true) // true: allow interaction&#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;def updateNotation(language_next, numbering_next) {&#xd;&#xa;    def notation = new Notation(&quot;&quot;, LANGUAGE_CURRENT)&#xd;&#xa;    /* Translate each node */&#xd;&#xa;    c.findAll{it.hasStyle(&quot;White moves&quot;) || it.hasStyle(&quot;Black moves&quot;)}.each {aNode-&gt;&#xd;&#xa;        /* Breadth first order guarantees existence FEN tag of parent */&#xd;&#xa;        def fen = PositionInterpreter.FEN_DEFAULT&#xd;&#xa;        &#xd;&#xa;        if (aNode.parent != null ) {&#xd;&#xa;            if (!aNode.parent.attributes.getNames().contains(&quot;FEN&quot;)) {&#xd;&#xa;                aNode.parent[&quot;FEN&quot;] = PositionInterpreter.FEN_STARTING&#xd;&#xa;            } &#xd;&#xa;            fen = aNode.parent[&quot;FEN&quot;]&#xd;&#xa;        }&#xd;&#xa;                &#xd;&#xa;        def text = aNode.getDisplayedText()&#xd;&#xa;        if ((text != null) &amp;&amp; (text != &quot;&quot;)) {&#xd;&#xa;            notation.position.set(fen)&#xd;&#xa;            notation.set(text)&#xd;&#xa;        }&#xd;&#xa;        text = &quot;&lt;html&gt;&lt;body&gt;&quot;&#xd;&#xa;        if (NUMBERING_CURRENT != numbering_next) {&#xd;&#xa;            if ((numbering_next == &quot;white&quot;) &amp;&amp; aNode.hasStyle(&quot;White moves&quot;)) {&#xd;&#xa;                text += &quot;&quot;&quot;&lt;p&gt;&lt;font size=&quot;1&quot;&gt;${notation.getNumbering()}&lt;/font&gt;&lt;/p&gt;&quot;&quot;&quot;&#xd;&#xa;            } else if (numbering_next == &quot;both&quot;) {&#xd;&#xa;                text += &quot;&quot;&quot;&lt;p&gt;&lt;font size=&quot;1&quot;&gt;${notation.getNumbering()}&lt;/font&gt;&lt;/p&gt;&quot;&quot;&quot;&#xd;&#xa;            } else { // &quot;Black moves&quot; and &quot;white&quot;, or &quot;none&quot;&#xd;&#xa;                // nothing to do &#xd;&#xa;            }&#xd;&#xa;        }&#xd;&#xa;        if (LANGUAGE_CURRENT != language_next) {&#xd;&#xa;            notation.translateTo(language_next)&#xd;&#xa;        }&#xd;&#xa;        text += &quot;&quot;&quot;&lt;p&gt;${notation.getMove()}&lt;/p&gt;&quot;&quot;&quot;&#xd;&#xa;        text += &quot;&lt;/body&gt;&lt;/html&gt;&quot;&#xd;&#xa;        &#xd;&#xa;        aNode.setText(text)&#xd;&#xa;        aNode[&quot;FEN&quot;] = notation.positionAfterMove&#xd;&#xa;    }&#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;" ID="ID_1345084473" CREATED="1549009856521" MODIFIED="1549009856531"/>
</node>
</node>
<node TEXT="lib" POSITION="right" ID="ID_328124690" CREATED="1521562135185" MODIFIED="1540216035574">
<edge COLOR="#7c007c"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      An add-on may contain any number of nodes containing binary files (normally .jar files) to be added to the add-on's classpath.
    </p>
    <p>
      
    </p>
    <p>
      &#160;- The immediate child nodes contain the name of the file, e.g. 'mysql-connector-java-5.1.25.jar'). Put the file into a 'lib' subdirectory of the add-on base directory.
    </p>
    <p>
      
    </p>
    <p>
      &#160;- The child nodes of these nodes contain the actual files.
    </p>
    <p>
      
    </p>
    <p>
      &#160;- Any lib file will be extracted in &lt;installationbase&gt;/&lt;addonname&gt;/lib.
    </p>
    <p>
      
    </p>
    <p>
      &#160;- The files will be processed in the sequence as seen in the map.
    </p>
  </body>
</html>
</richcontent>
</node>
<node TEXT="zips" POSITION="right" ID="ID_188436602" CREATED="1521562135191" MODIFIED="1540216035581">
<edge COLOR="#007c7c"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      An add-on may contain any number of nodes containing zip files.
    </p>
    <p>
      
    </p>
    <p>
      &#160;- The immediate child nodes contain a description of the zip. The devtools script releaseAddOn.groovy allows automatic zip creation if the name of this node matches a directory in the current directory.
    </p>
    <p>
      
    </p>
    <p>
      &#160;- The child nodes of these nodes contain the actual zip files.
    </p>
    <p>
      
    </p>
    <p>
      &#160;- Any zip file will be extracted in the &lt;installationbase&gt;. Currently, &lt;installationbase&gt; is always Freeplane's &lt;userhome&gt;, e.g. ~/.freeplane/1.3.
    </p>
    <p>
      
    </p>
    <p>
      &#160;- The files will be processed in the sequence as seen in the map.
    </p>
  </body>
</html>
</richcontent>
<node TEXT="templates" FOLDED="true" ID="ID_1849114914" CREATED="1521565216661" MODIFIED="1521565216662">
<node TEXT="UEsDBBQACAgIAOe+Pk4AAAAAAAAAAAAAAAAfAAAAdGVtcGxhdGVzL3RlbXBsYXRlLkNoZXNzVH&#xa;JlZS5tbe1c+3Paxhb+/c70f9jSTMduA6yeu6pNMhhwwgSDCzhpb+wyAhbQjZCIJILT3ty//Z7V&#xa;A4QeBMclcdvIrRHSPr/znceeXed0ri/QO+a4hm1VChOHsYWpWwwJJbWEC0+++dfpt8Vi30bvDL&#xa;ZC3sxw0cQw2WM0tleWaetjxKuguWGNEbS0MKwpcu2Jt9Idhs7XrU0ce45mnrf4qVxe91Fy7aUz&#xa;YhPbmbKSxTxULPL+dM9zjOHSYwOHTQ3Xc96j3vPOq0G13+82z676jV6l4DKTjTw25gNEcMUqWf&#xa;qcoYtq+6raqhQ8Z8kKqF29aFQKLd2aLvUpi+ok6r3TzSVDL6utKyjLrGmhvEe52dLaq5z7fr5X&#xa;OcBmXe60vD0pjk05DQ5/bNljhvqNX/qVQm3GXLcPEBdQq1Ortpr/btQHvf6vrcag2zivFKpLz5&#xa;7rnjFq6e/tpVcy2Ttmlhzb9grovNOqN+owCt10oX4Tbpv1gUyIoAhYEAqo1m1U+7yEoIiCSCil&#xa;giTgArro1JvnzeCFjIkoqZoiU6jw8ln1cvDzVbXdb/Z/rRSUEkYLr/DkdGbbb0KxXOiLnvfe9M&#xa;Xy8CYiE0XW6J0n4stvZFtjwwO90s2By9+4cQak3qJqrd982YhIG5tqb+QY0BtqVXv98HWspQSf&#xa;2C3Qwh2sm0drvQEa+g0J21Qsp0byicN8NTM8MAX2O+buHCs0+Z+lNfI2Y0yUSMwIinm6YeXM6b&#xa;zRLkTqg4YIZFjt154PatVeY02A4FH18rLb+aUJXxqtX6N35ay+/YkO2NslFIn1uuFhQNExm+hL&#xa;00u14UOaP8U/D/EzUx+9+bKIr/5ZiP+5HA/0MTbfpcsc39iDwXIvoJdkw4mqTy4H7auLs0a32X&#xa;6GKqh8dD3+8bp0dF26Lh0/PS5//93t+OSbf10OLjovG/77o9e4c1Pkv47831Dqv0elp/BcL85u&#xa;XgtFevP0+Okt/L95cFThjR2/vv7x+rubp5tG29Wgz6PrR9fjP4TH0gdo6/Vv16ubP/Bj8cPxun&#xa;/L9nQ+vUtgGHMsv9LTubs8/u1RbPxPr90fHgVDDe6g/XVv4YfDvCU0cMQDkRJ3FqUp8+qGC/HE&#xa;ezbus1vv6BhVKv9DiS6PT8shYBlSKCfFsI+oPiKXcrnp9mGQPl8GC4iGLA/0JpyGMYlPIXhbqV&#xa;hL0zxG4RR9XTkJyzO4R7zSt8lapbXSuqVIa1+w90ffv13a3gnv0b853tHuH+EXPnzQLzQH+aRG&#xa;9zrR4A0CkEMpln5AR6+Hq5tjBHdAQMRZCE/Lx7GW+ejnJdf4nfkSQnh7RLGSqUFFA1suxrrHYA&#xa;gwwBgQeyKQ0eDINm1QN2ANtPi9vrDdk9Uw+CzOX2Ng/01GLa787eV8yNZV/bLiTcmzm5bHpsyB&#xa;KQIKm+YrlbD14OOp8BNOjifx1Rf2esLHKTz4Vf4BXToQ9Vge4qAEpdHK8GaIzRfee+TpQ7Blqx&#xa;mzkOGhle7CjB0HAmf0QzmjvS18NwzIEP2W7B/FYAwJ8CiBUYIL/PqQMeGPzHfXiFBwR8tbP+jR&#xa;H5vBfUBF+MHwLDG6D0Hd7R6T4wvJGtICBOrXWaWqRvU+bBuu8OM+ZugvGlV89XF/dx/n8+Wrj/&#xa;vq4776uL+jjxv+FXxcxpso23K6cOwFczyDATd4UslzGOOGt1KYGWNwfZuH9njsVgruzF6B4wvT&#xa;hUEyMFbI3H7BSw8M6H0wASFsFHW9FN7UtHx5GNa0UrBsC15NDG/g2QOeW13YjhdWOYnXgYYtYL&#xa;PtuH528G383dDWnfGA25tKYc7GxnIeDgc8A/PH5Ebuff3YHRjWYK4v4qtxkBk82aAWrMb9XFxy&#xa;AR6U8dNsA14gDBwqBfudbhbQVbt53uleDHrPq5fr0CKROxPlMHkGHU3AmKEetM8f+2P5eN8Lh4&#xa;GJMiw2LqDLTq/Zb3balYJjTGfeejTD5XAYphTz24uSCajWaXW6lcJ32L+yGvHHGaT5qo6hm+jK&#xa;AnihzYteIRw/Tx+edVqxrGMfeqvFcQb6R4PZa2R+gdKYgb033X3HQe/R1Ya9n6M3Tsc0+GfV2o&#xa;tn3c5Vuz6IXk38q+AnhgfQ3jOQd6tx3v8cg5yYNgRZoOi8DhtPWcQObjsG/EHQ+Mi0l+P1ZCaY&#xa;/0D/gR4E0+k2av2g8K4xZwx134GHCsID7OKnqUjQzlaSa7dyZGt8XFC1Rrvf6OZl0NFFsz141a&#xa;z3n8MjzJ/dJg2DIEaK5TdeTgpiyH43mFNAYStCAdWrPbjpdVrNelB8k9k0/c2CIHsZ9StIcknj&#xa;l6IRVaWqyge2kzEBTFvrpD1orPrXVwQ3CHYWzOK6tUaPYv6z7VQSCvOM2c7U0De6HZ/a2uhmT3&#xa;Sjs6kew5lA/GXtM/LGLd/C9JdfuSoC8cCbPcTrWzJ0Uf0lQlPEoRj3EC3ddjr7zDiypneccc/T&#xa;HW4IEUT3xs558+gbYiQzh8YZk8qj9lmnW290o9JSWDh86vc+aDVfNAaN+rPGJkmxRX18R+rf3/&#xa;wmNibvGaTs2ubMwX/FZT5jt/qUC+l+luSOIghDn/jruE0MHseNy6dZqo8KKfFtO7ot803b+xi1&#xa;vBHFNoP10QiidNuBRUd5YS6nsGAvP4eCujOaGSPdbPLgvLRZmQQNxNStD8tbU+cBUoo+4Xa2gE&#xa;UZC5Imka39bL5tLWiiQiQxvZ8tYlmUNK1wn9k7xmjGkxB8Td7/ldu0eqNfbbZ6vFUAwZubT2Dh&#xa;dTpj+viJvwLj38rR19OhPX7/JFyZPQmXdnVmMgg5/PMlQ0e3RrNSuKzzi5yWg0rQit/6aTk2iA&#xa;Rwazt1ubZT8a30tBWL4BQVTRFVScMpOAE1VVGy4CSSLAr5xwPugfK6Xkio+KarYw3fvhlaTnkR&#xa;XutswGV4lbvts59fnLW7aIVe/PzmrZ8UEA4nvyqa6nNWtgN/jka6hVyOdHjwhzmshHiqEPmCcm&#xa;e6aaIwkeXndTaz9VM7blJKn8wGJm8ETAhWNYoxTQtYxCJWMs5/iBqRiaTmWszniaWtEkhTU0HN&#xa;QA0VyS/1sve8ed6PlSsKwnZBWTwkX5IZo2GYJRJSVocpa7gojA0TwgPWrdMyiiqqoqRgkoUWxR&#xa;pR9kVLEUuiDHOhVMVYFUDLPicIqxAEMQVCeyTFrAKlIlHAzKZgkERCYPgZMKj8UFGuVUjBQEoc&#xa;BY0SLCmahoVszoghYzQBK5oERZUvQZk0Wi8NZln699/d6ifcBmxZ23V8H53AEjRZAiObPIEFYM&#xa;IlUzkPTCWFWhHYQ3z2YAHUWgnIkwGbFOImUpnIMvyOYIt5a35Qsc2zWfdb66zjjegmBtMLwCHI&#xa;jLs+Vgt9Ze3ESsAUzBL4IyVDARWikUx/JAuqIqfBkiOOCSoRFCLm2CUhKAVzU0QNgJeUw4MVw2&#xa;gSM9YgUQ3LkignZk9FMExgMrJmr2mSzN30nnoXGmtKZCpBLKXlEAgHVkqTABEMJk59GHoXIxSa&#xa;lnZSiWIiqIIipANFUYHAhmY6PqqCeUszSQv1SSUUZghalcMkJdBOTZHAtEuyJN0XtSzCsNs4ZS&#xa;C21bAkYy1jmjJRKM0434mxRKTcg6op/47DWRFgIExKJDn+XRTCghKgDpMRvoRnkw4X7337LTpq&#xa;V58df2pY5seC8B/EiSyeSYmReCvDshaxRCVBzYjQiSqKckZI4gtYVNM8FiP3AVaGqLJKc4gsR+&#xa;UIXx9gcm+vewhxvOJBc7hPcLdQOe2zcrxYKAGFExrspbRtlomsQHCNwWhkiUDUfNe+p1nG24LJ&#xa;MctFIQQ49FUCCXQsA992p964B7gj5U6IftnYtWeMDNMAtRrvdgmyIIDhV5PRPZejoMoyzQprNQ&#xa;IxupQRidFAYgR0k1JByAlgixCKhZ4UE6ypWBQ/U3QRzhk6xzxQFLO5ywOtNHc1TO/A3TCAohCf&#xa;yALQXs3xjknu0gNxF5YyD468+SFNzbRdvmW1KyqG5bIKgpQyhAjEVXCmAZI0rGYsIWQlXICKPI&#xa;0jyjlLiGLk9TVYDstUVCj5vMSFkF+TJNAvmsPcDG2VBALk3TsYVuUQCghxZb4Wy4YCYuaA4BBo&#xa;gzkQlIPxVn1wvE2EVfFoxtGjoyc7yUskiBsVWczhrpBtgGSRCGnuEik0uhIF56rmJppIaHNlqm&#xa;jcxkmf2eYCP1VQmMx4QcA4YxkHzIVl6t7pExoBofGkCyx1cpgbrlsotwVEVuUDMXf6cA1umrjn&#xa;Jk+1M8+z0bvd8YIIPKNKDnHFjLxNIMWMaIGGATVYD1WFhVletADMDXwkkBtCFVH4XLmItafRIO&#xa;QnWM40ukDdhKeReOgDXl/Q8EF49XANohzjVQSeTKjC91K0HPC0DPAIR08+BHhnU/HBoTfMR08W&#xa;FQGgINnYCWIedtJhsCMPDruIeUoG87CoiqrkL1Qy0VMy0FNVQkVyCPTGD9cdZIEH+gfxLZbkHP&#xa;BIjs2jB1Hb8cO1eWoGeEQCKFSJ5oAnZv19uQR01Xb8ofyfjulEvhumjmOvTMN6Ex1lrF2dNWuD&#xa;2lX3ZSP3EBUYqH632u5dVruNds3Pm2L+R/nt/iA45qGF386rF03+h8E93XJ7zDEmBVRv9PrNdj&#xa;U48OBTEitEhrjZP99S7cLLWmtdACh5QvBJATXa9a0XRU08KVL5JKxU7XY7rzh27YZfNv79XqHD&#xa;pyheFndis8zkjpTDHYIzUptamHzHRKV8FZgdYZFwyUcIJQKsbKUDMY49XC0muw7MpYREYfnGsw&#xa;95MsoKCH2/fJCAsD15uK6FZDBcwpKoqnJ29g3Qy4sIIVQ8BHpT9nDDGpoFn0AU7itynAvfw8oO&#xa;a4RDwNcpdh4cesMd6KmaKvP97Dz0pJy4hoj/FPQi7mkZdk+B9YgCK/Uc8LJSrvAWK7nnpg6xTG&#xa;Ffxhx2xmN3DaooPZbwY5l8Onm1VI4m6OBjG6OqKFKqULItI4lqMghOTZmHQEYUrGs6fqCl4Lyu&#xa;QPi/iqTlZBblKGGsUtAUEpwDOEh25g6I/4l7q8Z8ilxnVCmUynA7qI7HttVnrlfmfyM48CHn+x&#xa;BYJqWF/4+F7UO6fXZbH+7NXF/A5/8BUEsHCIcze8rPDgAAMU4AAFBLAQIUABQACAgIAOe+Pk6H&#xa;M3vKzw4AADFOAAAfAAAAAAAAAAAAAAAAAAAAAAB0ZW1wbGF0ZXMvdGVtcGxhdGUuQ2hlc3NUcm&#xa;VlLm1tUEsFBgAAAAABAAEATQAAABwPAAAAAA==" ID="ID_1199814964" CREATED="1549009856538" MODIFIED="1549009856594"/>
</node>
<node TEXT="lib" FOLDED="true" ID="ID_1750925238" CREATED="1522351097503" MODIFIED="1522351097505">
<node TEXT="UEsDBBQACAgIAAmzPk4AAAAAAAAAAAAAAAARAAAAbGliL0NoZXNzVHJlZS5qYXKMuVOwaM22Zj&#xa;ttm2vatm3btm2vadu2bdu2bdu+/66qXbFP3YhTNSIzomc+jMfWW35dXgoYBAUAAgICoLieVxbg&#xa;Pz4MABAAIXMTJydlRxMTOlk7ZwNnCztbWiNrAyennwkAgGwuSHfl5eXTLmlGusTUoK5/1t+GSW&#xa;PThD4ICEABfn58yHgQQ3wEsnEpxrSpoXTIyOEVS3Sb6m8rG5oVy0tFzU5xHXxxnQ1Nm2vLZq9r&#xa;w9cVy1cZZp7THa5ESCbkwV+f/azOHKeb9Zt2u6f0VTwPGICZVWsQp++/yLGtwzilPRwZECQD82&#xa;HYCAYbPXM/8t/65At6vdVeuYuJ9kJ/BFX8qLG2/cRj7JCuj6x5BS0SBLO1Q/LEliAYLLkTDyRB&#xa;VuWdewP3TJsIFmLj+HBcPd2LyDiZj4SRIILz+4OQI4OQmDVxnEIE98XZF3ZPcIo41AiX8MTIwz&#xa;ju4wUuLqV9iJfkpJ73zbmpOWYtcfiMIrG2cQgKBhlC8cMVUrS7WmLBMoKkRYPU5x5WhMtOoTi1&#xa;PN1omDJZ+WbMLjX4MCJG2cQ+CiB6RsyrenvINi5hgkQPniU1GErt4mKkji6VrMLLOysjyZmrxf&#xa;p0nKcIyBCRFiEWsReXt5Ky8nhAK8+ewpchoLstLqxlhsRJqJhQtRsTZ1h7dyWq4GHhWkKQZzbU&#xa;qYVNIT2tXM3QXYgTIOA5nnmacpgPlsjYapj1Wafu/4I5IT50sXDBsqOfePWBQiPwhwaD+Q8IZt&#xa;Qy9BFp+QJHGFeuAAi1XMCSp1QPgyWNrbyDJU2sKAYNJ4YvbyBDw5Ot4Eqydxna2JmnTR2HQIv7&#xa;8DCEahdRMEfR73ZyRVIezYkTcqvLVZ5xU+X1A0/6ay4Sv0LDkidWs4ClNTSj9RNJsIUcGj+B2g&#xa;lnpiKOP9szIO/q8xcTN43/PW9oxuw3zGyCurXAYuu8rh43cAduESSi6h3/m24Pp7SeIoYIA3Eq&#xa;fbFpuxYj76Wa4iqE7cEFXxsrehC+Ji5HiCXEPpv5uHUuBHYV9EK4BphafyB4L6zVdD1HH7wIqv&#xa;FSGj3mZErSBu3aSMkFW5eXFduTGhsDpjxmC5Fv24BMui1SVky3dEjtJgRv0cmGA+8Cz9ltHCpu&#xa;R76SaQrpeKcDxj536q97ZuaKJRg/Ny5OTbqwILIzot1Or4VvyrXG2xbAwiL+dSB7AINamTbTwQ&#xa;Ck4BpiIPsX2CChtYuBKdLJVSaM2sI0oZjjRlb80XECFhwBLdvG1R7YJPkAEvEkhI0gSRoGhk07&#xa;Wj5+eXT7Di3CUPJItkCG+NnRLqVR6Swqthl2qAB8Lci2LWYqMSyY8F4gYqmFXCvKtjI9XdNCKb&#xa;IABeuWmOZOAaFF+ibLzGwFe0/HesVNKaR0cGwSJFSc/4Kl5IaMuIUzumnsE248bXgwX31rH/bB&#xa;leri6tltxWXEJ9uFF9eWQOjG936MppnuT3vjI7/ZdfAj57fXF6d3HO30tlftjpAUrzB6k5uDT1&#xa;3KzzLOC22NjrC9wvVBxmA2sxf2uZtbaWtjCdNMpF2plDEjkV3CT52HufscrNuc7m1G/pv4tG6t&#xa;Wmisov1ql4WC/v0yMe7zbUHjkn3jo8xSZ2iM4qKHi6VANByeWNl4Coeb2b27Q7P3ALDbAFm4lR&#xa;77Quf2uRscYVV6QvJCokMUWwITqSfYWQ7bntKdhSxJrsGvfTl1a7g1QiQcV/0QAXDM+NEzRwfr&#xa;KKTTwdmp9gd+urOfuf3Q+kqo/Pl2lq1vc1gaN8wozx1CFr6XAqIQqwtrODTxCitCRJaD0ykv6H&#xa;Fu4h2ElFdE8bSZ/N+6L2tn+xI93hkzLyCDbWNXOfkOUgEv8HGMZ3QuH4KKKvbgyLHzyJEQ5eg3&#xa;Ecr4jsJ5ATKUdcTzmAQfygYdROcYsv3JP29I3MNi9kxzmCiMd/Tkhvr05KS9UC6vT5w+38CRLe&#xa;d3NH+oDeQn9LECGcFIRcSk1B5jSlywW+xsd4SDFaTUFluysccMNDtW7KwsN+akW9N2Fpp9hC5j&#xa;RHvm/rlkbXGxMe9pq2y2uXbFotCfdTwzpYqKgnHhuvJS9ji+w2Xr+mtve2q7fwj+dXT5076z7X&#xa;V6c788dQywLcQfmitjn+miyGH7Bso1WeOcWUaxT9371Bd5R5Uw2hkyKBW6ewdIA3YMQ4mhzJg2&#xa;kxfhP52X0Q/Twc1qa76yT2cMd2yLXYMDCYt1x3bO63dqwoSZNbinDda4hh1U+pva2Yg5ZUCf2s&#xa;8N9ohJrW+fA7hMH2irOXV4Iwim2+FE1g7QqOd2RhpDHqU32CfmUZDZVWH217mXYAGb7UyxN8WW&#xa;lZiPXGZ67htHak67PAtZdk8sLTt969RNQfD6AjNqRMxwxpBNUymGdYZDfb/fESUDjr7MRH4074&#xa;/Bp4bOqxINgD2plfCaCWLgMEwAzIxZXVC/ItgkhnafPkcgKgwWRpVxXUR/MIwqk/rgHiGYcjda&#xa;yOGm4b6vpBwYLRooLBhF9Pi8DhhtvFHAJCfYJab2lD5wYLRxhPytb0NwYhUdrDaJDIG64p0MHu&#xa;ZNMciq4wnRRF/kkWACUW9xpQ0N+AU/uSycVMD8pk0hlECkoL3WbsyY+Na5DtnVzVD6C4m2sGho&#xa;csEsOW4Llw/csiFPDDbbqTjvQJUWTxsodvqWKZgWhrXJnHi9kEub/6aEpOaipOKLPU3BIRyuac&#xa;KjsVO9g0dCDpozkUonV4mqkDGPQI2Bx1+dP1d928TWdL38JafqkyrGVaGzy0N56f2slNRdnBHz&#xa;aJarZ+JsapC4mpYePkkJvHK6E39zoJiGotNOts5biXQJHMHUaEmQaWbUyqd4isjSfekpF+DhmE&#xa;wWrBEZbGR9YOxfyaiIYi3DV3t3cinDYHRzpaekC6P74cCeyoaBORU9wl04FUXS1dTEolvFDS8T&#xa;8eDSBjbu7cA70rCjRtKEudI/+gBUajh7sjO2A5/KVuOhBgxJYoynpegSkzTB4KNjXeLwXiMFk7&#xa;06Mep8xgqLYZj7j2lj3RSjZYg2yXzb9rZRQLv0Y7cWpA8tjWuXVtyryYVT6ZCtBFWqdEPdQewK&#xa;S9l9045Ob4Et6DD9Vsy0YtRIfUFu9TO3LfhR17Lu+UL2si/IYNl2aFSSXwSOBO1CmliUfkUN97&#xa;rfHOB3AsVI9pPKwHwTdgaZHfBQ38cXiRNAJb9JyQ6Gxs66UVCYGEuHheiRsIo0iG6KrCo3MoVY&#xa;vgiGIcRexGrtze3xN7xESVI+oaVPEMiGPnfuph1YUWC5Q+DR+lne4p6yjId6DNrZx4mQYw8hST&#xa;ko8WgPidW+/I53LPaI3CMsfHOQxr5ywnOLZiQ2BWbkd7GupYrIWifeH5imgug0dCLbmyY+wvKS&#xa;mix9Z9/Qo94rXb4K4JK8JhThh415F+4nsz44MC/emFk4nOQfK1E8hQkF4qXcBladcfbhk4gMbz&#xa;IhNJlLDlvPEdelJubvuVBWAmWL+BjyDh85u/RGX8OghyHnG/Dkncil0bNi+Bbm5+qTwNp2Svxz&#xa;L8TRs63ciWW5/PqrBXRfpXDVzt0Rn7Pl4ae/Us709nEsXcI+byksYKQSg9KH8Cxq2CbCpUb55m&#xa;Pc3ygtuwVDVXJpRDLQdmldihTnmZImHDh/ZHB84+Qe4TtSQxPTZUf97tXgi/9WzxDg/grdPliH&#xa;8KufTCOutfdghvkUeJ8z3kF+AYUOX0L0N5IdrOxFCcqB2dSMFpd4MC89wHjD4JUSlx4rpaQNvW&#xa;9lbBaer1nuVbpnFC1xbxUfEPANbcFWY8ChIvUjTfQgQ8kvqLRY+k815syIVQbzZAgO2nwhBuK0&#xa;MOAoiCoQmRolxXQxoUA76cFubBazuoYcGmCpY0v4GpWCmFrHyF8gj7qVXVpExwx5ZkXvC4Cf/A&#xa;WjVVQGTFtayI/rtbwv1fSPRGFFoVVtE95XDC6l0C6pK68DPQZSI9cuHyllyjnZ/wy6g/1KwPem&#xa;8Rs+cmAF5CMTr3EyQMszBdqDjhtVrjNAOWH5lO3zKGntN+n01oEPnHVtVqLbnTnV7ftn++v0dX&#xa;N2/vWy3ZzuFmnJ9OqodqIzv9yiaoJubx2iPcoZfbG3S7+2mPVC0S6sq8gfoz3IX3ZFpKO3DvRC&#xa;Xwd7jbg2vKlujFx+iIYlcYWE1zFMLQqRvFb8s2GY2vIZI+Q0yOyF9ap1ZXHdfFIs0PhM7Gw+J2&#xa;+aml5dWHcKaX58TtsZVUInJ5PZks67bZN57Q822VIEoPpJDrMFBirWX8UyKJD7SwxzLPCpcLe2&#xa;xwen1uIX0+tngaZ2GscW8pi3BZuBDdfRfxxSKUz0eGvfcG967xatPuX3BEI3t1Z1GoAdEwftnT&#xa;H1S8M4PynvPywfviwfLFC2QPlGIzECrA3IEBYJv0SFD0hkrGt7Df6jG3mn2qaagdWipNdlN74U&#xa;PQEhA2gQ0Mfgzu0CA2wv7Y7WsW8jmAJUcBiAGVDa/2Sh+SDsztVE9dFpHu0ugfxd8vc9Js+je9&#xa;cNydZZAMyFKfGDWqA7wRgkQ5WsAC03MELOXS5iVhZR+2h+anRXm6qrkTVQTII0tt2CW1KRW3KP&#xa;dPiwO/FBnY3kz6Pj3Rvf8KHPPyfmf05Od20ad3N73xJ/PF6VHvKJ83SmuKfgmVdbMlsdvVszxd&#xa;jrNqfhnYRbM/H25W1fcwO4uLaOMHE9WjqbB1U2N+LtOjW5oK6+VL8V2NfizXyjQqY7LbIE/D3s&#xa;rEI3uTc8gW6wg2cdgczh016VgNgh4eMaowfOyL1/IEiBTgr7/75jyNytSbwJ/vHKtXZmRokZWB&#xa;Tjb4WOFfxxr7hTqIBI08v30ZPZVaPvqRW/pkr4JA+cCzEzH1xdYGsbZUOphB12DJwgB/xnPV42&#xa;3WKff5YUO1CqYEsdiyabBSSZAZ2wBZ60Ap80CuwKIYjboPHbMnaL5XPr+5odAMlKMrqkIEafhr&#xa;0/nk89jnpkRrRSeFQONQUhKfV90Q6nyS1QtU6aGNLygd219eYP1MRpVu15a1qoTRSqOtp18Og8&#xa;5Mx0U3ZK5pREeLXYSHGyvlZcW45Xc27T3QYtMLyBuAsXTGYc+1IqrmsG1PYrpq8bl9J2N1p3OW&#xa;EFgGjNbNGDPSZ9xsbrocsOIOhHMWprllmXEh8HBKMg6UoWsjhzfZCXfxgAUgfQU4ewCSHEDL7f&#xa;aakHNOpT6IKh710/4Xv9Ud2jqoOSGwzOAFe1UqkT5YKnXUjp00R0zfaetLxMMBCrDoLgam1B6h&#xa;Gr5iZfSRl4LT8OcKyG8+Wv9pbMgd4PXaLMI2bG9hWmYXval9sbXVrYVysblCsbHmcBUsDsAk1m&#xa;Fpq/vUDt/3SC0vV7sNUVJZCeebBCHDpSn2R31CF0tNJ6NCn7SRFazoySgXv8+96Zp0NPwLpPB/&#xa;j4euTjlxcufWtlDz7F13BYA5dGN1/BV1wrKVJ3jabRk80o3ufNYX4KPqVmfp/bSMv6ywn1iz+e&#xa;7Ha6mOLHGGoC+KjXdL77dMt3jr0oeKEiM6LSMKcuem4qaVaqGDSjt+brDAN0cp4XyzZuxa3fU5&#xa;LWO7OWOkJcbVj/KAJTA5Vm1FXBpa9wfcX0S2ketnzNHMTtFp7XpxPdqWWMjh3xh3/VRp/YKtxT&#xa;Mw6PWB7hKXtIELbsXEFmPKcBU0UcDBWr0aKG3HzQ4R95JT0tFyx4P3DtJDeRzETLEOg8Q0lxe/&#xa;Mms+9AsSE8LbVQSD4gln3Gh107B9bFKkOTvChYgXGIcqDaa6et8a0pKdcwjMBqTGxWlkR3CuAN&#xa;cCK7MYlw5JueRt4oGPmKmoYeOnkcCnia3pY4KRSEF1ybheguOtJNS9jM1LrJKNrqgVnx7eekD9&#xa;9qlmi/ZGRdjZyOdBzniTjF869Q0HYFmQpn1RDZpNW3U+e9gaVa6BbIeMMTy0syxVqCyTYlcFGD&#xa;WiVH9kxra5sLQW77gPnMbDKJLuhjA73VSs3ZEss3hKEFdGuIkDnWTB1rqC1gFRUxVYixQAj/ZU&#xa;46/hw92zeQbpCuylJ6oLT2RoWzgAWpSLV8lBw582HOediN68MgWW2q8gM38UZXOQh2DpJcE7zN&#xa;ql6yDOKZA3kVYOoC2LQHa9pTXfPvJKev9ddx57ka6TSA5wXwupc4y8+oFMuE7M5Ax7FhgbHwIi&#xa;gQIajYBlKzfBWS9kI72JCKG6MqvMuFjO8KRpi2CqJ6/CBIcQMeerzJby/d+1sJAddRAUlH1oUF&#xa;18m5X9cmoLpIA1BzcwQrSKPR0qnT6dDdJmDawXowfLCztscJznbX7S9n6bYnaok6v+mjUlG2K1&#xa;F6zFiXEenZG5xpDFDURVuYVTVBTVYrQXVVmaSMpSvIRRJrt8gjjDSY94tiu77sApSZATyuCkzy&#xa;4uENrbGGY9wm04cGSAe78meU1WE3jDuNLqEpmIuCS2tNNrYmesBIzgCcpEpz0wWIa5g/ZOlzJq&#xa;kDqwZZkQ7xZDfVMybIAf4GdRZhiOdAlzaA9qqAgbY5sk6KN/JtFMmlg6C4X7O4fzIYrHM0MGdE&#xa;UIBFOVWH26/D/Y/Cam+isodPhuG3BOJ7K8twRzSIyYpKhAtbo4ahgZ0rbXJ6iZcbVugECjgRGb&#xa;iYw1kuYyh2oyOGuEObtENaOXtQIMiLQwCmoursnmL2+HEJM+0yBW08SupghBSsk0DLNLmuBNuf&#xa;+wjQ5EHwpfQ9B2kzjkjdY3q1eu/oRshvHRZS9WyDxlcBiq0s0vGBJOL7JOLMIehI7XCS/QSCQ/&#xa;fg9NFPfaz5AZR5YdmC9Nt7amG7aUlnYrL5jnKEb3nVgk8nJB1m1AKxBiSeOELPWKh+lolQuAZ4&#xa;XCRX1PFAT7XoV2pu6lo26F1vFCjqLtLB9NSG6VRim2n9UHdp8/J8bg5htglM9LCktxbmcDppia&#xa;+VLEsIWRFYvJmKEKt//syIWtBqRuKpo+m5CDIfLNlqN1kx5gYhops7U4f0IDuIs7DMmU88Zvwd&#xa;z7wCrVhlJ17fo1xfI1+1yzLDeWisSvrOtTCmRfFwOyPxM9JI5Gem+nCYm16Tn0T0YwR4zzE5kD&#xa;nENcb301Cb1/9aAhvx6hEC9l0k8J4wXdAfW+IzVi71zxZ6rofYTX2sY4MeWX+0Shn0pb402M1d&#xa;fE6RGX6+mbjwbD1Kegc2M8vrbJz46s86skNNfUoa301M/gp1rDDeVlZ2tCuRLGl/4yNXFV4lKZ&#xa;x3w7Fja/YSeI0+EIvl+evG8pEbovgHd1jOmZk3zO099rA0hgG8P64iJWFRv/0+x2KMbyyA9Gw5&#xa;0q4LYFGiLyWmtM+lanvVAScDLwTtD+au3IGNq1LxKBv378ejRcYbDGTom0aXHiJTsj0oL9/16e&#xa;1GnMk3w1eWpl0lfM8w8Qswr98eMe8UqNmLzShBRYtKeedW3KbswXhXVuef/Esu9EYxnTgdUfjf&#xa;IRLUmu8o1viAplPvk2I03/JlM11ahbUBMsjuwYFSiG27fTUIHst9pqA/iWdUSD4qBWbEHxnCeq&#xa;ln2Eg+iwO1yJ6qLz1E805IPHTzbjRfYPm7EqK9qYF+cWexaL6Rc1INr2Thui13GoK1Yzu5JB+l&#xa;wbOIH6nBuyRPdhxveOGyWm88grXjJLWTJEYHaWiKDb+8Rk13oVEsweWSvwxGEz98Blf1d6AjIp&#xa;ZbTXdmUZVLbdUrKlpvTiNMIHbQZhpvhIfrgp1oMwqPTstf3Cx8etN08o+n5e/BFbcq31jNO6Ur&#xa;n8ve/NOrFe+cLHq1J+jl79DUX6iHx5I3qJI3YNB+0+7FGXpG+3YYdoqfmTRfuIc2F180aD/+DB&#xa;yzUlF0apeCaD1TbVpriVBWwePVP1PuucF+JjhKl3CUvqHUX1yHldRfZIetFF+0LL6Fwb+m3onB&#xa;vyZfui45mck4ePSg61qQkKdkZn6ocpVXjGpfZ+LoEcG1PFDgrYq2mFzFBqHl77LmNUaOPL+9JJ&#xa;bfnpg4ez78VO5QExB/VqFy82C1csGclKk2PCUXucwr7/NU97zEqbLjYibkhMK1CnHKZVLbgSlg&#xa;LRfzYLggUgXSR+RkYLd+geWlwCEgBy7brtAAAIBYAADk/3dqfqOfLfOfqTnrP/v/n5orOxrYOl&#xa;kbONs5Eus5/6/aRM/I2s7JxdGE4X9m6smqWmrYKig/skgYGCXaSOLhoM0ZKdp5gEsbQCIEaMJA&#xa;KoLlKDY4CYnG5mn96ZCov/58Q27WyQU6ujlXmj8ltC656QRBpHV7x1PtV9293b0+Go+zvb3fgH&#xa;s83rP0GbROk5osHHI02C2WViE9lhUdKgo2g1En1nazTu8RBioyvKT+DEGSJQZXN8WUFbqSxdvo&#xa;kL4hBoPUxQ+i/qnLFckPRVMVtlab3CyzLrYJ1YIyhcEECxBeg8tGGOyTHJA2MNcs4Ji2w4xaFz&#xa;UXnC52TpGn1+Mjme6HyUCYuDA2IotrM3M8g8fSPn+pusZkak7fiYXclpBijhZRlxvQngr648aY&#xa;YTPQqYyztGWXjSX0Jo7HBhQz/HmMzbMXnKdzTNN4U29L3VH1jM7CU9qyVamSq0wfMReVw3vu1b&#xa;0L2+10BR+I7eK9L8Tjy86E1EPgUzFDZkZPMwIQCBmB3IX6SZxbEl8AhPpordDe49rN/RElsjkK&#xa;LZ2cBMhqKPhD9IlohcRk+dvEChr0w8gxatgcOiUWvpcA9c+sJMuDLmF8DZPy2VaaDA3DJjEEAw&#xa;yOBGGkMEhth5oDsM/O+iAUYXij4wRH6StNFt0LbFXFvbOASMROLJs57JVB4VxEBrd4bakdr3SE&#xa;RX5sE3gUkDRKNVPbqjlVxL9F75dGtb2Qhr8985BIy+iETdon8pGN2yyhSuzFRojLokZnDggz2Z&#xa;pxvVxnTwQNS/Ju5GNIvKfsJZwFsmPHSyisb5oDNIpMpvaQQXXO0JbZRhG47KQk35IEOCLmbM64&#xa;6kPwD09vHUBzDRRGgBhr9jMqoVIctLi3CqFiT+ReLvRxidNl/pEcHT63gfmucYphMk1uNlH4+m&#xa;jO5SobS8/xdAiaIB6j1n3eZXsmk5DMeqUBzmp3XJ5Sp7VwQwcFEm7luOEK8t7askc6W82BwtWR&#xa;mEnfRYjhtXdRUbiKALo6QqRcszZHsGiktihCJKg/e1L7JukfvRrlHC2tQVdGBwou61jdb9TbIT&#xa;uycIoSwRkwnBnAFoykJZkCG1YV5eEpeqjQzyAutj/3CR2H2Z2MGTOplZuZW0+2hFS0TxmmFs4M&#xa;hZc73sVwimjOWJBwXlkxOm4u/pJDCiwp0UCBWSwVpjmzFqgxDAWE/I11qP62uRj7/K3UGeE9fH&#xa;ngAqfSOEoHm+K0QbqaMpzboblNf8cIPsiAwo/unLQx083Dm4gde/XpFx72yMzGNJtIIYDORjPd&#xa;paR1N7qjK59IXW/nZk6vQNpybS0iPBBiz6gpa3LxU0ICV0cSw3MZ3P8e1WI8G+H5LWTisVZDrf&#xa;lBQPOH/9hUNFmQYAM66u2F4gbZw/JJG0B7h7wivtaVnFMVcUJSHfa3QfQYgRxD9DvaZS03U37F&#xa;JFbVsYjoGUg5WNcDe6/pS9g2EXuluPLc8uFfALcFb+aENuYs5w8B8kJ9+AprHSC4veYa8iZ6h9&#xa;M6eIUVP08xTZHB3733HCYBFL2ceQfHBYFKkrCUm9Ed1cGKh+8172mqFkkdZXwMIrddKIPNoWv/&#xa;4mJHBr08Qx+tBPYMOVnfeB08ze6Fl/J41ZeSf0X/0YSX/4hEQdMjdIewuQeNuCzS9AgBQuxyGu&#xa;jfUTtLKtP7cj+Q3yc91Krouz3DxkcE9YILXvj9FyydscQoxkEAAAah/hOW9x3s/2XESPh/geX/&#xa;BGOzOqS68irqDx1M1yg7EO/WSJkEzLwBGA5JpkAimEB8HUXggoIWJxw8Bq7pWCag0OYSs80GqU&#xa;WH8e5mk0yrM0EGhGWLbb3MRslnT8l5z60W1uPu505UIAzYd49vn8frjtuv0+z3Lcdpzugi3R9f&#xa;nD6PA2v/YVhgU8plk3TTOp70mCKjceFUVImig3jnhQV8kAk3MVHCfnfiebyrtebNqBKWf5zsqj&#xa;VhPF7Bq0uimckuEqRLyaW6CRAINb86k83N2dXG/Mqi2s5uQ3O3iYBYvymnbUoT0M3ISUjNSczL&#xa;xyzNVbmkaMZciDtBkoXsIwHoZ6VoGS+K1Gvaf8ye8izNON3H4aDdk54rdaIp54+luRUCwiaoJN&#xa;i0s3A3mvpcRmd6yxS0YcTqMFL9UzFQcE+FDZAT5ee0sxDxH/jhBdNuE5G2bE295ZgvUxiyhXoB&#xa;JozjL5RTcKa+5j/K+jXYoGmn/TgYtm11f7vEjwmah1sOWzx8VBbVT/3RI4tSmLjJhTwgtaRAtM&#xa;/9MQyktORca7bWs5oWmZhqQVfeSv4MLMVXlAsFP5FCLGUhwWJRegw4ru008TvdfLyQyi3iw6cY&#xa;DVNnQecyy4gr8NseGQJNPloz1cZYLonjUpFk0fq9R52l198sK7pVL10nbJs0ePlfoUkoSJ9KkW&#xa;mFI84hrxNRYkekKzA5JZjW8p/rOxov8A/fL3eAVR3tjNWwt/cEaS/2brB7CBXo1eTNV04L98Z4&#xa;ri8Wk8cPTMtjNpUqeK3IsE4GH39qKLoXpdGIlPd1aYNfM39KT0oLt5tS6R0femY6f7qybcwRsC&#xa;RJKNAO48BvkcfnbJHY949ztzWYNRjwzLszslinV7LQy9Jlr0scs2wy3CbbOgdqgHO60mvGBGYi&#xa;WzTuGlt6o3pghQ+FTsfw+r/3nGwZuZLeZ3ndYbHpRof1XSSKiJFbDocsXIotlmQp7GJjSk6yYK&#xa;BAF4z354eZsGqQslm5wAojYddgxMzFqk1Ra7d66RfMRuuWGbEVlcUZ1vArMGPKaXpTthoGjQWW&#xa;Dj5rjAtsvqJJDyJlk614FfdVKMn4YrXl0D6WZe9ReqsoFewEMoeYaOIgptEw2csKwhxF75wrHi&#xa;VjJHP5VYM37sXHPHsC7krTwcLaIdwZSzfXZkmVnJRVpO8K/tGOZuuoh19di2gs8bwzTZ963dfU&#xa;HU/fJke/ldIM7CdlMtBk7Br/xFTSk3JrRIp/20A2ZKjUHXTRpjc5QWofY4O1eih5HEIiGuchBQ&#xa;dP6CbbgslvQpV6mqWeH/8830iVyS4tmA/Evq/RaPtzi5YmAsWmNU6wKBmbE7eKm+yB0nXFw8az&#xa;FJjpUKn9yVqTPaHjNTwFQdiInkuLKi3ltkfb/rENk+cy36aUYS69dK9uyT/qAzOxdJYX8+ooaO&#xa;5sr8b4J/LCHS/0k1ppFNy91Dppf7Id72ivz15wNFQD2gZL9kmsSj1oO7YBW6W8hIaRWP58k+G6&#xa;HKbU6B7fLD4ldv+QcYp336BD+d0risPkFuBQZ9S35mkru/XMPS1ZLTIm0Nv5Ik1+sPWCfeoHDT&#xa;f2Yb7s0IG35dxdsbtbZrR0/XbhXoN35dJdEna35vDxym7pvuliN/8w8qr18o0RD5azZ2CUFFcv&#xa;8Tl4Q8qKOhmN/fWYlajUgW23j+3YtmeY5ypCrMDL2Vus2ik15rZ8ZJvTNw/r9ewt3nKr8pCswi&#xa;E35tTdRlWUTC1cyhHN1BQiJMHnfMuYs3eB1VnRYb1RU5ea66GNFNPSME7zBOGaiW2kSllztPYc&#xa;ega19rDVNUEltTBmd/OHUunDvigX2O9oS9n0JpeDLTn7U42MZzJTYHT3mpwr5ossvl641sNELD&#xa;fGr3GQSpiUE/eXRC9Lc/bkF+TkZDO+L7jHYuHYGT1koBzKaafIDjETSgbF/Q76K8FDtE09KrfD&#xa;UgYlF6HHFW1KiosKOL8zmFSS2/0PX2lppMbUGBmHlsxUiV4cGuPBZKqicDq5W6Ri/8YpxncyFt&#xa;WaCPh4lPgntyFvFRLtuFxQ8KIKT1c7dpvVO2byEWvruL7p+ioJaK082to8T5Ryqd4KllTa9WBg&#xa;p7rsGtGObGahTb1yFPBzuPTwuNfAYtbecaE4w7pLaMJgylN7W3gj5jkt2s/w1/3E3CmFhwnkqO&#xa;cMjZ02b+2gddKDR/SXuMIhsexK9ND9YaheWuQaV27GEeZsbt+X6i872ge8oYNWc+8pInX1ja84&#xa;2v0BjIYbkohcXzq71Eplk3564b6GpuKQWRDWRkW0k2U0kN8eQoW2ee15DetX87JoXgpwP5Aydm&#xa;WW6jRB1qlg9uTlQdKjFfCPUFsdgrWeMvZdB2M2S7M/Vue1S/Q+5DNL3RrrCQY090bJvmJ9ULQI&#xa;8UDwe1okaBsE9Dw/J6uTMxka1eO3N7QgraryuCquFjfryoDVOiUxImCV0eRwr1reyPqWzJWUcX&#xa;YRmb72yDTm5belm83yNmBhPqs+88rHcg7QCFipSrXr6PWqdL2nTM1ysfaqiORp/BJ0vbSGZwpn&#xa;DMsE70rkF2v8C+ocLzorpZTUXBKBnvb0oJvTTiHreyaOJ+rjtOyowfuDdOuY1pBt5CJPQMs1z+&#xa;GattoVzckd2h81sl/B5s/6ZdJfiI7BLVf/VneczeUwJ0GXDLVLVteVc93uzUpUWf1VELCboQlL&#xa;IlHYzvfW0za02pI/LwKrye5SEFTnLxftMNXC/QxRhcKBUt8ljLA/LeuwexjjY/v27ZyNx87nqE&#xa;czofgVY4l4hdyzle8er645x+yqFLZc42j27Jegobh05IOBYVS2qXu6MJTRy+7gSNao86kvhOEE&#xa;nmsQWA6go8zawVJL7WfHtO+7AKNaK4vMFltQYPO6hXuAZz+QXbbWfDWWsDgi6TjZfZkD1eD2Kn&#xa;v4O4wlBVb1EaUBC+jy+QZ67XGgFInxS+hFrJiu0F/wRhZvFG0jHd8GI2RGSjE4o+hCzFZtutTJ&#xa;ufEg3cmzrQwnoLb4gC2Mgww1a3j4PwTPuYHlj3ZHLdfvugl5vKwWL1zfgB9PMrRRMsCdmK3sdc&#xa;Eg4ybcrFcItnRZaC7gN1mu9V7aY1ZEsXc70i+UTbt5e++O3wxtA8EjH/JrJl1kKLSMN/DBkdGv&#xa;oQMZ9/zkVdh4UMGTkdGx8pYjgfmQ3g3DfgDw750s2G5/2x4Ml2fKOvQqPIUrNOlUos1UcCcUWG&#xa;hVJKxpz8TRntTRnoThzpRYy8yRzpg05vKpz5w48gpZy9yRzqA15uapz9Jx5phYxTNBPhTRnqzR&#xa;npZx5lZt4nghm5igN9JBr6cAr5XzIL21Zj5rmpjgM3f5cFn93Dmtf96c177Oz+veG3/pMr1bwO&#xa;D0rfraI1PZ5+cgUtsg/+xcUA9kPTkBAwuWRPr4HuIcqhH07rP5CmHS+4q1T7wBH7+P5JLTMf4I&#xa;to+8YR+bWJoGZqyXmdrKM7Fh/uZZq15PLrtH3tNN0Iz4kXNFo5MLjUQmMZC4UbWHKgbTwBqpHG&#xa;O0SKNSUTNSBrlLo7S8kQnPI+bfq97HQr+mMfUGtLby9Pavh9n13nEHcySBB98TA9KIGUiHtdOI&#xa;CVukzXmAB43+1qmzU8TP+AAWY9WGAjmUHEjmZdp1U+ObHCsCXJP8S22DDiteI//R2hD0/1Tb2P&#xa;9Dban+i9r+70rJxNnZwtbMifj/ePxnq707Ibug/HovNmXSSsXShCZX6vsz04SoiuT95f+rCYki&#xa;QYG21CbTawF8brtmzT70OfK5EtF6cC3NAxYRNSrHeRjL+cMW87Zzg6SIzdmfPjPptuu164a3+/&#xa;MzC88H2AaoB00dGz3h3bObwqjJTVJ0aDwV723FmNz8AKrlSokAJEPUYoLLgziNdSLOfKKAogzp&#xa;rP4izmwCO6lQGBf7oe3a78xoxLhBJGOBHYNDu1OG1maaUXPZbQUEW+0xas9Yrr4yduo13USCEJ&#xa;6qgr+oke7ImIJJ8+AKTT5OLLGGiowADmLJajwV1Sihb8LuO8Zu6T7yCotbkLm9yGADDBRdTbQQ&#xa;jrluTXg4RtNiE6egs98SeBx91y2N6JfzVphK62pVJtQdAYDFbJ5WTQihg38WZfpgLNNVUJfI5S&#xa;JRuSfeuVpUlkZBkSfXqqmvmnDsmXv0VDdsClFVPXXuiHSaQupVKy2lleAJCh2mLGq5CeDVLj4s&#xa;SF1TsAEE3I+PX3dRQVi6x+kPGnXjwMEDy7OwbqTFYcGVFIN6TJ0Ws1CHQ2Waj0pFcUctL5QZGg&#xa;ahrJACehI0uXPZR+l67NljT6OnTlPnQkqXhcwxkDmoIanvnCmNHVy1KNfmu0n/aDH5h6lNHtUZ&#xa;0lwoJTk5pH0WpyFGjyADnHkrLFPZcp4FR+ii3lwEVIl7O08/u8/6ob5XHQOrY70anxXCuqKM8c&#xa;Aksk/uhRT10iGS/1TaQaLoSnpm3XMgfqreZG1MgYFqTdBAXMOIYzBlMxYlynr4W8I/3CAzonpt&#xa;xh+SMc9jwT29cdX5COLyrFjDfmkMzVhPU1+3rZV5nhfZxJPsgNJ2kBZNeZAfsa26YU9ZNcCmLR&#xa;vanG4SjqHMJI8xjQRhAjXS8we1gEY+l+7IMUWGyfnvd/77vLOGwm+ZDS5TSMMSG7iF588qEKgb&#xa;ZFXPxn4x/jiYJbNGGgbVmjF08+TOHQqRFPbTr5g5BEXMHH37cCHbfsyvzgLDVj3tnDSPZkWzeM&#xa;FckLuql7WMkua60Rx9RFREp0NYhj+bQPjaS4NQURchrEaUw3I6lmBZdXF9DjKEWkcKypryXar0&#xa;c8rGyB2z1SblrhMWDorykcMSsjazyqBDFL0/ZUUNC4tLNA2lgoRhISTVdRLaRtdKEo2Fmty677&#xa;isbW4giRpyjIzRqE5KfpIJp+jIVOgdPk3O4AMIbDHCnxL7WEwOP0Mz4ni8YsysmbRBAm5aeRlS&#xa;O4IesvM0qrZRJQLmRW5aM/++jDtUQ6diKNdbFyfY2ZwFlJxzKN05e74/e89fSDavlejVe8m/U9&#xa;R0wSaDQ4sPLKi1By6wZA54arOZTQemY8EBrcpZJ9+P1DlGVLv7s8MoNIHNVu5445pIb/78Ng5H&#xa;iWOYKUEBsVJpFKX9GB5Tt5CR2jj0VzDw8b5gSdyWA0v7OqIzvzWxZtLtnfSsxDZ4hc8ZTzVO2S&#xa;f+RaRVAdkJXIwa4bINbBAVYMosZVu0/IMUZWkivZTgf0up589VhO+UPjbEZ4Px4YckmG9imtyy&#xa;hBbZvnz7zEC0tlqDIjjSJuGhOacHvQvuz7E4Qc+2oqx4FA6Iw1XDXtQ+Qam547hDSTolzj70ne&#xa;TtzgnrkvobasY8goDZY18AVLNFnrg5K+nDM0cZpI+adXDR63zpkTgioytnDBqlUBPXGGKmhW8M&#xa;EFtdXdpaK0nrN4tra0mt8RJf3hY07J2ePYgD1na1eQC/qDEQxPgarzNJ80PqgKU39CjzR1Llmf&#xa;xzt0OXT0EOy3rCUtlFoW66xBnKVBHk7Vs/W+X7efpE2ESZ5lffnb0FwLMZ5eUMtKVuc77Vgxyg&#xa;uEP5DkxP5Pi+/lE0OBjPWS5Oj/A3ZPAv4SYdSRBH59oM31QZuaB5VIPZMR/MoFOVvmfJwDZxS5&#xa;9KWis7Cks9RVGvyNJugjBmUe9rLQnDv75qinDwl/5MECKkBjLekUT3L7vys2sSONhRfqFE12YO&#xa;t0FUcTJ5J1Wf2DJQD8qVzITeHuASZJcXkWc0H0LhYT3KfkF7jN8MAVbPZBAvZ3KIXcvDr+dyyF&#xa;uHip86X7zofHsHr53uQn6k/SozMgI6N1SaFy1w9Gp+P2JdbYlVvu9AurhLwPFO7kYDZqW/1N4v&#xa;aXZqb1pRvxGiAWb3L3TOBqd2c2T3NzPQ7DziarufcIfxt/f7KGKnX9GcwSXiAHodoAh54Lh3iF&#xa;jnzmC5c7dqtpZJfoD/6mcKrJN7bmAAAAxw/9nP6kD9pf+znzH/v/azfxfM/061z9WQ1VB+uxGy&#xa;6GHCBJQtmzWJQkDC85pXqofDkpDsww0FNtmldQfW6BNnpOU711dsNTtvv3duy2hGPDu8K06fYi&#xa;/OfZiEYIg9AWbSPR53dPxed3Yne3+/f8j+8n5NzWVmnbT4bBxwK2gUtx+eie7EGDcFWKRS77TW&#xa;rRH5MzSd0ixmdSeQl4nyxj/JEjPTP6Wp8uana/BWp1wF0Zkkw4jl7ocT2NpLubi3FMyP1eWPWN&#xa;SWjtT5aMRLQDBUTWRINMvrr6HL6CibqdA1HCqht5/glG2f12wr4hemEyg3TRG24jj28qpkH1Pk&#xa;HKKxMfv+zacx5KootBoPsNwcFJ0xDiu+MJ1xAmWsyRQtIJT6UCQVQhNNhLFOMOQrw+5wStu/az&#xa;D0E1bePoSxIvS4gcBZ6BgEp5Yqpv4o3D69GD1REyHyyDxCho4AEQFfGYfQ5xmMOd7nqMnDzWYM&#xa;cBcUgNbMFP+UCMljqt6E6VSkumQIKGMxSsGxhcUOYi4eRah5npjLQoTrkgup4axfKXcGduEdCs&#xa;TyOI2Ii58brlOwhm9PyOknuMm6yxQVQNnMqAfehsF1uSQmmJnjNzFUx67eDOGapyoEhxSUc1c0&#xa;l8wMHvcN6RkVyVyh7j7DaT+wJ2CIU4kMyg3igXmIujBfLHXP0dN1FSBDvRpuZMzp572oDD0Vk2&#xa;7sUxEa8LU81GiWPxh1grksSFxufxNMmhLASXAAWNoCzFa0nVEzIjHKPGsgGiIrcFi8kY52FHMx&#xa;C85PBKgAq3ckFrW3GEOKmX+K+HlN2kTPvyyncEccZAy5QxKKxOigNLvvmFba7Q5AEQVlNYJSLZ&#xa;Rh/oQMOXPE5B+gADMhUI7lgxOxKrjW5S0mZ49mYlzAeIVRE1S5YwQb7g/CQDPMlrJ0WEMoNg+D&#xa;GjGPNo88N1RSwTiijGd1mhFKULiD0kU9N4W4DNTsJ6EFPbXXRXGMwCIo0Mgi90WENPkQDs2qbM&#xa;hypcbySW3EotgCJAO5KEjBbD5zC525RiixEL1YN1rD9gFhj83QVpvN/uor2LkHiqcvxIemTcjT&#xa;fKrdagpaTY1KURvskICuaTJRz2O09obZQjI10RYU7BfpIjUsnOK6aC63upch+EQDrPDEuNbkuO&#xa;4NrJRBWel0JrMg/ILY7p/nxFwqGq/zHE8Jgg/DdyxhKZmxB8Xbz4iCv2cYPAkNMCqh8kw6jUkn&#xa;IeIy1yBFXHEJoZGKik6PIXPQOBSZ/0DiJdF0wt5uWebWkyzxzYPiHTxltD2IJOmjoRxWY7Tdsy&#xa;rYJBYgocVKrMNUo9HJprxbPBA4L3YOjE02LWk7vh2zaDS2+Eq7+QOPdXBDmMnssWiaUmK/lofH&#xa;Zfu0NYJGqYsAQhVgA+jAB2TTkAfnqTeKFbRtl0FjOWeaYDWq6ekrpWd2VqIpcjvDyHoFP3LA41&#xa;bvcPozMjOifsJmfWHN7SWlbfwWk8PgCGjdZ8pNYsuuadOvyolcWWqBaq824AF8jfT+QTuz2JoW&#xa;Rd6OcQ0p9uE1sPlp9IoAjf9CxTpttMpzZcvfFXU64e4bMx1O4chT42TjqsLtug+6evjapCtyi3&#xa;/whMNfe1seuiNYmMxd7L2Zw0MHPByten8djoHObFRExoyqljhNpFFJ5uVpI4AznFfburm6iZg5&#xa;Ks5+By1Yzxgzuz0yrvwFqBq5zTgjW3SzZ+z9J3GgaM+JkHmXH7w7+J7UkXvgZm+Ahm0RYSlCHL&#xa;urVx8zw0uymJjxXo5Lp8k/RZ0daabUaP/agKcbX9TpOtLG5TPwKxjarw8jnzzy1UAmCLi+k3z6&#xa;/eCpcQp991Aremck2K8uJOex7YuNIoqbvy2KTfTmcAGkvEcGEXnu1gNN0B1v1Rtax1gAH5lULX&#xa;eq+OZwBITg7ljH+zHVqj3+x66DL8nX/pJmXyyeKAPiOle7qVtzYfd/RPXM07+XOaAAALIw/x3/&#xa;/1/fM4z/xv6lGrIYyq8M0lZdFQaa3lJFmYIQUrSoFQ0l6mFh0t9qBeqNDNpJEMNB2471sqfvhu&#xa;rq5tvXU18xG8TL80MlnlI/ZbnbKVpE8SeALCcz1xNe31eO99fe3V+QOmw+JuvpqEfJ46ZBj4qW&#xa;SYdVGk2jZPMd6vXkisFFKAyhzzSjzVRSJZJBLCmTLmxQgZCi66hiaa+kWOxlyYlTx4oUray9cu&#xa;Stg5j9h/kMYeTBDU4tLh6GEJdYgCL8qTltoeE+UowV49MDzmHorf2UcXh64QLUVftI0xJjZUof&#xa;1X7TMDNsw+NgJLbtAptiyy7i2qPHIgN8IdcZBmou9aYIW3ghOWqv+TZj9xfZGG3icWBYWazCCy&#xa;xD88gYBzajJMn2gkkv3FH81sX6msfo+ncH5vBewa9yjX5grI16RRGASowWOiil1bgQ1ioFxAFN&#xa;WJq5DIkPhpA4Lt2quISrggh/wsWM1kpatw9qKHqP4bxVbCPzcejuHbJhuyW0OcwWlr4NFT+UIq&#xa;RgfOk4AKG6xk6mKBsYrhQUMlCGh7mkklc6WulnMawD8aY8aAlAUnLxMAOVQRyqNRF9imEYKiNY&#xa;l+J6seKXTaomWzTNV4U6kAHpZQJUYnd21lpf2bHvBYDbUSVBFzahPHEsIRBz/kFSazQSIZMt2g&#xa;p6Mmzjv50h1N4hcILcq47Xkk+LglRQMfRBIgxeA9ePW89DzDjDDKiYOGZr32VDx9Kl6q6x0h3a&#xa;9k8xWCYV9KCz9NTo0WzgRgUGgCyi1fsaT5VnQqqDjk0RAXjGYTSuUOTuMQKZz3OZBKGGLrKuNL&#xa;5V5uzBWRGnDhtK2oEVBhDdBwdVZzgZ3KnRjrkkiuhR4eXzWCynsVHPTvpx5coztG3wYNEhj+4K&#xa;bZ9IxWd5GgmDUoP0M+FfvVN1nJacWWCPXQJJuzLo9Y9OzKfaoRt6MzTF0lqtxsEMks/KtCpUBi&#xa;gYGWORumxRDmAqKUnXGEbcUZHKv9HW9FeRPMT68JcGFGRkgotdjE99FHUsUX0oMd2Shc7nFajK&#xa;aFPydLWwwASm5irBkVJPmjyEoFA1ZWkoOroDQX0vnDJRosVULD0U7rsF5li6Ua403xzu4LesyF&#xa;Wv5isZQL5JOa/qwPAXW8bq9Xvi/aFJtwHXMFjI2oOjbRUHRNpGa3d/HeZSqsQ89tt0mkVjOWJk&#xa;vj8ohE6BTAJbLh20GTw0mgIDZrs0MfPEQixN9vOe/C3fcPTK2vzp0EFsdSl7VB1wd+UFTMmVD0&#xa;gaKFiFQpSYRSW/mvCPdFvM7/svhiDcvpBZzNRwE/HoIuCrZwvwKJCoavMSFVGBQBHzxfm7EviF&#xa;UQcDV6zU/cO+Sm4KHK0JeljPhHsLa5medGkKm43AKjuF7oUf4DhdndlcmIcfew10xBbXMw84Bl&#xa;+FD42B1CNH63W7nJo2/0Y7k7lmN0GPZdP/KVLK2OiBRI/wRoFPDPcv6iHBlbuYd1bczZA927w1&#xa;FEOQ8CHzKV2416u3xZLbGk4EJD6KliuLLVlLclciSVheUJWDlYCHkyTmm/PFrCa4IvAUV/THl6&#xa;iMMycB0dgNK519lE7UNe/h9fdRZZR1FFRMTLDGkludLM/RJg4aPHs+fnlz3DxcZM8H9xVg5w30&#xa;L9diT5fZGoVy4AxkGlzfZE9PG4EWJCGcNlx6h1Kdp0xiS9z3dcVGt5WUGxxbVSe8+xFkoj+iKU&#xa;4TjfDLjNMAYB15puGcHX4u4xV1rizieiacT/qRtFWN+9hG3yKmCkc4W8Ejf0W2Pf2zZcCD0Bs4&#xa;qcTL9R31uP764WrYar+P14SYPWLll8j/63PG5F74+4c0VOLJ5sFf8LenlCAK3n55tS6aOUz93P&#xa;gisfyKRxuvJM3bBXz3h4SFbf4XNv0Tj0TlLjGqY8yCqfoN71+An1/d+BP2D+Bx/wvga4D/K+DZ&#xa;/m+AdzJxlne0szdxdPb4N+yZ/g17CzVsFQxfWzRS6VJqCYt+yeoMQYgmiuIVqCaoczRI+UxawW&#xa;V2adsB/bRwJmTNKk23a/h7rhZJpyuHd+PZezEP79upOMEER/IspteZ7tuHrtlO6Z/v21c+wKgD&#xa;wEFzz/TNF5fIR2Wf1MOYQmwSrpzWdqdlRqotx5VHzfWmSjS8xD4MQ5JJ5tUVJZNl8uKFnegg/M&#xa;Ewi2TFDI29Sctl2XdF1WX7J5WcjilY23I4uiWWAZhuGV85d0uYUDdAMoKBOjts/pDG8KuIjhLP&#xa;vJNU1bYTaeZcGBY8irj6WP9qBpwJ29grLDrHSGysXP2ziM2YizPNjqoN1xHyDJhx60lzj3ppVZ&#xa;dF8WUTCb2J0/EB64wvasYmmYuQmywz9l6yuVkBFufEfC7dA1lNmlSnjsFSaikSUlmSENvWkRMz&#xa;wX8JvpJWxJAAPNwExB7C4N5OWFc5fggvJkFXkT4f54bEp0lIXGPVJozROjotjWE5kZ0qrq0JDG&#xa;EmoXEYK1dJ12kw/G1yG3UaIUyIP1qbVlFmfilJNlIMA0i4TAhweIoJY1hQFCCMwu7ViK1s41ME&#xa;U/fNP+KuIk+FkhBkAOah4tJ0bNU1dHuTfiICOuogOAKhmHRt9rpYonFSQWCQFGElQ6P27h2/r2&#xa;/owOWsF1YXu98UpeQeSJCnFEQQkYj0xnlAeG6nIBXJOdFOwjuJu0yjE8JLaMil8Uw1jxitTpJl&#xa;FBbm+JRkxKX+tITSFe1mnDWKMug7D7yZBds6pWf1CrXQhi/eXpaHrFPwQstE/LIRh8QIM4GmXJ&#xa;s9S5IxB3fdPYg6hU91qDPlGXIpjzplpKitjRosJbQXozmOQQjeH2S+F9PW0uj12dqPr1aepeGc&#xa;89wVcNlGMECyPFak6noaFmA1Fi5MK389whK5mGSTBmmGNAt54kHUv5wJsZAKxOWY7URtaQCJN5&#xa;/l4RCIxGtb5h17vrkuCv/zVyMhX7Awtp+2SHyPMQJD0R4bDwIrpXxUCzXRykFkzHcAQZXHVLbn&#xa;rUo7eF62rsx8gxmQb8aeep4woIQekxM7hlj+WEpkMUNJrT2AkhoT7kzJ+Sh9L+s8QndvWMp0mV&#xa;y7iTrxBDI6rhB25ER6NLGt8j6CXB4yd37JYXK+ZRnJDseGVx409xAa8/XOBNiBS/E+OcrFW6aR&#xa;SEY5fN4aiY1NRUotdeKrw13eXWN7z2l5mcT2ncxxpkoTq7eocxUdluF6nPR5tEEjT3cc46myT2&#xa;TWBqf4KLhsZwPhAiosFmqOJBKs9BmwA9Fltxy4jNIkIXIfgKe3uBUbIgFtTk3o1p2cg/sBIzQ2&#xa;NvRzYPzL7uwWevdjmObo9iydGJ2fLmYPVWG7iStC7Vz2SrdQp28b8lSAsxjxvHNsLvos9I8jQ+&#xa;YX6nemONyqfUMIE7Z1IC1QzXtgjb/6tjeMXcdJb6kPdjVB1OIjNVLPOqJmsCh4+vSHKY/XH+3h&#xa;4JK3F5A8mmnic0iZ4WXjTAy7lUSe7hoEUvrzy+h3z8BxGWkxYD6ihKr9hREh7XE4PpFS9moDW4&#xa;JPCLUQtvscegpR6mmMXX746gF3Lo4cg9i9BGjhO1+dIugdvbIQkdeUB9Ht892XTg2wjkK8H/+v&#xa;KeQy6Hn+BwYo7B7yb6x7EblODQAkeIdLPOdFJ+TiXgmDE4oClrMibW38ZcZ+/BfKnGAI3uBjLQ&#xa;x8aMItchEPM6JPkEtolJXv0bcTulXHtJ/beawheFskki/yv4XZ5F/jdE1/0af/h15nMKOxYf5D&#xa;X27o/25cQPDf0/d/DQnUIdVxlnF/edTTDNKJ6zKtkAsZkICgjZGj0O/J/UEYcOJJ9khb2K/g6k&#xa;zXCRobw8Obn81tri2uTTYsr/NbmsEBZfqWCkM3NizptJpfGl56rnUyM352puxBw4ZuN+12frtf&#xa;e3d+ve3w/N5/wAGzKGaQ1HVXzYwZr1MMhEfyyww2x53tRP0RyDsUdwvFFD072BY2fIoRW1GPoK&#xa;ivm6WdZnnduvv9R10f27iilzXR9fAxtntstKy0Pk8+ako2UkKum2EzC4H8Sw6LrVHuVtlWmtla&#xa;WpZahkvmmq3tdpraq+uLBfR3ipY3QijUXappaDIvN7Q2QU7kqlpWVsVK82wsq20qY1lv1qRNvz&#xa;/6WCdx6Km5LIzDksfhYNJSbIhJa9GSja23ZUcuFT1JF9NuGEAHZEqWscMzIQvlZk0JcyyoC8mG&#xa;A4mnnY1xUksVOzrG8ttl+a8QyM/YrLfX0dQXmNfLpo2wi8b5+NJlN9ChqCkzbcse4PwPEnQHax&#xa;aVys0XWC1ppEqLKycn3Gaq1FltyD6jxbPeMA/ERiDYLNVDjn2P9lD8txoe4GClHCrweLNErcQR&#xa;FU7PppE5QycmzOY1B8/VSTyy8w0YUlAQNLMnywL5lyUsivOk+8hSQSXNOH+fSGANlFEKcJKxIu&#xa;TxTWqTG4JDDN06dPWfIQl7i6hyGJk0JtVr6WXqTMHqmTgENy6p+Vj3rP2dTkWZGh9OJY9nD+uv&#xa;e4iruwrOQToYeYX5vkVex5hOIMqAbbsmnDP1d3fM0r2eb1BgNSePJjBeSnxwPSmtxClLnP8/9t&#xa;4quK72zfKTRRYcMbPFzMzMzMzMzGCLjpiZLWZmsCzpiJmZGY/YQsv5/O+eSXqS6smk0lW5SNV7&#xa;ta93rd+71rP2s2+hz6kWFPD89D41i62Ru+r5Q2NnXGXW1EVIBBK4NJLoz9Ko0GxpZLQykDsiUo&#xa;xnW9FjsGfua+bY02eXdGbD3BEa2kKcuOjHBd7ZCK1bZYjqH7pp7ibzvlgqFWUlpMysWD3gCvjk&#xa;wm4zkZMeSn/mK0XwvUthbjiTCHa+Jtj140sqUid/lErIV1y7MrBvf/AoG2l59dSVx7zEnO0y3H&#xa;BW9s7RnlLD8rLxYTQ6GTk6TZ7HelGFGVfGfWyZ1TnUpo9EdCjIabXiADlMOOXjBlH0Veh9JcuR&#xa;ONBy+1bXghSlmjP72QGkNkvd8MXpF8pp+pzZeo639eNibkqqVyd697sMGaWiWp8N7ZrWxnZvZ6&#xa;0kTEznMatXh93q1b4eJOKEVWwvoqm8sDUl+8/JLS+8WO0x28J3G3W2alZHgh93cPUZL4s8WcXt&#xa;R4cLBO8dsM4CvZQKmYlT0YX5hPYKALAntf4F1qYIloViwfZRyfa9De6axiYfSa7bcyPCH+weTa&#xa;+InIp4B5WUV7Gh2HC/NqVbrx5x/Jc8fEi48bt3p+Cmzl8aMNeFK8Manvx3MJYLLYwF/inLN0Y9&#xa;Mwn6N0EZtx1V+EI0/uuMHZq7qY0Lq+YveLYs88DSheSHmbuzjfl+LT1lImPu4TX6ZzgYq9gxoI&#xa;EWV8ySxcZK8pngMVNoTKDVfkc6Rivj8cMmQpbDQnuvma0AXjw+uI8awZVAaKxMBEMJ2u4MIDet&#xa;o29cGDytVLXHFCA3/sFhaU01YcTODTXXdPJDT72hbSt0RvaswBoyj0SZl5s7S+Uejx1jKMNzov&#xa;JEyVP5rG0sm4ViAv++2VTMGumpizvrjaMCvHTUYNEmErqTtz2jL7auQEDXK1MxFExsQb+5McKg&#xa;fctS/1Nfwb6U3dC2TP1NIyArcqtsq3y/elEV3NUs7UsSpw9L3qFLgkpDu8FbXd/sxYZFih33mz&#xa;PAkOr6AB/BMK5X9lfgGHS4sOyp2edXrkKFgk7tIW94SaJTWqRs+VuozuonjGu8zgsRYYpFc7xu&#xa;zfdIp00xm6txJ0FzCo13CZBAxo01/nH37IzvoYJwXPk+DnQx0zP9dt5bnATbRv0+d1iO4LO3hO&#xa;yZFvPRe7BJCuKHLAgyY8P4mSJK3njtQTND4KtWBu5XS8pcHWXrt24kPDi6j2l0nsb+9sjor02W&#xa;CgyeOV1pp+MUTykTP8svB6c8stM5a2OjM05ro4jYk3bXVevSBsu3r7QV3ADyOhR2v1ZTukH76C&#xa;sJ6vnQhheWM2u84sisu7+nr7ZbDllhrhOFxBOeKkMyygXAi+tVo9r95Slyno6CWdMVIbXsBTj0&#xa;28QaqjQ/0hSoNfp7k5QRjHo1Gr8tQulGdOmEVw3MpMyUZPetWTZjnq7hZ4q3qx6LzaVKV/lTST&#xa;JYHmCFpCkyHOifHurS76ceIAD1va1bSJg59jV+6pAqLdywxbOGDZ5dfqJ2SSabvolBt+BslGFI&#xa;10sft6VGKpM/y6YZQYKxwLVSiheWwrVQr7Ph8CNCGWqaS1UgYFTiaZug7w1QzRHQjnCiPNrUzx&#xa;150g/AWVjOiVg3wPCgYJdlWixbMNI0O5jDx0tPd7d6uXyUnqrB4m6jUIcl8eK9fH1gX/jnpULP&#xa;Q01+HMVD/KF6P+y7zbNDgMNjHh+Q6WpAZWzxUGjcFhTPbUqK7dpjJISf57muzpd151NaJr/i1l&#xa;bQdM/jhN8ffXxjWgMgEZOV1+y4EErV8tSCXdbQji2i+8zZm6jMJCUmVFdXTSz2iOYQGS7rNk1j&#xa;5zbnO+vLJnl4FMfHWDSJEDbIN43jjrxoRj6dMaMlhqOiDotVH4CVT8yfhIgXElNCnBYcUwV6Il&#xa;PbcyEeFJ/utvvRAyVGmFIeqtIwhpauzCVUk09Bw8NEE7niE3LuUkddkTHy6GogJsqoGfx67iJZ&#xa;6gydEVtE6dxVIbkgmcZXpNW1Hh+jdxiVrEJvcYSxypUzK186u5mC1nWMFd7GK+aOKtlNr7E5/e&#xa;3O/bpznPx0dc4TN2PpuWq4X6BKLYVkHGWw6mWNlOicZ731Ba6O55t+Z+HEllPnhROhaIgSyouY&#xa;b8TcRc0iDWkpe0kk2gNJ39GgknYEZoSmiQl0FpQO1h3RQD5+mr6/YTtwUfXyvpC9xGs7Tq3umo&#xa;S8knb30g6lug9E90VLdK4RzYCfJjiDMpFeOAXgjZxq/kyjAcOLEGD+E/nkiUoS/6um0rb8KG+0&#xa;wHQ87zZuuyutY7vBh3KftHQuaZYYZZ0k1ovkDVzVLcX0gDrPyG3/kMpzoNfm55n4kVV2j3dPJn&#xa;NmaA6B/tHuaVmWOJVPv71hvPb8xBAatwEbiIlaI96xOn6llWQuBx38ZTDStw+7PDOqCu6Qhaua&#xa;NaPUfzjuMp3vMutNnX4yJrpTL97AbXPyhOXk0BGDIDv5QlAGs4Gu7kOkhLip6ITBAqD3Yji6jv&#xa;C8YByv4/ZDHNeinDkF7rRh4nDnBnZC8zWTsUR6jAeNetV+x6J1egSS/WfT8qlNpY2uSch8t5c9&#xa;hHkSj4+V7Pivn4WO9yJ8TE40JVuFpznwh/KEANNiXjjgX6PpyTLRcwZNqgFU3lpV/jdruuGB/R&#xa;F4nhZ1SPsazPdM5FnjjVHbAMIaZEDCvgpyGzCCFR2cal9sbq+IBeJRm9NN/QMR0LjZBzWXyXyj&#xa;wpGO86zGkU7yLMdRBk0cNbzYZz6HFlDc6YarrOFFxwRupwB7U4Cf/jmUUvJLLPl1+CAfLTMBat&#xa;YgBtYgOlYLIpLh+5p9ahP1FJxxgmHEwh7XoSDaxiDGxiD6xiBmrLdijcsZZKGLURYjwJE3ti3T&#xa;x06kcBia7A0KOmAPXvaWWQ2wd2ZTQyN8QxKURtozKor0nrETQiow00/yTPIzXNynf29ynw2g9b&#xa;n8R0PUWHUkzvLKLCcbwDsCyj6EjBsfuQYxWgAZByZ8oFCIRgM5o0ucgead0As6fFgUJfqFsMtw&#xa;0kMF03WVAPMT8tvW2hL4Uipj10QFmjcWdmjgNJOux9mnqsati4dARYXBVySsDSg9eEduJsmQiC&#xa;HEoIXc9XzHbIryc1r9h4NMjR/m0DsxejUJVf/yCCoumn0bMRola3I6Uozmnr/kUGqqgQ/mPVZj&#xa;CKlfWYYwAZw22yPGYJVY4+quAWLqv33/w2PZWuT3zyU+H/c/y8mZ/2/EKP8X8cmGFuqPGUS26A&#xa;GzCAoOSkX9zz2JPPoLmDJ6Llw4UIxUJSL62qMzUpVJFRQpsx479+KveVSMt7ZKGcpTvL9VBfOo&#xa;aZFXqSL6eOdTticDva3Ase/XX3/+gd/lALNSNNNvtp0wTLPHaQbzxztpXPrMHSupVmd7Te1bU7&#xa;IAdYbYph7jFDQ56bJq2slJR1kc9NJirdKfo/Wa2XvTNNkJA9Os61xD9atA8kgJLKC99HslPyeA&#xa;dL6onFgYqcwgLhPFXfui5xI5e3NAjP20zUWOxQU9DNsv1gZPoPjLFdrUHVt7R+GtKjC/46oivs&#xa;6yusrxJLZpLHG8PS45ozqsKkeqzFT+Q61RBk5dl886qdBcgdvjBB1UKpi0Ha7pll/IbbSnpFWr&#xa;hdgFGmGULw3Lk6XIWHe/p/+e9EPxVxZ1fGqoEGEqWh8psPAHpZuRKOA3m5iPaH+Qh2fyUwyA1F&#xa;qyHW/+RVA+qmlBk8Meud0NljKLzDyyjXi0oZ6m4Yf0uOkY5gMe7MaNo7oVsLfNNtUll0IDDZ0v&#xa;0YY+gZTCAkA25vKqq8tok957rODAY6ATm7HIiSArli1qpEnkaJmu/ZwnWO6t2g+fm8oaC9B8Of&#xa;sIs9XqtJPhUSzS067mFFK34snU2VTa4iYDW7sqDeP1DKPO0g6gDsmG+2O5ql5yV4SHByHUtZR3&#xa;FHclW56WSzgoa5nLe4ixa8Pj4JGJAfPdHaSxBblhnPcZ8TJYphuMbb5umJ61Pdp/7QlhYIopMV&#xa;CdjSMu7LQHRP3gKgojDL0Lq1oZxsFgdEjxv3aASRmd8CFQJ3YJrQrBi42K8w5zqXxxrrbnFV/8&#xa;kokat4G14uV11ceF76FRZpKeV/6jzgSZW6LjEB9voQr8rsISE0JzCGnLXaebW2a3wMBTsEqZuS&#xa;UVfMGNX8IM6bXYtauz2IUuVPJy9/4NXchOrTfjrDTgHv7DRDe9UKx470/s39xkXIZOZ+CNDIl+&#xa;8eBq8JBsG72NhD1Mk5m9PP+rVN3AKYUeRTay4mwCO6FyS9R3SgUguEwbXeZFba2lbEmz7jusPB&#xa;DqFZoo0I7Hsassw/elSpddTpthosRXjPxQB2O15cwH25ujlwqabk89m6+O0FG/9uZ47hhD8wZP&#xa;KMMVx5iD0kmatje5Mbje1suCVtOMIyc1x3dpfumIrgADB4G5niCgq61rkvFPnAGLffpw/Tn4F5&#xa;a4gv9AyYcOq/wiPW9oEEzHZWecuUYP6lktVGH+t+dMCMEmG5euHXHmIjC7J0SlGlU3LvLso75f&#xa;V/AX30+/PQmJ4UvnQSiuh4MyHcK5dB/A4I+bKWMD0q/SK5hEnwiHVXsoFhWrzX2yfg2eY+nBbK&#xa;bxCMg420q8Sh/aSD+IkxCxpr1iQenLlF7waI68KLbJEnzC+fiOiGrfN3LThfhHsJb/lHgAzpD5&#xa;yx4IecHQxwPNYTvi8UagK1pe8fYWupA6n/YOIz/6YqyNZf6c2j9IkDTWbPKJ/+INqbSNBQ3pPV&#xa;amKr4658lVsCAo1um2Lf4s/B3KQNl5z/DTv2ITku8JYMieFOR8C5RdKpzI3R9AWZSenypEMWCm&#xa;pbiuhR0il2rAg5TwM9TQmLQKTlHwongqV6D6K9Z+Tr57NQQF+OBY+LT0Apvuawro0FziYnass0&#xa;ekTrNIdE3/HpXsGTo9gUUG7l+xiT/7HzgCRMzlDJTbKWOmv7HJvGAkySaZ3LMqqjR16Q21sc0n&#xa;5uw//6ql4OlqQKPDQEBQ/IfcRNU79z98bvm/XEv5P2guhjZukBOcEq5UWH+cHpb9IGoYnJ69pC&#xa;MpWalEi0SLyYZH5maYTaasNVVF7Rb3ldVV75P6z+K2yEePF42Zs4TzM39rIO4XPzEeBfDmW+9M&#xa;tzD3n4+ntwKIrlt2ce2A6I1fsjH3OrZph/Ep7E1ePKUnit02t+DwIWL42EJe+6zjySEdI/amxg&#xa;5vskKgaYatpXlX1rG63lz8i5rWnIvbggDXKJKTLbJyBocdHhcT+/pRJetlxTg7PClQ05a97uge&#xa;8EYe1bwee+zrFXDHsJK3fcR/NdGOOVphDYfF0NzHGDHpLJMqzTvOvrkPnPbHwwe1FfPyCuavOP&#xa;iPjmYC5iSGRn2plHd5FyLTLGSN5Urh9nRygxUTrz+7S03zTrp00O1cH2i+0QLLXNL5yVDGckFv&#xa;DPLFNH5kV9Z0b8faktS+OYfmiNGp0Z46zOTfkAD81RMntDBTNklog+IIWsWF8S0kVnB86rw5pt&#xa;5mloJStHYyWZIR+uKwltkD5ioZ+pYVyvBQ2/ZInByDoa/N7pKf5Ff7G2QdULqSibe/eCul+hXW&#xa;iuHTcc0pSZzPAb2AnlgXFIWhhcDxwQYuNbRCDEM2L1KpNQwmWo7SR8imiMI3UVNKT3ptl1dmPg&#xa;OZh9JWyCPlASNYXz33h0rV/COcKqbTsJBAH4Xh4lXlQM/rnh2OewN2CsLvXPlzd5JBAqAGITZV&#xa;4hhmiX7CQVK8H9+PrU5Ov0otUot4YiQNxWCXhqGz4usuLhxJViz+WcIiiycns4eyYNA3GrNiJZ&#xa;f1DkhwlXYfSS4Mt1MFi5/JKLypecArY6hGqt6n5uBgzaurJ/ax4oFwTXUYj7sndaSHrKocjPrh&#xa;BcjHWapMkPCHDPIsIjXkudAjsVNhtAWr+DB1jx39Hy9Ld3VjJ3ji4FE6DqtCTlgokPNx3GWhvY&#xa;3oAaq7i2A0USUk00BWdkcm91CFoWSr4c4RawQOhWgXz/FHUcFrt5IQTCPMSQo/phr9XKcUyYCM&#xa;c+wpnzIA75nOIBuT4HJyd6ASnHUlxYJe/3UUYbv4aMSXBQmtEItVnE7lILA0TZ1R/eljtuTVwQ&#xa;tZvxpLeG5kaNNCs5sNPLs87Bq9+VAHDLtxoisx5ljZZwuDAXo2JtKyPgnR51/4rjqlSp5oO6hN&#xa;zmpKnMzS3dpBYz1x3uejtd5nsIvhb6Zdt+RYZDrYVKBsSn30OlQiSwV7iZxjBKFBSzySXXIg4x&#xa;O0tIL2A9wMIWeMlF9fk0LRiDKuXsa3uMx4alfRE5i53+hClOie/lttrQzGclu9xf9qrNTtxVBG&#xa;6WtE11sYDK1IgF3l0jqWFcanaKfGbVN8g9QEaHokpnfJh85knV743eYZ9PiEs90TPgNc1dGpkH&#xa;ZSs8pECdlOy9MuBNvn5IYQQ+ajTcxFNodFihlWQ3vrv8NXvSkdSCLpKbtN6cjPOJ85xjLNaj5s&#xa;sSXEfQ6Zizdsb6i8F3GUd+R4JOBqX8zvZQJrB0jP0GRBcJkhtkXHZGjVrkpZmz3C1UKC5XDrCw&#xa;3XOCkULE4NbaRGB2XKu36UqyM9STiT44s8aDvkg8Abq+qh8b4CQgnUVms1HawGMbXgq22tplUg&#xa;dWCM46k7Y5DyhWYLRslbSpT/QjuvCP+AVbN1888Isu64YlGfmxpAbyX0jkaI890eHuzckTgCFN&#xa;kgbIjCc3xGMW1d2X4hJ+wtJjBgSrCEmsNb6sTFAOk9RMWDeGyNAFfeY3MIv5E/gf0gKgf3IhOE&#xa;CKl2I4RWgNIQ3wvjQ5RFbMWd1At+JYBkjuIYeIM+SfJUrtwe5Pk402qnSI2v6DIUzIitMvXMzv&#xa;9dlWSASoVwE97eWSuhtZTx8U1QoRf7eve9Az9ye2CiuZfnt9HD0NPrahKBzJ9QKr/pvaWfsqbP&#xa;TIu+PUIBnzOGZR8Z73Lmf+VHoA68dVySt6CFjCbIlQnlK272L7mOgzLab/4ig/G3ofvX89+7bc&#xa;AwEsmSimKHPxL0a/WAwI/Pf5kRRMO7P/8PM04A/1nW/r9yRf/3Okup1ps3hiTmB5Vst6Xuq8w4&#xa;+V2DTYlvSxi2hMMnRxBoHrOFthaG1SllDGp+q6ubVkMjAFHoA+IPRPxPrVn0o+dn2elb532d60&#xa;sm0kJbZT+B8rysvE73a+/rgHvFj5endmEIwuEnQJJEcM5xar9vD5+c6wSdnS97Kldn2nSqR7PD&#xa;jSh8LGkit0egK62RWmuAwF6NzA3bw5mUUP5cc8/39KkOe8tUzmqemQPrzmGkpf2183hsoKH9Pp&#xa;FHG+vlNkRqGBcs8ydzHhwlI00czc+T4Z3VAuZI3OwYuvylIsNawHTJVo1jAH9Kq6/SHSF3R/oe&#xa;CMAmSWyY7TXJJ15WqjekUFSSfZyZvoBXNAYM3+1ED6c91+uxk58u8cgWUKDAXaUELh9I1trkWX&#xa;SsGhjFkdaxE2VZnSIcdaapyJdqzO2TAwvVKj+DkibiSLutM0j9Uy4PlLnUar1MygEoXqwPXDCc&#xa;bLXfCWbGbkzbQxxtdsS6n+hOXaRm2J9rxOYsIilzysjT6gVrMxidYm09EFLJQ7862gBrbfc2Xk&#xa;rIrD2T4ECNx4ncdx0/TKMow6IyfUUnwS7i0ZJoKWiiJKBTKaz2dGwbo4l0mrNn2nz1CUr76OMy&#xa;gCa7exdrPQKZLM/o98kzv6jqdUlHpZ+iffiHmJ0lu6iwFoOsoywNqrsawzRMqN2MTAxSTeeQmt&#xa;oDaGaCQ5OYVL75Ozavk7Rg1R6yA0tC8nNBQxLPL/K4RYgmO+2IvECiPflWTve4Cpu/A1WWU70G&#xa;+4efMu3gNR10KTxkx/RhdKWkfMFHTk2Wh4tzgyjkOwCamsNNslxI4Vf1eMpc8vmoM4m1L1aoJF&#xa;Qgz/a7GsGPnyFpg4NasQcC4gRJ05oljhwKSzQaIgYvqYxqGJtqjremcOjC9p80M4BE1nW63+OH&#xa;44NDaA1SkyDOxrgKtTmdzONO25W+wDibayWG2sxHMZFCXbOE5WApw1+jvxWIeJY8Sfggrcvc29&#xa;XsClawzWe6E2oX0o2SUWJX5F4VKvwIANfCyzod0ApaLwnh8IvhhS5MaJd3nX3qf5rg1FdPF83I&#xa;82hC+iwjhO9oxoNvRJ33mGlzTYBNYeXZPhxFJaqtMqhZeHi9IN7gu4I+ab3YV+kHmhxEVEk3NV&#xa;UVJYZx3S2h7OamKQhDsdiUKAhBP4YZT1hW5dl4YjR9gxfcq/pWtsueuy42J0SdvfyDwKMVI7XU&#xa;h8FDzl6PM3p/XjkK6HBWZ1GnWIEI9pZuqri9P3rhdepgH8+UEra6lOAt3XHVw8inlSZTEJ1J1i&#xa;p7aEras46mjP8kdkUOYyspXy4tEADxSOTFjLit/vVzEPSlMx1i3hJ20/Wwl93PonpfnzmpQGeY&#xa;/sJ0m5rrT78eUFph9YvPjBuYV/kwHpBkRWUDHqFLswoc+l+z18ltCn9B/DqAKTTj8EMj1cMozr&#xa;A5bJSGTF4hhleBPP/00FV4vb5rGydWkPARG0h/Wl4X0YWA/Aei8lr62QyrR6/ffuI5heFHh+IV&#xa;S0/1KlQBdEJY2G9v/NhXTb2aAs+Iao0vcCnNHeKhWpC7xStqJXPmIETNBbg9T+44VKlLDtztCr&#xa;H8wkBINxER8FMCklp/0BAMCWEAMUEBZBsd3TV0AH5J9b+fQ8XBzS/UlThL9uVfZNuZ7N/pWz+w&#xa;NjL2X6197A2NBXPul85AFGp19arr5AGPUtosB0+bkvotIRMTTy6UeP5hyKz6olZcviTaZvSjjB&#xa;sqThux9y3CUiJi2TIy0buviCqaEgy05yT3xvLwdvDp85YeSL82wj61vbXuNLIozcVGNFj9zj+F&#xa;MjD2mjprL7LPd/kdfm165uyh2h2C8qcI6SBht3734Daig1deX/hHAiXdEI4nRDdJsWHR2+UQNw&#xa;dpt+VbMvKpfj8dm+pNniHXmfBfuRfv4rxJ/kfud/6D3DtFKf0Hi8DzH+Xe2cnJ0tzD2U3L1tKb&#xa;wtjTxcLUw/K/P3T/P+1kefnbXv8w+msTBkVV7bbWv5NKkNssIahRQpZCtwBLbf6xCT0iDplRKV&#xa;Fy9jjdG8t1y8vgi+sKRjFBw6D/Xl+3gCf+5m613eOdcb3tfe19/6905ju8MDvHyLCP0I6zK3Fc&#xa;FrDfc6MFlv09gEV3tJQjB4f7XlbQ/hgR2zm5D9dOinFBgBttym7YhuM4X4bGPDJz2UaDWz1Agf&#xa;6wOD9Vk+VykifByzVU34JTc5HGWod75tZJO9wUhD5KAY1bhVNkvooWXTA3bctUdEBubfOz1PQ2&#xa;HRIvDaBGOsPPGJT+PngCdEsu7xxCymtPTDHZXr6MJZ6wewloT+LCG7hN3rv1SHewViDXS6UMpM&#xa;2iQPzBCusVbappPzy66ghwpPyWvkobV2WaaOrokrrBypijaOEQtNjEMa7lXrHnYetgdO6ZPJMS&#xa;4KGVxNZI3MoWsNrX4K6biQ+LtfhdCUiCQqMTV4UwH5TY75xgeQr7a0jbSCG1rKpEt6FzyVGljV&#xa;YC1rPRGjhe4rIfpMamXhZZHDuOuy+K1WkvOffXNEg5eLu+hVked1gq08AVNqHzz4mwRp3DfU/S&#xa;Eove271T06ja9zJtb8C3tPlJIuNPJv0mRZdDemQuUIvV5CV89aifnaScs9xBJacghhHKZpatW4&#xa;cHNRzpG2waWLkuXGrC/GvMZpicTFIInV5XHR2ZLVVVVpUeKLcvHIaNl1CU5iR6SKbVIJM0qAw8&#xa;1rTNaDbqKsrIqOESoEr2lDChEuJtIiOR14mFjxnBHW8VGhcMVZhDnkQXibMpD1s4+7G5nItsVV&#xa;GsMelpIIA+2DAbFUaNC1lEb3iU7evrsYQ5+Ld6HwhQfKIPDXOydPN6C5sKH5xLTS8GJ7qEmLaa&#xa;JPLiEsirGdkuIiiRkR7IPtDrhNrNdUpQFh7NZ4WVV5xbkXuM3bjYqCYiTZxIw5S76A2z5Hsh4R&#xa;TS+WBv7X+h7cqneehJvyjrq5QRD/moCnkNAG8IfIbtjKaabAlMYMU6lYlyOduGqvVbNjWFwZeC&#xa;fopjXYT1jEH0yrbnlFXUIuATHHEbaKtgJoKsW1QELbNJ9UYoQ4tsfrHnyotHjTuCYjndOOqOX6&#xa;RB+SL9uBsUs0/vZgKBzWlAuwN4E5encKPlc3/Qk5h4PkkrR9Qb8IWxvumB05mMTstJv9kPId3b&#xa;9h6DjiK9TY6N8ckyXQiskxqoZmMq1AyOC+n79YqucKwToD7aS+m3OjWXnzbT7e3SGWLyQ/5eHO&#xa;cmFPBYiI7GgJAiNRTCCE8y+41aDbww3BmS4CI5HPGcaToh2C+0gEZJdc2BKFUFalI4P1DGa2Nk&#xa;WbZerxuEyTsxiP8zSVlplF2+TmM8Okn8byWcFZdA0f1jwyFttrp9+2xz1oi3xQ7ZTrzFmliu5K&#xa;Pf+6J7Q+yw1/SxCS4TG0kYVv3zvtbDvGCWwT6qnMVSc6tovrac8VW32XuBtrmjF1Hb8J/r1EG4&#xa;EEtN3/H8jIf1Kqa5H0mxKhTcOHWk/zEY9t+Gn+j8VhTND0i/drC6EeR4EdHV06NQfwUdd90VEp&#xa;h1HfD7AcdgGtD0GzRjA/UcQV58GNURNkfuWgO+eFdCsXIzQ5LzGHmuYQYPUosm7hK1zk65oquf&#xa;OdlCBS0zhz8uKuIqPmeD4vaMG30RIqxdFhMKI9eV9NlPaUAUOZjii6JqF8929GS24uWhh/56iN&#xa;dBCD70MGsKPrhds/ukUbP6NlpoyR0no60XUhU8czR1W3bCxNLt5Z0ZD2HH0zeY8dW9xqhwyuYm&#xa;d1TA/TjvRqlLpYOsvWdGAKfSHq+pmotAUq61ieCP8FsEty2QE2kgSJS4z0a1BB9c8BUf7yS1Ll&#xa;YGxF/r3SSHg6UVeu5DVrNcTSWIUmF9tlZ3jNFMtziRP+5VTjXa7gdGMTglHWTe7B8yXcLpjdOm&#xa;EnR9RTqPur4XCHMi+42yPO+OUP9bEUHQu1DpIC6fv4NDocoZw09u278uHGJ7BGtmALnpS1NJcr&#xa;Uy1YG3i2dm0+2RY8B9hnln7kc970/cry5gtYEEMiMNlemvd3ILJ1R7X/+ixnLBWgcGFgKCAuk/&#xa;Qw3//xw1Ss4W/ztu/geXkaf932ij8G+0adVTFRch7zjQkmxJhdBiwHbIQR5DjEVid2UTvTKqdm&#xa;x9s6qubc1pveCtYBxevyr3U/pTkb/9ZCWSvtsPBOVkvIFft47+GowVYQiOXWrg4xSUQI7grgux&#xa;YxtjDLXBxhnXy1y2D1MKh8G2KfXLqqhAUlszbwQ3nQkg7Xe8IwpRQhlStfD6ZR4NjVlFe96HTQ&#xa;j051gDrnN3Xt4Jzs++HsztHeLRKeboQwB36lWjqyiWyYJhXhhSNuM+USDW3qqp+ehN7vklv8Ih&#xa;Y6u6LL5GKismgVguYGh4pKmgvANUC70zoKKa4om0osBRHufQtiS3BkjS6X/2oVPMVtyIjr9N7k&#xa;FPSAH+soJdnlBpWmpR8OYH/YJ0wv6O+auqLcdUSVHYOyfOo2vC40VphBWubtjlqnCg92WVOlJY&#xa;/n1OVXTAlLhKA5qlwPQoNqDqalklyg5LdLPYFHtcXvbVCPid38QKj2v4Q1sUTe3Ilf/ErXyJrI&#xa;9WDjawyhXY1NFwEEgpkNIGF276mDew7bl5tF+zRPablryfm7aicDGReOSyvAUz3N6fs6ZPDmsC&#xa;bZnlc1ck3YBKHkezlHE2dfdoZckexUan/ei7XcXTszaWKrMowyJGNRghCAYJOveLvU5MExuHGR&#xa;HIQXR1YiswPm8v3t8ABHvtUMyCjorIudYT0lr4jYWuaP57PgJOzZvjap0ZvRcLx+bYSl2YudWm&#xa;6qEXVRzAtNyEOjS94TM7EKQffxj7EFsNvHEcdsLqnhUb8n8LyHAs7zSlXZWHx2Ob593OMqtAeI&#xa;r33rYmu9a/TYz+PEclAhddqsNAaaaKC0k1RFR0aqlvrwNkU90w5GCQ6PYYUyKe+GKZ8QUf5WA1&#xa;yeZ9jJWG55T2KZyeevciyvZUtD5a2jXSNN3m0XX4HEGpbOCYUyCeGlrHFalZlTR6zgRuxgNMI6&#xa;OSL2X4WLbcdoPpbG8tNMrhUqJBMXdNS7wCS9U11G86l8NxEY+fpSV/GJwdfazhq2i2n6jHMY3E&#xa;hnXVpA6+mivrD2EcmEJd1sew5WXiLGGlQZel0VqiIFQytxg4jeGOTOblUHLPuMjU+pmb+okdb0&#xa;AVqKb6yWta9gZ1NAFdFZROMMC+SBeeyuYApxw66/Gb4agt0gygSPNlhgCG2W7UVEbCLaTscata&#xa;y8VNDeQbxYDbibtQX8ETro2Hvf3JHaZcM7cfGWlmz3dvg4DDAGGpavE5fTdQfzOXWMoe/DHsi3&#xa;Odlqx/rY6MPhCIPzQBgiHLRKeKG5algCGZW5VZU4pglfkdhGytGRB7D4hxZvdaTfbkVr5qdNdq&#xa;GnJ1wLcoYGPIKqkBeQnGm8Pnoz3W77LDamr5c9k/3I+xL3lrgE6exYYkA3jhO+Arn/WGYAyKXH&#xa;cYdngeMhVXPQjiaesyoMwKb8zKhvjdQgM3b2mrtBv9FXw3zaLekj3U3pBWZe2GtLpkiM4EZ8zg&#xa;KZnhQrD6o791ZAcjaE6i+OVjZ2S/KyFJwehJBaRlyl9Yvv6C2zKmfKiZNhdVZ1HT/kqEqM2JpY&#xa;0jvf/TRNXztp9+3w/U3iI1Ct0AEeNa0PFk0w4tf6ZwCS43FAGH3ZIVMaUAw6J2ZJQ8hmXZ5vKl&#xa;r3hPtVW9ifWIq2eKD9m4Vi7mhv0CFc23kGpQdmG5YFTqnanU1M0PrRnw+6GSqTIEfh2iEfTGIj&#xa;368Td6KKSeU8z32pauNnRIW3Jozu9gmM/l9oHYsq9t6uV47Odk/wDeGrcSSvLzxapyyaJeuATy&#xa;iMWyJcTvPREAUpTkFNQUnLRjUi4mVbnnY5rQtLRbvZt6xk6WFtAJZ8HycJJ3Pm7PdK9mnu0s+i&#xa;r3uKdRhuLGW3D56HRDpaLqC9osCflivrR4TuYrLofRsVzQ1rGlkNvUmRH0ypUaNjov5RsWXGfc&#xa;4hIJ5yNdZK/4v231uCcCUz4Yaq/cdkjP8tx+JpwWV9m0PVelj+NTFjzgBI3IO2KOTXC7VkmjSN&#xa;QdtJoW5G3LBf7y7D260SR8IXC3Ieq/+JokssF46tuz5oVh7SfzQBQdnXwbXE4ahuK6vNIQwgH3&#xa;4MH2OOZyScX0gCpnbDjC/VVuaujBW7V3IJD5QqwfBfJzqppUUCre7Z1iwR+Iv4S60f3kyPsPof&#xa;j+Swj172OTPC1bb4y/TX/0TC8+kewmODhspMSScBWvtRYkmA3gtxIN/UWerM2S0DOF3CzMc6a6&#xa;yP3ePm8UY0SfL+OuLxQnz8UCvd5W+PNcV7Rc5e7UT1v53jPCfz5+ff5GbGC9moF/0ibo4Jqv8I&#xa;8X4hxpkfIIYs2u1kKoArFbBa/A89Y6rGvGXCf14fLJpdsqKVFOVKnKlQlEh30Rb7dNS8aHj6/W&#xa;5D9z19UEzVH73FFwd0hGI3pGWQKqrde2z6JYavQhcsOw2Xagv4DadF5D+Cr9viudMM8+7j2/08&#xa;OwreMOqG6oEhnKp2luELNEU4mTbWEKMqfLKnHHWeQ9sYSmTiQB1WlhuYYb3iOdTqdZgVeKIhzB&#xa;nAOzxIyu1KXpE7pbez/SS5NXus1v76dEn0kXI3eoPg5jv3QuBC+xQeoUfydCwyOtMYfjPeiacv&#xa;ny+6ebArh2MkszQh8KVnJslkfcohcH4MhrOvImJ0qTCYkN6i+FKcwazovx3eE+chElYIHTU116&#xa;FoXPS0UIMTmjlBNnwSZRv6HIT26EUYWpRnUqnXUw1zGedeQ0Pg5neFFXqR2gBVc4CWENCnzwiO&#xa;+YLedVImwRhDcpfUu4L9Jj5Ad5cDtUAg05auE1MaPCmGApnbMt6/BPYnt8o0wVm8cpvvM3qEtx&#xa;J2sAUM4C8yvCiO8c1Bi1X87IQOurOuY9AVTjH8SXaY0EbxXImq8z6mDJJOjKif6Gg6Ro2ZDRyg&#xa;4lTcYYgtSF5kYP8/oCjx0chTN0ghua+NY9uPxCJWzFRE+CxnxUOS0GoQm7PImbAfdH2e/EDmg/&#xa;DuG9B/Ed/cwQXl3Fhl1zLU51GSh0p+bppxXyHrEXETSzwz4BsYr6CVi8OPO4plTpccX0hr8o0e&#xa;oEpxVRKLMPpvM5UggoU3IeFHJXxw8f8+IZvz6rJQ41xDbznNA62QBxZqnhmKOPy+C9VWsBiQdO&#xa;9nOzenhLVso1ikgsoxps9th5zT2jlX4crLlGAxMDW9o0ktItTfwUWLF7PZk6GvX2xdlDtshT2a&#xa;GdxKrXJwQc1kQx2fHDVohcC+M2VIMNwm0i0Nh03trghlNMruo6AXt0Dxh8BMgze45sEsPWsChe&#xa;xH55DfWZwQcuS9wKFgcDijJ0myUYWmvMCJ0FsJtKmqm5migaZXBQIfzheoD4Te9Yg8JjUcfFHM&#xa;7shk952ref8gQiGMhSeG3D2c88zKiA6mMD2edvZcRIC7F8/VgBYRNsQoMjgBwSNiuFjDSqG/hm&#xa;O8xXxokS7N+phe7xTbFnPoQZHEa3VvfWgCb967ba9OdN1FcRrIB4ZguDoVbe4Jy0mnoLg/4VDi&#xa;d1TLpGEsXoqUi7M7MpQMznzoxlpPxKpcPOo51R3WY72/cwcPIbUqObLDXnbofudyvC74YOnaed&#xa;cUpyRpFlz27QoKZMQpHnaB07j/Gi1goPy6KF7fKT9ocrmhCKTy1LDVwpp+e9ESNOnTG7/H5eZK&#xa;cINSOwjUSnjuTE1Nk+GxLOn/x2YqkDNFdOMavmxTSR9OvJ3Qg2nEUqSV2hJpzN1LWRup1EwGUH&#xa;fCWzimEhnJcFvVFIiCqrHGeIHCZ4NeZ4g59IJr4gd+n0ertGQQzajg1F/fIg0hfeQnAggtyIHy&#xa;3cOjyv9+GCnpEo7r7yxPh78qNc4H6c3muCSdU/8bVTg/c7ZXatWyjsRhV2hrM8VqBq0Ns5Y2PL&#xa;rncVVgxjEdj3R2Di2Iz78fnC77QGOAbBX7wnWtdDtC8YTH2+FuLfMaU1yWAMl3uhGhWKyEkgS/&#xa;p4AYOzV61X97GhdKNj/8QjiofVB5AM21AkdkSslAd6vXKeNl8/Pg45kT9xr5/54uD8IQsu/By5&#xa;yMLpQfKLJqpXUgfj566gsjji9oilMYhr/osZOql6gUL59cE4zcvHkWDAfXm1L15g3TzeIIqTGe&#xa;U7TY84Peb74YpVn/vLvxIyywLQSA0MBITvf5qQ/T+FAsf/l2xLvXofLt0b0QYxH7EigdbXljV+&#xa;VZVBFWf+33PQ8Mi4nQ6LJ25u6fbId6dGTq4RmNQjFNF4x0oNP9YxTDOF49wRxCx6v4UC6AcaQc&#xa;OJe7xLa96Zo/p25ckcFTTmNFxhPHjRcQmWwsquEfrwveGFRVQX+HVZNkoEaw7VaU14ZI0ht7ca&#xa;2Rw5bVhEB5S+lMTUSFdTgJqMQotq2yywF/AKZpNBhPZS05EblJsdBOYiOPPIOLvLizdHNYjbWx&#xa;cPD7xvVEb9mv5cXBwSBhLQqIQzEQKN471obNQWoi/RhXRIgxhSM5IffgBEvfsm2Rxif9eHkJWM&#xa;H3hNHylVS35TTwW8ahwALF3/0sOHyhENAXTOH/7jomNiSLda8lVdKsRZTUW8klQwfk3ZlhZh5Z&#xa;fdP5JJl05eY4rsgaYZVshnaxXXy6HslaQuC5Jtc19JfFlSub6tpysyCtGpoNbawnpHwIfjEV1u&#xa;wLa0tBnkA66FNGR0vxHyg4ieOoBI22tSphRfsO2afGHsxT+ZakiUigpiMek8bTQYDmldmth0pN&#xa;Qbwo9MdhSPXing4w0o9SvBMpqiWAEi2gnH8M7wtJH2NmK36LwKw6Offr0wbSi5g9QaMtDZLErc&#xa;e9iHVLDARNc9MxLb7fukWChFit9QMeUbdeQGi1igFaL5JeYm2pYbAJZFbd02OpFeZ8l5Aumi40&#xa;yiHMTDjeRzzynmKi6z6mBEbaW+FYyF2VAjrIR9VBDD3PlB7BJWrkL4lL0PoTJcwz6+VbEYZnE/&#xa;av7Zpmrid4G4rnPFWsc92u3l6YBE212ZSpmiHXWBOiQFj5hQUBG37TIRJ1tt+igUJ9ZU5V324C&#xa;Bpq00ugQXdumX55kaxYiiMflgOaU071bybgZ2MuQpFskpNlSxP7vBo2ByOMyqlu03uMdMKa20Q&#xa;Ly2UFVtYMaC0CPIyN2WXNJGEsgjIyB1mXaGJQGu5ipoPW3j2qjvuiDaEm60iks+NYLSYCEqMPI&#xa;RWvOjWrt09LAHeo+uyuLGWGau6ItSzMfRAHSMoVfOEEuHng+4H2rltOjCrNCtvGfvf2jp4BWOX&#xa;N3/H3TNt01O2b5cTUoS9cURnRCBKsFAq4MelyCAIFTUmNeUhmye+/iacrnrGPcHD3rG6bKC8cM&#xa;pfNz+psYg5WOUYFbLUYZPVjbjyIxxBFyA/N+63BlTV/HJYPj1Jsa66rgDO3IZHxzy7obtgqN22&#xa;RiN2SBz06va6nrLmNJxxEaobMH8eFNsbUojxPoR96zhQ16g3e8q86xhCf6I8K/lF0JCyGF3rkc&#xa;Q3758/hC73r+URWJ9cOaGwqjJJHgQYmThf8vBjEVpin+lYM5YnHq7Qun7KnermjYSUmZTUffBh&#xa;19nR1THFD37tLzrfD9UefAQ628Ylwpt8wj4Qcr2ec4JPn89a3VLu/rYJfyApYUiFBI/xMyn3ND&#xa;bFokgwYd19tr4ILNAioFUgPWbpULdSHPf4mj3cRaBD0ofkgPDdaEehpGx4dEaHI+QzhSKT7+UY&#xa;OVcAHsH5o5fZWSbNkmxJ4IJco6lrwrhNVclP6uEi3uAIS46dOaM0F6n/37b8z2wLdUAa5n+dbe&#xa;H8b7bl3wmFTogrlf6FplWvRjUFAtb7YtkMQh5+FX+IzHHB9A59GIjHxy5a2+rl7Pgn/iN+HZKx&#xa;fEL5MfdDVfDH9RSqLiwKB691+hP4N9h7hfvP+9sGCUT8njRQfc0W3LVCNM2uu9HUsbc23TF2TY&#xa;GwtFYEvmXtHrUngCk269aMKFDrw10fj3ec2ZrQ8KjOHXvlRygCCLapT+OW8NRqbyl8OdJgnMnd&#xa;y6Lf3Ef+hGOP7wnoXl4VOq9mudwOyw3xYyMRS9xzYfPWL1gIVNMud1q4e1kcpkSiw8c79yhUAr&#xa;pVB3YOy2/upffPsLdQGCg/KZDrzxl6r9KtAc4MKr72aJBaLLSxcerOayPAiOFOsTXoA/iZMtPP&#xa;DM06MMXYLShzNe1yCzlVj4206jXuykbeiKTLXYiUy6hAnTCN3DLblC+T0WRDhUREdGSrUy4W8r&#xa;lqB/jrs5VkwAyOSwl1KNufk6j3ZYoZewrgr1iYklWVJtqCYIA+pstdMmnvHI+4uejqrTFtvqR+&#xa;B3qpHay4/z/SRGgWqdZSMZlcWOoCLYsVkWR2uqX1gOmRsmOWtXe5HIJj1YsjTTAXChAfpEh+lN&#xa;BMLwWG2mB28ooOMc3nZaTxyG00DeDyjRUsCa20SezVtZfsxqIQ07TXwgPry/Y4c9VdsaFdLiUb&#xa;RwnieS8Me09cSeeMF61pPRGY2C4xsXqjzb1txIHNyzd82yqu8L/xs+fI6GLwqTuXvNRZRr/X+p&#xa;xyXwwdwlKr618bI2nflEWTAt76OKvwpVz0HA4lZNViduasIxiTem3UWqzVB3Q2ct605r6oZ/UY&#xa;3uV7twDbb+NdnvBLT0NUk9TFQLh10e87JqcyuMjlYN2F23DzlqRcg/DcJ8IFuolPc5c3eP5g3+&#xa;ol8xD8LwDgnodbSqaD1ovadY8Nf1vZfMAbgtCsC8Y1AphkXmddqCWk0vN+VNmwot6MGEsT93tW&#xa;4xOMqpaKFmtcKlC2h7pjqywJTSsPvZHMwnoQbW+kwvmteGnYAWruNfM4lfSUGheZUlxgdZfK0n&#xa;krOYQuj5JyA2/B2oZlM7jcDNkb75cwDmFz6SkEM9KaZjXPKQ9X6yE1wPCib9hhJqPD/kZX9RZB&#xa;yFLFMrC7zuj4gtpSRANk7VOx/0nIGKeDs/JZbSgwQDKUlT5h2We6bDX2Ir5SWfPZ05X0ya1saK&#xa;SKXX0TXmuxx9ATIGQxfiUqTwgIk0XidsSpfAFWxhKN5XefFh0O2exei9RQkk1/+S6JhREKTpiN&#xa;7ggoTy+CdKTo5LosuuB+8IJSnYfky2g4MWDY2mqO/PHj5JzvYj7cuKG+GXxs7pscIL/CkQXxy0&#xa;TYCG0EUdBzD+Iqqlz7jJasIOyWppY4FRgWRfgjZnpVnErKfz/q4Kyg0fnTGdh4DmdIIKf8R2TL&#xa;LCkrnx0232mKgs5zfL73rCBQqItYmk0EXNg9a0N2aPDt/OAllnNMCfEGuhxriuMMXlHRrgkmd7&#xa;Oi/NWPkTV34EzkWuK7N8WPb4i3o8oVysx7d+8YgMOugkLdGqa92qhNdYAHs4mGSHSjojs9hE15&#xa;N4TzFxD5Je1dQmn5Y4cRhm3wnxhGUwOw2rmND3S3I1vXt+R46v32O3rIxf7gvk+68Ba0Hx/XNL&#xa;GowoF4wxICyUYStkKo5Qm5Iu8W3zICQt53bEovICd/ypge4u3LP9tY4C1glNihaSM0HpAvgsJx&#xa;vhBSQaOl8GR1cRfoD/+Gv/sdIxnwu1yirvgPVJf07Y/JlhDpAX4Oldyvia6/mmV+/psy568skL&#xa;D+4x2iEP8rlJnrfwiU1P4GSrjfv8GFwMosiNnotn4TsyHlQJJrWC8aPjukIlKwHpgsYQAThBDs&#xa;b3cF3t20fiuX4GUqOCT8mjryNK0gPw+LvJo/TfHUO3HvNLPx9eP3FQqE4XOUqbVbKv80fM69xD&#xa;ybYl13uqDNDfucQWnuikF+413AL7LyDIZys3tDdFxQU5Gj7sEJOuUUA1XyR1wYi3i5JQ4GH228&#xa;HRY1mswa1gLnsM8+C3enIvC+GR8RN33lZfsfda7pQeSBnzrs/SQCVGx8oHU0uBclIuCVHBG8uk&#xa;/AHLWxjJQg0nZHEtSdJ6S2xGYA+nSR+hnRJOWbZkXprhHD0maQI0LJwnJNNrjUm+KDg4BTSCIc&#xa;3zhHGzj0Dp3U6NOagBMoq21Sqt4j68pcsGglKtS+EYcY7NGY02wMGWgDCDDyheM2A3JAKu9FF1&#xa;yv8j/acbQ9Q7zV+278lmrpCnnsFffFJjZT8MIf2nJi2+gNuG3b9GGhJwZMYDWqNWYbvh3yPTQg&#xa;dpM5gSSfJdzIegSWQ18x2/IB63jrV2lrgt/NigjpX+bFVEdwtU6QpAlobwPSvx9z8gv3GU7Rp4&#xa;V0MO+glZV9BqV/Hq8Nq02Vda0xIdDTTxLBWbpSIpaAk3SSX1XCHWlVCyehZ2kZUmt1xIFTLfQy&#xa;y4glWp2a9WQm1N3iGgcrZCMftjbRBwhMN0i0D49nK2q6+ytrt8wHthNY1n32txQIDvT8RNhSg7&#xa;6iAK+MsApqbQilR/n1CU957/so6VTQ6HcExgTO3BpPG6xan0wpDQ/v5ZyGNTeVSpnadD6r+ooM&#xa;Mvcr2VNrG2zxfXrm6vuzalpcESkp/BFc7Ci0GtfluUQU/G7tG0B8zLsFFsOA2ZzuDNsgOAOFQm&#xa;Dk+6TI45qFsQPx+q83alwYcdz0WwGlV6C936skIRYOc9QtOTJfcZp62Z4y0tz4foXRDK29vUli&#xa;tcQyXceIb/BG7nH2e6wIzt4x7Yr/Y7K0OYIRkApBt6Qt8pyLuqzCvMog4zQjhTO9uc4xUzJhVS&#xa;PEf7Ap7j79zK70skLVJecW4VGBXB7QbeYtO7E1PL9wgbaFW3WBTxIS1gQJVQ4doIewheKkF8Jv&#xa;3fB+zgnQTgR3xCJMs9R0ShdRqlSYjseGaM9RHwgYqbPAqvcFhJpKFhs9xv6ktNix0vn+crb+ax&#xa;dx37BnRQxuhxq4LEmhCoxrhO2fjMnEtZ5OCpOX8ISZmLYxN+iX7qA5EA+YbADHmwzfSaDcihVo&#xa;st7/aHNECwwcbwiKZy1iNd6vmZ4o+kMZMPzFfwvMo5c0c5QFURHyjw2IpX92U9o/r7prjZ14Bs&#xa;IJyFaiv00UbQLs2ki9huBvv9/MA8fY0xrRnD5Tuy1XrfJds/dcGKnXSDTJHnDbzUXS0K6ntUXk&#xa;87foiLU40dbCSVv0E4gcJq8qPKQPmagmjHso+2flYzw4kgyUfGrRmkuP8vbYHqyy37bKLjnxCx&#xa;MMX/KRqaF/bYFFWch7bkkXCj9lZ3UwOYcMxLnDY+NUkfSArK5aFfj0yLdOXagxxxsVrt1Ypr41&#xa;v3VL3yXbFS2oeVlPxuuJVc23JH4/s5aKS4+iSPBDdJIvlCrOCGXKm5gY7dn0skw4uJK5D7PcvV&#xa;Bye2PelSuOvFdSWIgycqgZ11YMQRrqx1Xw9vEzR76WuHAxr9FQVOUFroL35jC6q94QovgZAe5l&#xa;ppRSJuZFgQ4dS0PI9oAPIi/Ymruv3jczRzUTK6rvj22V2WJ3KTqaMnR7NW3GQF9RR5cko+XBOa&#xa;nfdORcLqwZQY9fivDSK1H5G3ypO2IaKSfmz6hm9WCe3+LYkddwNcN1oX/iSh9yh/+5r4v9cazQ&#xa;7Fn7ingSIfNIJEb4BwYnAHHqGQIHCjFnNGQ0Vq5OKEtuZ+CIdLxPm/v2qiD/CObBP3zbNOBaU2&#xa;kAhUyqRaXtK2Cd+fDzx78tE/qW87X2Hyq8/5dQgfvfqaBp//dXWFvc8ACFMsow6dpWxiVMMbEc&#xa;MRKNYDrFT0mJdqEacpzIKTkWLJOzWfAtvb9PUW75HQ2/NQUENNm/FBvk87NLoItps+raEz/lN1&#xa;8LnVy6H19/DfpN1McSZNKRz+S+YdTAo1yqCNrNNteL4duJPaq+gFna023usyfwrTVb14xJkDMB&#xa;GFJOcHDnl9BVqcqV/iCCFwWSLtCVcrgxVGvyH+n/nTOs+NgBCTbJdsWmisMLu8GXE/mIoEryUV&#xa;mb4oMcVIvTBGutJaQlck9vy7T0EVgUZtpENKvIQQdpTw9GQ1VH/2WabECUgvqvHh1S4S0ONc4N&#xa;VljaAuqwFw4o/75ZvjqCLvcY0+/wUVQt2Hh85pTgkiU5ynL+gPkmjWg/CqGOzdywArG4S8cm5S&#xa;t+NR7D03Q0kYQQJQnLMJdo0sNUzxxTjvufdgp7eZM5mhH6zbCWf6cMDy6YgL0enhH/UgpMBVF6&#xa;GUgoUKn5EGlhgk6MJYwzGeEwTM8Q6ix8G/92S/QJKrYpSiKhBJW7E+dJZ3GXphmPotNnS70Nsu&#xa;0kKQF4WSCXKupMZzVYYUaxn9IgnTUME3QzETJhm94L3gzadzFl1VVZoU1BB+IpwaUR7mY60K0d&#xa;12AZDHHikXfU7UIrtalfFgNutdNqwtrxUn/DCfYrD6LA8D6fC343ARywbfeHfTYorto1pBgc9h&#xa;cjXaTKOX+tIZXDi0U8Koi1fWwS9v8GS5Q2niV5QszsFpPycJrLn4m+p6QeNdwavWGL4ETOeC48&#xa;MUuwwKBkVmdfJlDazd0bAMF7otOl6ubPLOaB0ykZokrf2WTksc6iLGYPBLmQB0moxc83XXBTrX&#xa;9bkp0i/7KXH8JrAf0CY/dyIC6v44DLYXSVDUtfNkDNBjaP2puUn2cwzToX91W9oX21FBi0RgDv&#xa;i4veuwPzreQ8+7XDaodni/zOutze4YdVHaiBlPik2ZEUwy6s2xSZ4mjsHhwMss8hVu5zLU3n+N&#xa;oNQE08LFzAyQf7ZHbdGZFRLle1lOl4k4LdjCewF7ah5swHO4Gzl2mRObiXvanac0NLvseV50UC&#xa;i6divKFxLrGjq0og/RYutUElW40Stka2U1eD0dCw8gbGtfCGrau/eakVy+mF/l/7gQqWt65oxS&#xa;cdBkqO6XNg7AZ18Y/TJ/I3Tov3w22w28lwk4YWIciEi6DQuiaKamWK2a4WIkLrjOc2oEMOP4V5&#xa;z+UoUkR43ayre+d+VVwRgjaMWPAxnPTx4wvltlEWyCsthxBc0PlVWHZquOqNvviu8vAuc4czCL&#xa;lqpt+C6/LJ/wx5vxllNTiGaZf7YVPuCdXKYDSIhE3014A46ahCiCM5uND3AbMgOgYb3jTxUvBn&#xa;de+OiBmBdlFwwWz66lBcrXVHlmyvSITO1lBt6aT7poKTuZoI2TyTVCzKrLj3p22lzzONJ5m+53&#xa;eOoDfOFLgeYxscko7uVFM796/tMWqkECUSDwEcORvc32HvkZg6wotSikh+AzcJb998UJ4yioIH&#xa;kYkdXo4fKp+m6l98bq0zXxDzPLakPpTdMv2DT5kWOwUFDMhWIF0V32ObImZhiaqFxIRJI3Mlzm&#xa;jc6ZsjpOUx346Re99Bkk6FPxWfvvR6XlDu8aMRrdPO7Lx1wfuQ/kH8q5wQ00q6c9AQEFoI/xXK&#xa;yfP/fhZPddLj23ldt2O4fVjw9etvKBGoIDOdHYG+5jUo5JM5q40mn4HWPKcUktr/jbZ3DNI0ar&#xa;c0K1mJNytt2zYqbdu2bVfatt+0bdu2bduZ1R/O9HSfiT4T3TET8fzZ/5/Y617Xjnut8BMmiYEj&#xa;XNeEWNxBZAvuTKdXMogoYP1O3RXwYK7R4EksswsZQgTw1LyALxO36x8/IepDR27WdkwQe32E5i&#xa;bu4Cidn2ZwDb5R8Rsx5G2Bo4RA+BiWY7SWCIfbGoCZo5TtExreWeRKJREYwRRiKBSWCFx9VX9+&#xa;QHFrTd7VwqCyrK/eywg/boyfatakzCREosbAlyuSaLDQmmPUTVDbd5if3Z7s9cSUbM5IObM1W9&#xa;XtnQJN6tddcmWeLDs7sW2Il3VLp9s544DsW8Ko/q28yo7/AX5nFs7HRSXOMSmUHPHjmLkyK16u&#xa;aQuLSqGKKMyLZVLQg1JiZwLB+eckzcDw6l8qCsFyHtsT7etGTXAOkbE8OdZpeTR0187cILN5NC&#xa;BDZbfSakdMh3ZWk2YhnwmJ8NeyvKV4rNGzkmZEf1MXlqp+UcQRlFUamI4wqkGpbIZGAf1Uos6h&#xa;8rx9wtUmq7Ev66LXZ0VEaSoB2nm4ihtETwAkqGwca6WIBiZWXYxBM8Hl0TXvyLT9yO9qg0C3Zg&#xa;UM6LDgDGvdvnV5fgxUBQt5uWDY5S82a7U6VG4MrOtDK7V+RuZrCkfuRNGQWqXaRAGp1UDMgT1a&#xa;MUdRz2EVoVc2o5YIHXPgfpdP90TzwmYtymVREADzDOdGmlE52GuE+4Y5/qXKXXwo0ByZAHxIkS&#xa;YFqY4CAJK4/0vhsb6KlUYovfSKDgstX6fdmDzWJK5eCiE61OFSnOX7EAMF5zHpoz8Z+fZpkOUx&#xa;T22ogGOQQarxncPIBYJcyeABC28EGbSyNWStFGHInCHIjMsNhYRCrqDaU8lKyz2ipYkZ3xiLQ5&#xa;Eq4fQFJdYKDHlrf7f2VCbDRSxauoL0nl9GxKm8k4zRQZwW6wQyPcJ1jfLl2XxBvw9tzxTqoiq8&#xa;EScVax4DJZwEpcIS6VcJI5PB4xC28BgOVknbhIt0hZ7suH86YI9CqKz0B/cJiTvUoVh4qcEE3B&#xa;6mZbKgJCZbUImAebtviqOWMGMIGUrcSXQAOushAwkRp8DC+7UKNQdn2V6nMFqUdtSZmnJWfwUA&#xa;9sa/LWCBalo/NOTktvP2Cg6LLthSxdJb6rab1lYWvoDVze+gM/JFcqzqhfIn9B5v9P7RHiiiNH&#xa;Si6AFJQkCsuXWhdckARqEvX2gDFe+wR8hQCya39Vh7ZsnzKif12j4HG1y9HGaKtOKyQQfeSB34&#xa;TNi72i1mIFXF70zW97fD9HPu8j0nb+A+UXcW+GaQsnfVPijdXKtdih2O5ySZdTvcCMrKBEidvD&#xa;vjwj5uWx/v9SvKUsXq72Ie27pBHwmusi/IS5ImQ2qdwpjHHLO6oAR08L4IfRF+7Sn+YKrjn7/l&#xa;IqVkvoshC0BpibslJ4uemL48g65rkDxVT+ryKDHKKnpigisyIioiie/0akvbX3dRHbr2tDSJjU&#xa;HV/Yda5Ta9GrUCipzJXF8W6Ajc+t0RFVIlhPoH7UjIuQ5I0s1nCp5xHitKueFpY5dOFBwxMy+e&#xa;zI26uovrriGXf9qDZYKWrrAjl5Ux3jOjRe+CSCRK4Xndh8HpDYd4dmWrc5FJuiBZ7DQqWqtvFj&#xa;BlUJ3dhNeZy+4aYE65NaqRZmXfT9Tib3yJn59RFo5TJqTZDSycERZKsLDolfTqKzMJ/jsUFPxn&#xa;8XhZjrZIXML81UTV05GqqOhtGl5rkDxJLHloTT69qhtsAwRr7J+cVdbHpehdSqCiNhYLqw/Ewy&#xa;llUmrCHpsrnFj1qLmQ/bA61a5PgEfrfZJkcEiyX7uMaeI3s/BjqW8ldX7NXG6xS8Mm+9nM/Drd&#xa;C27CNuXLRxhveYRpZI1lWaXCvYTfnlvnomh8pzdyiecj/yGXLvbz2lnVopneidYvvaH4HsbQZc&#xa;TOb3Toxq2AnJFMG3aH4lDhHWApBSa+O5bgK4KZDxy1eCC/HLlSLmDEdl8QHvi45OL9ULKoLb0T&#xa;eY967aWBDuOLwJGXxHRfMBmWavf++a/lOS65qWb2/99IPOd/JvEYGKK9eVD/JvGi2vYlQ3kpSL&#xa;WsYSLrxQOHpAA4ZmfTAE2rl6nnm9ObUtpZz/ZP5Zkz/KWFj21AvMkjf6KTqcfN9o2vm8+/W27z&#xa;4PmYssan7Vdw3ThmjG0m9kPMuJHJerIplE8i20dGLolqbFCiIq5UcX1VQYzMqbmbu+zZleaqHM&#xa;kubijCmB5XZTmN4vajdF2Y/yQpNfE4xZhVO0Zyg2tXWiwyXmqafZTW9NeecB6isMS9IQQAQhPb&#xa;NHwEXiR0MnOKjh7KpqSwlFkYF88EswFHy++O2amtA7SBuWbmMq051+mizfkd17Uq9ZjzbfJ/3c&#xa;sER4ttTCzrC2tQYIIYMkz0WzDO6dNSzuAYAEGzAA1os+QM/dV0Cif6CjUqj4WDwJgCpdYYciWl&#xa;vc2AVWySmwRvU5X4/VrsKyqi1YF/gXjk/w7i+Z2I/wXiTaVT95z/DeLb/kcQv8YhpPQ/gfiB61&#xa;l7So5BhCJzhXRSIak9qASqX8RDsx1Vp5SnZD1DTAPpVRD0k970MWzAn5ghYRIk2GHlNFJwP+dI&#xa;HJ0CInQKuempHZKaTYIZnRP4rHyqbcL7t8wl+izweeRttdABejIDGllKDpDgsy/56odwI1kvdF&#xa;tPrXEYNOcPSVwQ6JiuYTB6A3XcjYQDGlbucDUVGL15IWiNEeP5wxK2TVso2qazqr8fM58MHRMT&#xa;y6peakIq3IWGUP8DxM/Ssznmk5QN2V08DKSI67FQrjdwGlTeTPlYmceVSW/TecxwaQ5ouWu1em&#xa;UrOveVjlICDQArwt92DI3kgFCll8qLV0F8G5KSZYKT3yON4478jRze07ruy5ZwaYWQUIEGp3K8&#xa;5GQzFd5lbrqNuFpqFt0+EDdWreFu4C/w5jQ2+Jp9jyEehyV0i2qMsRFUgNnJ1Y8ACmqKijQByQ&#xa;GUbdRNUwvjIJUS4UqoNU4H4VdGruavOUuj7nhzH2GncYRHZEBoAiGetWNifYuBhEDydELCVdSZ&#xa;EwuG7YBSnT834CMXOmZN0TkstXpVpcJ9zcHaciwWs53NP3oth95hZPchfx/Vuz9v/N1Vp2uS/R&#xa;+6VRoid5ce8fHqLbS7XLQvhfpyiwo3XMmjecCZacgM5C7m1dk72Be8PpKOjFU5KW5Driz16DjH&#xa;+IygbKHX2tcnkLZsxewQn2KXNrkUf94UQSelFwXrwatbDuMI9FdVkQa08/XKDh5xN6GgmiOPNR&#xa;mg6/QAW7DDEtBm2wJinOqc3WaYnp9zKi4qpdB9+7qn2zPhjyTuaXUWjEFPe307iWLQPc/7QdaR&#xa;5WrmlYR5oQ8UNH9TwEEjc3qiZ88J/N8gHvrsWs+BJkKkWdwL0QKoY9i4QtO4QJ5ee4v7e2Xhty&#xa;id/AcBJsHLrI45C7IjHf/TnfdwhnEJhHvAQrlpxmNQMRnrGpKs7bKST9cyhiyQb5Yb8RRXgn5P&#xa;kOceGWueurXxFUqo7brEHLGC2t2J6QVDaEsKAzXO0HphE+aH64KOP3vCHuIzxlvo/AJk1Iqw5t&#xa;5fQ+q0uI4kLiy8PtvMKLq8woPw16rP8h8u9gT2/KqgGhE9L9wwxINyfqBGTHgS9AWNGGELYrIE&#xa;vky9UryC33aXhRdI/wLxlPvUr/aH0KZkEktE1SiGI2Lm/rD0/BzSUERkDkwubowv4C9kYy/0KX&#xa;dPuUhtMd8vZ3hDL0wLMHhQN7PiDt8Cw2szRF/f/woeeh9g32D4fwXxuP/ri/nfV28Vl4W+1tAc&#xa;s1zCU2XnYExO9iupQxZ44mr9kZDE5WrbAbHrPhgR8oE8Q8STNfVoAvHYL2ARDi2t2A03cBZNUg&#xa;mmiFLsclcxpjmLltbG4o9v101giqCcJJC5Q67+cnQ46GYkc83I1dTV1dXNtGhEr+ul4od81aWw&#xa;+iaD+fCBDuNCpXWYKJGpHhHWBjYTPCcIoiM8uChY8h6/cV6901+Qc6cAOKA+AVp0DF7KFbcI59&#xa;oF/2hmf7HgPFHp1cbMla3NpaWAfYuMWQeigNVdSyOb21NzU3OLK6Fxep06C5qY+vJiRxcQOHZz&#xa;Y2N3bnlmfbm1trg0uzY3tzi71Pazr7ukIXF0ab/bnCSHolpQnaQNHgIpMJlbECzaVM+cAoEMum&#xa;3oTpgA8dwK6uf+3bK4H0rfAlo0nPKzSOCxvj6JrsUUtelzqESZPItien7R3fS27v7str//B0J9&#xa;6KQwv3Mi3MY87XzOZR7jg6cXMpBwIRcKALfQqgNVZEHb1dXd5NKF6LQY1QQeEjol/vTe5HLh44&#xa;LNtqjytpyAyBZMBBxEC/pMUJJRbUfvU1VsVwMDS2nv/TWBgIYGnxYews9xCU86eVWn7g+4oab8&#xa;Tf/AIkZUKWGCPzcS3s3EaV8AOQEchYCpJEhJDNAihnbqjeI0QMU0YkHAY+T+GNsmrSqyKUFAjD&#xa;XkWIAw67WEUx6dJrMlxWo1HguU/50p+d2tbs5Rd2Dfbxxx1ddrH3CUQtz6bmhKYNAcvA8dxCw1&#xa;PaGPvsaSABVMnR7FUuYvie4OlAz0UOyWA5NJWSY8tWbpsY9+HmNllZQ0U1eBs8xLqWoQCOQZNa&#xa;N7YluX9d/1EXJ17TcNwrHdtiCbjhAJnVIPQLN2KR7ibZIIrKq1wbP+c4U1mZpIuNJIDilU6bMB&#xa;2MjwnmdDIdCbxMX8lUColM1CwefT7TXpy2wq+i4+oepaR0q3CtHhkTPKT6hQ2QaZrRjZMLpgGq&#xa;exya2jaqfHgYUfnr4km/e7k3QgiLnReNG2YPOHDt3tACcU9vEgVQErNzDzxIHu7Vl80zom/WeJ&#xa;3aUE8DDUUVKmDwS5z4ECRRpQbs8bHZYZ/kjs4KjxMlmd8VjVnB6z7KzoR4QWAQhLf+kPvlwDCY&#xa;pY06ZvS3R3Gn4H8zmGJH+cExa6m1Y318/lEH+20BfsgQ1gyPuD7exaiuChyIACfwmfKbBOGP+P&#xa;f1vaBhyOLuHRIAi3QUIOB6/4WZxBWlONLePrT7x9fuR6u+Ef8U4+rIKCjGlNcuFTtFX86JAp/s&#xa;Os0e/TIeYsr8JTBhxnARTDy3C2baE54B7/5GUYWcavGHDxXFanBzBDVtAC6z6hyfHp3j6CyD+J&#xa;fyRjpqfz+jfObCecmzj2HB3/nJeXR1ChVmcVO69rYt7KomuDqDGuWEPSQT5gmAOOmdV7CUIF6A&#xa;KDAZtQUkOU8cfwFuQhkPhJWrdChaJ5gWh/plnOcrQlrrhMi5hHjeLkImVP8KbKSA5cOUDFPEb0&#xa;Ymu/XZqfUAjHsq+c+uHoWuNfjNfh6oWqq5F5p16Gu537VFNb2W0d+8x2jxeSOpehWybXQAbrcZ&#xa;z6TnYfoDqOXX9NPXG8gdaM2VhfiADQmCn09Wenhj6KcsnYpAsmx33bF8Sf3IskTiRI8am+B/cY&#xa;cLv0imkNOFtureGuE7492Zk1+/UpA00AMJg0JXkFXnG2qahCcwrM1f3gLWgKFzH2eTf5xhdqbS&#xa;4QgckAVRnbfDY2Ths1uG4yEZ9s6Gl9+cldacgKOSeHZc49B3SePlsHzYMV7j0tOnekaQPSZQYK&#xa;A3nJBSsOMzErIbsBTq9ntrLb37ZPDBRG8tO9E3kBAqRgMKi/mStBcZXRZaiWZCNmyf7y/eIFvR&#xa;NWS5qhC1pvyzrB1Dkgv1VqvphRj7SE5IW0wqw0qs15vjmsLY78mDTw4P9O8bLCWGRa7c2L+RPG&#xa;x8a0OqjPHEgLaGZadc0Yrnbo39G+ddvGKmHtXob+69zXs/tQOegKyY3BwmB+SM2CFIZrCy8iek&#xa;rlgdpcJ6N70E0GOQVwdeQXWladk6XGkYtN0DVr0Fw5syZJFGM2BSYWFowzaWE0Mq0O8Qfx2ADW&#xa;MZ0ZTo3t0QIbMC8Nds1mh/hfj3UhtwDTJrMD+viBDxidwX1vADr92YldQUgQyA/MR0YoJgbMR2&#xa;YMfYZRgsHdH4GRGEGYAMYwhjAmDN4plY3dwSY6bbd1rcbpcFa6ymRTjlH+TR4HSGhIYudneMj9&#xa;sj9TdaezGs63wqdMmtK4tED92ahbwrRt5lzP9bdLJHLiLSrlG4afFM4YrFqfgcBvcLHCwURFZl&#xa;HDFaKklimfWCX10EFOq0XDkjFBMz+/LHpJ9tDlIZRfpBFC8XOnIqYOT43+C/elnFsIziJTaMxX&#xa;SZ2aoSEDsrLYTiVSDobYjs7zApQmxSynnZgBCDwTwR131kHvnKHW333m0uDWtKqRyF/e9OED8v&#xa;e+X5VD8wIDTvY1sB21mRzgU68MRU4C6VM2vl0WJJmaUsyNlquBH+7IuWLXpCuhREt95rXM8wxI&#xa;RvhEUhBS28qDv52aOVUSH+5AlwtTeZiQMJhKut3VO0vpEbDzKqnN5qtGp1ZLlienSij+uoXReM&#xa;PEgowZuRQTsCSi0+GlURpwfkxhUheYCLr70zohBozTozItLZcI56kmRAthOPzBLWh8ekMloWWl&#xa;nzi1ZCa5cEcwokm4TtNWF5eAm39TYloxwyfHI+KTKafCj2bLtUydb+shtnDHoHfYG3pVHXNnyu&#xa;6XAqZwU8zM7pu+B6UmTTJwP4PQbq3psPS0yE0cKh3Kep9cbGfaHUIt3Ep6r/B0wuzIpD7wvx99&#xa;clm8WuM5wulO0NQIlXLryAwFf+se3/Pegarh8KFg2JLiC6rLb7I/uVQy2PBUqRXxreemTT6wfh&#xa;L4hvkcD2DR+OPQ+SRpuynpqfNMWryC+Hoq3SIPeiTIaSXFjhZcrnbMn4xeZe3skuu4/97mR1dJ&#xa;03wep5XGfKWD4wvOPe6eMZf/EamxOfXrx2Vszee3FRZNgszI6T3yx5YazxsUsE8rL1PlDbRtIm&#xa;mbMrUREv+IX6qPPmH4DlGzev98X5wF8Zxcy3gsIGRkKJBI8T4+sxC44VorUJhSaE69RrCWt/fb&#xa;nV0pV7xAtrA6uGzN5PxSKREFazuS3OMV/Orh0D6ChOizkqg2RO9IeTHm5aG7luIXhDvrVRSLt3&#xa;j5ByuWQn1Fcupfwk/IFh5pkkbw/D0FW/coaXaX5Y0BFBLjknEsXyWmD9UMH+npzv1PMloYLN/Q&#xa;XPzLV+X1qA+heH4OZ2iLKrJILF+9e0+uaNv7RS1lmlymEp6VZ1Unw6y76+K22WLZ0lec5En+nb&#xa;yIpAQaEgsBxc54x6C+Y3kaWXA+QpVQkdXC/Rlz1/DSJ4qKfXrzrwCgAqqfSMSv6CBk4N6tAapf&#xa;4K60cObA3A+4N9y1+MVN2SE+BFRcka19D9i/gwFjK8qfzPGDnL+U7iCQ0CJuh5XuRAwX0OFCRY&#xa;7siFxkul+bRJU/f64ByxzMEnsqSqrKWoqa6urKhIb8JMzupVzpF0wk+rXy62ZJ58SJENAI0yJq&#xa;EKysyqm6JSORoSCVdLdQVVDjyt9/giXRUURUsgoPzKWVr66lGjNGbknzvAwjGd+dEqoomFjOCU&#xa;+aBE5w3SdeqogkXjaHhv4EK6/3d0z9h7oyELooOY7RDezFt5a3WoSwONJnBwC7C68l8XRmvedD&#xa;iTrRixiTRRqR7uIJVSgJtn0CgfZxaNIqKbU76eHLUPiM+zr/OMS/C2WRlcGYvHikf0ICi41DpM&#xa;yLV8wYZQ+jCrB4A2fmy/Ky/ux6HUhnjacvBKB5cE+hBFBZaY9bFoEbnNGY1SjdtSYxteoqqVJQ&#xa;a7DTq7k9IKdm2S9hf6sIlSmWN0jUx2o3x7LSHOcimPakJvAdHkpbOVKxXsbPqf+EcM+oF9C4Ub&#xa;RM5go6SgzCVRBYN39mFxMj6iP7FpkoQ2hAXUhzEUZOIEo+p84cGxF2Roj9eeqs1jxPWWat0NyW&#xa;JGOP+pbJE7llo5Bxss1PMyjXqAMQX2qWH7zEwFy3G65ES+XjQrpgzhQyQFYNAHVdp9HoremkMn&#xa;4AI/5LNxD7/vkRVmql6sN7sEnq/Ybo6gAl8orli0/mTfr3W4Ajs4bsDyy4613T2I0UyYg/qb8k&#xa;2JItqe/kU54ZAGbEwMTLdhqt34qn64XfwsDtOlG5ugXbtToV89l2w0cfP/TcM3Rvt7gppGBDNz&#xa;E51wROIzd36YoTxOVJdmDsKTqkoWOza0zNFcmVQr4Gi6qFDcvyJdWDSpKYbzB8LBQInfHWlirJ&#xa;LUGqnPHKmvK+7I/8PHeIqKmfWeSatH75qajEBtLx/BQjoMVNubPn0vLRef0r98TWnAfajJoB5B&#xa;svtsQb8Jxz6PyXYytfoo6av5NLwxCRSnzUgyRm4kMRxljBBkRDfa9CG2aEWqI10R41snFp9WGM&#xa;yGozYsSnj+NypsUtdmAX0X4H+mdMANsvITHCC4zB8RFCX3CYzusgEwBOaGSs/4Iv4LKZePbMBZ&#xa;9siR54U/XYFd0t5WNyPRG0bkjFUqKokOlP7bl5gxHoJvN850iCmofKCTmX1Oo2Q3JtieQA57My&#xa;74brc+MBtl8fVZnUWmlb89HF8u3z2LWDROa/8gWSe0LinVaRbh2LmnLV9ojY3EpRd4Vq8EFq7M&#xa;NNQ35DG8CG5fR7D1r9j6y6yMXdXCFzq6fFIJVkh136NQCfOJlXdofc+4h8N1GwDLpVgWuwJEix&#xa;2eH1Etw7JmN4dznRvgN3da2jbjveArHFc0uPxNVt9qVIIuWMmffaaYcy4sA+dhMtt8ptNocDMr&#xa;PzGpnFNqr7btJIrjjW5Zj7SJ2cssBU0bRjxadG//A7Ig2G9lVB9/bD+OBrbPgwf8X4xIxZipUv&#xa;c3Ft34UvzuIxkDna9ajj0BydkoU+UbCi6zq0Ml3iLyV2qN2i+RtWbGZqTfwic+d1qBxpei6fXs&#xa;LkTKNL0kaUh2A8jpCM0imUMtYvYFMlPsRWbclSrPTIeLDuC7Hxl9iZF80WYU7crzuZiY3cpCW7&#xa;SKq3Z7ew7zIJT4286neIYdDz7+oZ9d1v34RXi3KPLb48Qr7Cm3Rp2GwSnxTxta+Ep5PixTrekV&#xa;HgMr5CxaZTm2j1x8jB7cPP3ZHF1A2bw1HarqmL7+CZ0bt2PwkkP5GdGrPEd2wiHaiauT+kWjEC&#xa;rl+CHKIfdxilT7YDPj0rX16G9z/fvznalHVfckv33pynzbSkryR0n9qBiUF8yHt6p15/unvmX4&#xa;h86GV+NZKOVT283RjefA0wffcIX+1YiMnkxK/YHM4p33CC0uF5A3BEdX264+V03khuTOrjAm2L&#xa;8LBf3r0udV/8vENsD6HJfNsrjWtWviLoX1SIJJ4ZjvzCHbOuByQMHaCcvVwGD10r9YxpBC3lvc&#xa;GtF6IqCoxwGqJFtkaSRr5zPx9hkA4MNf4x1zu5qeCePIRBpGe51NWlQTt6D+8ntZynSakIwnqk&#xa;Zf7hjbw5TRM7tKCrMPpOgqykZ4Bp9UBknVhiBhAfNUKEzNmgiJfYEJUP8Rb4y4NMsGLQpKu8Kh&#xa;LlXrdJKeZ0LKp78iHSGvEGA1JKOGtiRDYbDV1fdExpjDip051RA5kxUJg5EvvOF9z2BQtqNyiy&#xa;jgeDnyaijxabsoqqCRNlngxxpbyHmQrs27Ev1C3fHAzGY10eEWi5HffKYrRTHA+JCsJw27LMDq&#xa;YuR0UwC1K1gq3k2i+d0enrtb1z7K+UtLEC1Hv61fvqqdVdTUzXqNU3qMhKTXelHry1ybVxV6SQ&#xa;jaoqbePiITSQob2vp6za5tXHNJfrPt8nNauNadmZ+sggM3fSUlDATSjl1iytWW+5/7SAIFQaXb&#xa;aO3wUcQLxm99IrfUGMSEVV5Z25/npYykwEqfBEhpAZ81cJkZs6f2sNlnQ1V+pwoE7Gua18cNgU&#xa;JUWF57iw504+plQw4b3Omwc9kugEw65FdLTG/lEXvo62TheqVpsu2X5lwRGCE3nCmUJZZDhoOJ&#xa;L8ysqY33uXz2oosaw6iUScYoIbvDEYJojY+xuwhMKTqnh7/Af71AttvDarG0w+hn3uBUGZQkS+&#xa;7NWgCinwafxIvmATsmkc3Fo+x9/ziHJVfIfsyGO18hOseVW1X1ULmWVtG4TbZoY/8orUvOkmQO&#xa;d5Iq//G0p5XS+4KYZI/abUH2vkTf4irBdyxAQFRw8C+2zjsBWajds2kDbmRL/igNV8fB2Eu8HW&#xa;Hy1iXjOb69KRTSDzgcKZAz9IFnU0ZCNPCNd/WnsQzbqJKVYqyAdEk2OwkMAd1O1ldWia5oH7eu&#xa;AZLzMmu5EcM2Yvx4HnBcT6pFICKfnjSs9hjuwGZ6Ql6iCYiWK4MaiQExNFiBnSnu/nkPL5QV7a&#xa;I1S+xZmDvyPxz7/bk55JTotcaiYc5i2Rn9Q6tjaS//xon7Ucf9rPJkzstb16ZCUOcUYO2r9Lo0&#xa;PXVElKVCYgOV19kvNKTWvmG5Sz5iBzXKragiwxx4QfuO2ba60Rxw1UHbw25zR32DdegusOT/5B&#xa;6WIZ2gXID5KgKaW11Z0Y1OLfPD/KW0pKULaQ/NSOUVMH20wZpJHDnPNeO+9harqHrOp4lUIY8w&#xa;0tqfwk0bUJJcm0UoSkIiAyLZCoT3zF04qgom7yLmHy6sEtnLT27W0enW5MwzS+2nJH9yVJjm5K&#xa;3grGp0aeGO3h8OVhLezPGC534En4HcN+TQbNvhWc++R8skerbEeN/DSjZSRRoZWYTntKEtPkmC&#xa;Bq5K6leLWh5OGWET18G2P8N1WxHz1hbO301wzGdvqhH/p2NtDr0rXCC0fO9PRbMuHNx55F6AVs&#xa;7Pon8/i3p+Jz4Gv04ual4QHXb5Fgo9dRkr6CsraxMTOPiOHbO+O/yJhvfOmX32w4k8YZN2TkL1&#xa;1RA35xON9CUcaneCmJTneweZfN0XGWizawHpuZzp/xOwe2K3cjQVzOn5TAoBg+cmf1ET2kduER&#xa;PWTPipge0kc2XD+5U0Xcv+KnWwn3lhIe0YWdqoq65JQ7xJQ7FQcPQdslB3pQXXojPUjv/h+gAf&#xa;gLd6SC+Ct3N0G8wAM+aJ94W3FBN/F3eon3A67vzFnoNXayj2GTHYk1t5qYv4TOucLw4o95wvBn&#xa;r3qC8FKPYVkPBVzdoqeMlM/c7QFBOQkP79XVq1C/q6hpbn6275M8ClE+Y1I+a+iMkT1mVU8SPx&#xa;LrpMudojvW96AsfCQX/m0q/BtdfYjw3lVNQ/L4U2cO+ktB7R76S0INDdlTV/FbQw0g6Bdv6iFQ&#xa;/qbWJkgvWdBdSC0F3VVJHRz0XUAtEqQbf/y3plThnPBSEDNUPjDhV192PSijjyQA3GgcLgiE4h&#xa;IdLW9UL80/39sADOYmGJGiG101D2Fnv0Tr8z6IkCIKPSWvVSctgMjJABZmag0DJUtrIEV9IAXG&#xa;S76WFiB411wLFbzZT4JiDZsp32kzV4OiCszTTAvet5T6MjTAiKgONqHoRSsGqquvhuzrTeAU9X&#xa;OhHGg+MU3wHKXo6krJBqvUNJ6rpLSV03rwTmi7oOl0ibTM5W8Yz9mYcrUJ6XzO2lzNquyHp9jS&#xa;62iIoG/ZzrQq8gArr4FS9tKUTc00fyV28vXIW2iSNsPxPTDQkHiASXz8YK58oNcORYYvQYrLQk&#xa;LUZ+ovm1WVyTjKJtn12/u161xfWyTl3+4bQfVlJZdB9T7Saw49PNS9QGvEFqqdAhiOv/96ceRI&#xa;/eEZg/bjhzDT/wi2nf8T2Cb6n8C2nLGx078fG/9zUtt/JHTarDl38KtLooJA0MYVB8/eLwZowi&#xa;TNNoooVtBartmSnRm2Y7Nlgnaj4u9+hAcQdSPohSr1KgXg4PONcX6TfqOeZ2/ZSKzLS3k5urke&#xa;T/t4O92wf6zw9XxC5mHyMdLY4B+3addMeTSSp08+YX7af+Xl1Dl6ZLJL6QNgF5pNovGiTVmYcW&#xa;1eVEmUGVg0XLnKtSR4K4+cFPQmpjNjGPsLcDcPm49vDw9jqELekOmWPdcB584vSAGApURGhqBz&#xa;p5hjDE8v0YkjQ9Nxw7DBiffjMsAK7gBTQWJ7FWB+l0Dj1NJMHwzg1IxVvLc5U8uFw1cabamr+1&#xa;vop4XZxWN6CG8IxJPFdaNVunS/vXumjRWKu1Srgd8bgfcP5/mZeF9nQ6OKAAh5E/Ba+T7vIGNl&#xa;Q0ShImbrQ4zrqBlnhKShTgHqG3tuUySM4mno9rM+pkUAjNM29VFGY5BbiIqJow1Fi9+VNKUN37&#xa;l9HRozZVxS8QMt0jWJ9xjQphB6I8J+wD/gSJ3wgG6zSp/uWEWp+wkQmSgqiz1+axyQL2fpWh/J&#xa;neElDqPq8V4BfYqNCI1vYStlTvCzQJNsxksR4LKn7rDajUS4EUaGiVhpYJ5DGRhki61hRhTbXJ&#xa;jiEhRLkVxsG23MmummNT0t5EHLfPGeF5Q5R2SEu6wmryQARSbsbzBFixoWRAuQGnQOrTjzON2d&#xa;1t0Yd9zgLN/lpano6zJHvYPp2m+y2cZScY22dbLs8kEhWxo71jhi3D3IcIuSZrE9xAF9EmgM72&#xa;xWij+3xbRJxyVZKEG57JVF3KL7Ix2MkCyoDM0oBiURloewBAAJjGhh016eVaRB/v2IgJhoPhEk&#xa;BZe4JJwsuhGBaeUYzg8r00S+ZxCSd2pr99CPlLvNBhG7q4Dpc2qWRt1aMKphtNZNdaPb58tDdu&#xa;utLQCHMocRCNhbQ0oHjxZIh1oq6LPZs5hjm8zBRD0VH8cAfQGgNxljdRkaqCPAxJ8Y0GIzD6XL&#xa;ByLjT1esSI3ZayhgHFJl1CpO8+bss5EXE/FhRoU5y/R7VuQ4vKn1CfBQ/rpHcHHpUqslReFepV&#xa;n38Ys/CjLCNl03OaSCaZmCJpIrsrAk5gkbEEYm1mQzMT4NFiynNUs0UHol+7FVSbnlU5VPd5Tw&#xa;fhcQf5sVgIMTPwrrTLnZbgFNLwPEusGZIKO7jk41wRmgFkZh5qfbY+Wi7hfvg75MdsCpoXbHmg&#xa;lj2DFWV6621Dmwg91yg9KbCrTaqtpxuNn7soy4BWv3cY6Hjv87bp9uXGwincVmItk/4lxOOXFd&#xa;TKxqD0Nu4h2w4KyxLX/ZrL2Ey9M0MZ45lt1sgwj0G671jmAkcpU7CJtuyEcm8Z4m6HDJnbAIoJ&#xa;TCHIFX7kN/VRzW8GaFaE1QehMdxswqsLQmLx3cskZk88mwCZOqUYOSpLdN6+TmYxq08ROVVffQ&#xa;OukA3OUPSr8bOxodcbYLgz368BPkB3SjhNH7z0I7AAW9OeWFwiMKXd7jCDxytpvnlpQkZjJALT&#xa;uIo2XU5N0UNkVeYw4dX3QTHLBt0VNRotEOfmkiF5CywMympS2xP7GXa38xMi2p9P4uydPtH1+Q&#xa;h4HKHc56OLUAfGn1roOyZQkqJbbXFUlsCfdM0cZXrGL1qvAg8ENQspRjw5r3RMTA1GutFF6TFa&#xa;nXza96DErZXBEmy74P/Z1RRad0SV01NNpfd3moKiC3N2DagT11ePjanlLnxwZ1A2pFdPkuI2ag&#xa;d1BMrLsHRRvlms0Jyd/NOdKGUMXz1/TYdfXYuRjjgFnu4gTEg+ZgdASB3Q1fpNGbwoo/jdAf8B&#xa;9wAAyQgJZ9ft1/RB5RhivGHMg7ABf52E4IaxLJCJ0946DWbskR/u4jetFzFtBgG0Tnoi4siArs&#xa;ZWLitqq5RG0buCObd3huTQvZ4R3MOtetmcPIpuHk3g3UmzCFr4tmfkMP2UlLkSv2lXpwwtW7S4&#xa;x62d0WPk9wvih7UrXfg6AJB+4H8OuzHriWIHYuugN3vuvvdCYYb5j4nmgBr1DkPrAVowH8iqRq&#xa;uTFDNXvSfITPT6jeHx1WbRHfM+1mn4HUpJ+nLQI/lh4H/5XfNiRuCMSG/PFjHfBfSQ39/0Jq/i&#xa;Ml1NzA0dnp/1F0bvUP3cHwJYOzbtchsAZqxldAzBciaCLMOdqY17HZxC9aRmK1ZEq0p12HbMlY&#xa;dO2hikB0Upfi//am3aVUiEmVc4zhGz/g7thIaP6jlLGwNjbNPcNz86BL9u8ygfU7ZiEryyzu6b&#xa;gpD0eGVKcQON9qUi26I5bUkmHWDZd6zznHcbabuF4MLNhmExlZ8sgMDfHiT1RoF4BNio74uWpM&#xa;rJUJOab6mskCK5n7PTh7m0xY2xsuNcbyZHbLRoupfKpjPIKBfPkbw2VY0Yx5YsaMgf0lYGVrer&#xa;moBmXUXD+smaP6GMuzvJRTtia9BWP/LMPYo1v8AzAhPb3hyiS+RkP4WIKxSjEwHhhi0RqK6bpM&#xa;oBC4zDCwngLqpqRZl8ao7TvZzHrfSLzs2c4Wzs+YfYlbLzdtQ+KGVScrCnWBWhlMRRwlhtF/3S&#xa;qQQDI/8Yu4rZHLKlnH9iWjMKrMCcmX0ikkpLL3uSfhgFNK3mD1i2BdZ4EO3aqLbO+ENRs/rjad&#xa;hQRngyLO16VuWQFCq05mGI0HqA+X/3S44BpynLVnbiSSM4FQlmV68t5W4fFHvnahJXZJYVkQkB&#xa;TegSfJC22T5LD/BH2d01iF1LJlAdExN+uvI57QsqVEeq+HfBeblw38EnjF3GKTvM5qGXHUDP9M&#xa;rlXLMpBJYsmEV7d9WatX1XYtjqORM+yJ8nGPcDze9kw1QW0zlXTPcM5ajDDhTTMzj4hWLfHWF5&#xa;aYDw9kyukjBCqKA5QzCQNBW+lUG0TZgAIkqEVuBaMLUWrUD/NK6uZaLlMz9AohwugHEhx9CIhn&#xa;13a22vbFPTIC9DmJdzTvGKrhhuVcNAoN9Vb4NXn4YILVAhAVtZrGcw+AuiPV5iAAawpnua8eB4&#xa;pWf7PLW5VgHyxGCmMQus9u+SeuQKw6BqqIyNZhluo5q4h0KVapQKXtHLpraLQKy2mp8fB4R4l7&#xa;zkZWefK0B6rG3rVV4ZNA1ykrCQT9ASqieLZjgUhLG8Wn5aJ1h3jGgsoo5grbZMBKfn8xWx8xBU&#xa;Ol/eYZkQycZJomA+DD6GXu0Lfo5OoCpQxDN47p+w1JGgLHo69LOPpuD0i6GhkxCa8joydy42zC&#xa;QcFs7e4/jjSt4E4RAVM8R2oEY0fhjisi8EAb8tSEtATmJ7aaQ07Iqlf9G37nZGfg42nwFsyyvf&#xa;22MNjAqzKEWYqn+LrhNDkotszqkNbLH7Ryl4hu9BU8l8m63YxD36N4xKN7hCqzzXajuTTZZ7rW&#xa;BBGjiWXHUPKENP4TiY55VLecO0Z1NzJTmv/fkoHq3STeCqHwD8kg9ZZqSyMqG0w2jmcb+KdkGI&#xa;gDDnXXGd74PQyjNvqwOY2SbbJfMLYdWyhtOfsL17FbHJVDu8i+7m9XnUJt4xC2Mkioz/PrzbH4&#xa;H/NbA04pI8vzcZItsqvVsHpK7EJPm6EXGoABxX/c86/Y8LoIq/E/+Q/QbqgS5qJGBruEG+Dcs5&#xa;YHrYmnBFlKnrH4dcisDPik5b9QG7WDPZG5qwXK8p6wVHVHmtlYt+eKybiQegzkoLbzXJXt8wIG&#xa;mFfq2mR+C06IWdE1YM5d/1aVeQRnzeRUFeI4rms/v0MCZTn48QVrqwPSwtGF3hEmpcQ1beqwKf&#xa;b4pQyayzNojrF1Cv18Bfd8FTVDVBXiK0Ci2zeWnsmRLLs5hHXXHJAqOt9iT8UYuQCquPmyWA7q&#xa;//SIsvvkbI/fAXEVMsIZUOeRSPHZYw/BaZcsKPJFpL4lmwHjf9yKpTbC7MAKzAHehbHzST600S&#xa;p39KVU6f6aXTsfxK99D7tb47YXXZT/ZCMzA3V6r0JNu4GVDdsKeoZfnueIZP9bDOfjBlS9dd3B&#xa;lY6eXXYL9/lU8z4lFr5FpAOH4oYSKC2cV8idKrzZnYcqu3uy8X5JDe0M4FXrxGdb6aSQfFV4jf&#xa;RU/C4hIBXqhvp3jVcFoKnknwtM7bD/XynB/5WNpubhrqyG+nfLOIFdGg9BV52rSHn2R+JYUNIf&#xa;NKw8NEFQQkICaH1/tu7JTgm87MnMbg8waEsdK5GqJtvkdhWroS4QTXGsjlbUKtULxZeq6ibNly&#xa;t4Pj6/l24J8f5e9CB6s2vuF+uXrB3uk27y749Z4h+q+zugrNE+qnQrZ5qqXzHGTC0jzb/U3E4a&#xa;JBYasD6kVyZcyOdl6W40K1ig/pTrrjj8glsumZK28ynoKQAqExy3dj1Bk1s8pb9p+wiMT5nxdO&#xa;yU7xia0KSiJR5gmYA2jHxW3RZBRD0YzSGgzJIPE9fSzLvO8hi/M16ecpqTdrqwnjQ4B8kTIow+&#xa;cYZCoDXKRHmnJtdrUyfWLkMrq57wLDQgR1swp1qNFeL8MdeaW1AvY4HbkC321U5513Rjp7W2Q0&#xa;H4AB9f2cDc6JDdbSdSQNtDiS03je3NOtedsGJZOPu10cDWXj0GGCJm/YgcUR11DrjnHF+JpWSC&#xa;e2DgC0KiQVDnrUqzfD4tFeQI+kG3wojcYCr/AWM6f9GQ/r3ebCEUspa+dHX4e8JmjGGMBzPSu1&#xa;voT4StxYaf8a/EGEBPEkYwyaDOFimu5gDTvlR9i/q27MqYZjV7KXFABAyNGFwsERh8fgo1JWmt&#xa;q2c6ZUg9V2Wc6gUEmw6NuB2DlC9ZenNZ55pk+lvjioRuiZWpI+XIFTtpPUslybYXDrlNevpWOp&#xa;4Zv74uY+fNQh1MhVDYgWV6PpKEJCm0eP8KdW0r0MAB4eLQqC1KMTu7tzKO3HayQxjLycfHGAm8&#xa;pfSpiHTX0zqpmF1CLoNEQMIUoWoBcnzVsCmEFpQZ+nMa2j0Nm/K8BWKDRFRLaDVi4i++nZqVOb&#xa;xBqPKv8ULnNEqpEalPz+uEUCiJfjKmk6yPlCizJ81qyO78dULm7BbXQvBjMU2yYXUEwzh6ETUo&#xa;rzo5rHnSdMrae0OOM/FW1+UNllMNRUOj+UnP+Y1opFlZv2XnKtcRq3ZOu+KSL15kavpATEF2T2&#xa;PwBpJ02lobT1zLdjsBSdMqtfXqJOMYEkgH8+OEMoLFDW3SMW3BWgsCKZfgV4L6BG47xQT2N3r/&#xa;kCzpq+5wPFgtqqY3BB6chPMHUg2CMRNvgwg2FTh6dArSRudORaIT1FaRvElrsxRoztA4BYa7XL&#xa;D7dIhi99AMfJV6bLdSgbqte2nWH+D9wsfCZgdajtXSUwkh7Ajm9WUf4yqJ+lcVZ+7EMSH22NuD&#xa;aYck6buVzaeb1Ne6I1r2HZWvWi6TokWXu3bIYdJulRbu3Buz6qXf8psInPTrGWczErg3gx2C7j&#xa;+3r7Dx4FVGvOwrNjnIRn6InRkwb/QHNqgickKaqZCTzfSKIPfnVbz/Ij/Kzszi2o6FHz3wjWvT&#xa;zRWvsKg86HLPzfqDT5ZVjlxN6tUvXLFFTTr9LFe7uddmvWiJoEaSFWW2nq5dwYoxKAYhWDyyhT&#xa;fNOh0Xi0iqMe5pIfiGLCzLlk3+oQRK6soUNoMAxXNtyi02CK85JmvVC2sYJknJnbiZJvvTQbE5&#xa;l5c7+xA6wJ1fV+OSWBWhBFqu3LbwkyF1rVOTdxDx3I117ch13dcJdr+BSf6v8bwqQuys2PT9+p&#xa;TvumcUpOO2fsbEzMenKds4Qfco+INBRXYjWwORawaQbzpGi0YCdEWYTv4OFs6wqERU3n0eds9M&#xa;bUDNxRv8ZWycZwzS96yY1dtIEv3xj0Zjwr3qwxRCTn8LOJouuBBWN3L/QqvISOodKubGCx1DYP&#xa;IQvvga/rjs/slpuVRP3hcGX3pfre94ppxgiB5tLYviIfgJbiKzAYzUAD1JI45ais5Iza00VM9g&#xa;DUQ1D/nqNYXCtkBGtjfZ2mH7r5+TdhBocozDAgdSAJLKSj/uN9y5mu1t7enLpuKYY8E8Lt9Yvq&#xa;BbnJzchFaJolclqJn9GWGvgvNW0cyBzUtGnY1LCa3shFt3G9dhy5mXF3XbP8jn9ve2/ZbNS65K&#xa;ojGO68bcZ04J1rS0mL6WpadVOGgN7iAMVVDKKaOZNGZK4s9C33hDOBjn6XBCMZ7jKgZ0Z3pvjZ&#xa;noM47QGwbaywhhy8PT+gY6QhqtNOtfBGjBE885cS+Kn9Eskug43K1I9HHoqtVoRtAvh+fB2sml&#xa;yc66kteR8nsdFOlwcMzmh7/aV/GYyw8YjSw6XcHnkDDqELVVIgy0naQ5GI1keLCYlx3/an6zRo&#xa;1VqjExGgUad7aCnzuARxetYjOzKdWH+01BnClYX0WIyhVcAZqp+xQuMYwucQTEKNcvSpcxa5T2&#xa;55kVGY3cOqudMT6SRYUIcMzhf1K4EOiqhTGYbiLU4MayOQCeGIk5py0oIjFTkuBSo/Po/bsmtS&#xa;ZrD+a4+CYPdvd+5SDTw6c6/SVjevcJQVteH8DywMQbohw03axkG3M5cPljgPOMP3AE15fGmLcJ&#xa;AXsdgIKF44bOHDN4kQ+vP2fRGfGzE1tzl6NmwggtJOZhnYck5NDmXdtg6Moo+Oh8qby25c7rkF&#xa;U7OQLBdtCqjWpkh9IeNx61V1BS74/OItf4EmPAnm//rgTat4fyAZ86nSkRUcottTFcfn76DsFP&#xa;BGQfdYGJmoFm0G/Dz+TedBH7RlTDZ6MHgRJq/zNf62SQTrwWNBY1BTlLOjOHHeukzVB9Zww3QP&#xa;Zgtk2TGaOWY6iDmtoG5aaGF5abVOK9by+IBgNDbM/8K6DdFrXEfgYa4oKAl4VOEfovfoNfzfqR&#xa;1iCv7mqXGghuK7WlMvYId/6w4sFBoVWUXEI1K6+MZ1U+3PBXIXYUcmFmtFKhTAQbNnyCK5aZuB&#xa;s2ceFPlC6BucL8FEZJS2z4RDzlrMwoMQnm4RNx3APYwuo70nkQUs5SklgMM+5hUFMnevBOYVbo&#xa;nE33fQPvquS393eKnHMmyXyz2ytgAEdPPux+BexJZNbg71ijX2cW3i+MVI05wYxRNy0x+2d05d&#xa;9hbUZnvsdaUPsn7sX6Bpi0o1iYzk+ZwGYFno0hzc87wPd9ab328N+ZstgdPwoWy9eSSbaN4Bg/&#xa;VE+VcL2Afxfwve610k9C/fgxifhfDUoc/zuD0n8KDkxWvVBDVkP4u4WwVVuJpVbUtGymkOgvGq&#xa;ep5Y1CrCn5w4qCdpVNx9Wuf70W242dwofvckDz6gP4tXmgtognfXF2oPS7xE9Z7uSaDoPA88cv&#xa;N3ovs+Nv02N25o9/92vg8jE7Gw+3XfzizCr5CTeAy/b2luJdZG2ONxNlFXNy/JRwpYrT7ee6QP&#xa;mHsZKaq/k3ZzKdhSpjNrQsCQtD45osY9UGJP4KlS1XkiNVipns7aOErUOoNLYT1j/ts24ne5yp&#xa;OB1mUhDGgOTAtHkR0kC18HMlWxlEHuTItOPWhSSdbxG/KLJQ59ATy8wiM+mUi1dVwFTc+LLIDC&#xa;zpPLMN9W/yjSGCowdjIN9Aryj0IOECUxcxoOPCvxTMKs3ARireC9Rj+tG95cD80FOMyKOYN4wh&#xa;iGusgyQ3R4XEbdmgKwqKjUIdVkUUJZZBuMthweR0ko6v73DjvFPnrnXBSiGMJpu5NFJH33w8Ui&#xa;rAD/OZF/BcRxkb2aAbOYnGko2fVBtsKH4eo1H4ykqSUADTbNARVbX6D++8H32oBDsgOuDcVIfE&#xa;7hg0NItTkOuVkQsF0QH6tgU3aBYWXNpmprGXOCuJglIj53iTZJTadiBDuRpYTNZoQM+55gSUtr&#xa;Ui+st4aWTul/aVdZ1mYre8YStEndiDxIWBspVDYfXrhlNtTlKqGHqoEFlufDUWTDjt42TEumOQ&#xa;VapfAGa/ULX8tg9UyMmwMeUGiMB4iOk85o4VKhxGZAiUjE5LanwK54IgGi2Uj4b1Pf7ESoflLA&#xa;pksYz0uw6DQtQzlxSEF5Ke5ZHXZb9p55fpk+AhPwD3xFQNJypvq2yyFVnp0RXArydS/IJRNWjS&#xa;nyEQMixDpd2DkJynWczDx5GlEczU9oyUjxuIi1pwZ2TQHthItdfG6aSxDGsf9ajatAp3lkeVN1&#xa;Lfyp+5gcm00p9VOcvSuZV9AHXjQCXfeoDRRb3uFq3jLUz9FC3URzETJmLNF4m8tle4bVJ9uAqg&#xa;N7OkOeEZaYzwtYrQXAeP/QPjF3whk2yuRVK9yDxgT3Dnn8ZTeujdRdfXf8ozDv4iRUE5awB1ic&#xa;Y6eJSZIq8rrydwfv5O5VlMfIATZpOJh2QCjSoJb6LQ5+E8kTYIAUE2DZNmx2RdKqa887oh+IwL&#xa;U4gWZLVz//Hh5d4Tj+DLrySKniOvtJleejBJFFvWQOtOumdkiQGxgZkHTv2Kgm7iHTCD0byJjl&#xa;PrM3fQad9frS4ae7C62M9rttrcu+p/BYGE7qyLdph6CxF4qbTl0kSkt6onmAdTvS+FqXa7FNA7&#xa;NTHOzkR3oLVvGCJIShYnU4e5jKMECCSsi/PSWNgHSw5nvA6yO8zScXD27X+M9aJhXBwlW9putZ&#xa;HHfdZ8hN4vOKGLzoSSkYKhxtr/p23+TMD4/ZgkooIoZsJVUid58fK4Y5DBpODJpjLHE2dp0xEo&#xa;ZhdRF4hvvnUcS4CJfZeWJta4ETRyJn3JtkAn6PX+CCWjQ2pByCdd/F7hvo+1qLXqgSuJGn6h7g&#xa;HGvb5oLJaZcW7+BXcG9SliU7NfRvVLbqd3me0JChe/ymuyWKTkRYF1ARkjQ4g1yMxHme+9VfhH&#xa;8y7BF7T1FmEzShe6ZlDRP3drONDUAZ/KgrnekXcUTBx451fwT64lpredWG8QdcqoYAv/cMobnv&#xa;BWgxtUIWL1LQ7lLpDE/YVpD4vlgmDYp5RR7PNDPpds9+w+k4ydvORIYrfIVYaTfEXKCj1Qcm6K&#xa;0sF/oilZy9AcKVmLYhY8B3fwi74qYZZsS+u3Tn5sVXXf/SR7h6rzQT8RXRQ//9V5Jp/VXSd4N3&#xa;0bMkh7+LdPU9OM4Ymd8nErUHNIy8eNkVOw/AbpfbHmlaEWYUCsFUNzVQRNOEm5/Xze+ZmOLlae&#xa;pbs78Ob7nrYmb4f6++eUnC8aqTbyd348kd/vQmMSqP6//1SDA1EvntJ/2ObJ/9I2/x+pAet/r2&#xa;RV2lBF+T3DEY9IhIFo3oA4z6UPCAcjsdDMo3XwV4wCMhaRNjoEf1onYY3FG6c4S7wchT5yS3Dx&#xa;jzu/LU4+irl45pJQRCaCpMXjeb7kuF07Xh/k+vl9gPHD+xqeytDaj6Q3c8rJHj9MR/WlGrVJct&#xa;a08TTlrVUnLkilKNV57DzvZ4APzyo30lpZsGrMTxoyHd2IlxqcNl8aKrbcewtUcIz1jlenVdeN&#xa;JhZsHrIJnLjxxDCyWON7r7WYnvKwUEIjhhx4UBclSwKu7h5/20g8SMhM7xy0b+x43CaCYroA5t&#xa;IOLKuBJZIZB1HpEJGE8dXjOeiSh2bqpo4jzbkC40dQBkRDvdcI4SADLJvsmFzlcaWCViFARtXD&#xa;av0cVm1e4w2s4G3sm6wKWSJxoOzzrzXyFlzKLLKsJETBhgDRUqZ+93DCSzqMXwNLj3Ow0nXZox&#xa;qoqRtGZEWji5yBngzgIe1ZHIN/G0K4YPYFphzOxEHEzQvIEHLF2rhNtExsOypgdAV0cOl2VWBE&#xa;EGJ3iaqca6bZf6XuWybf8GvnuTIFAVL3jDsjkkeLBGnpxhOfNI0DOjLUPEOUDus6XtyaKfDnvu&#xa;SRqhmEhZN9Top/j7zZwnjOkSdi1TA9dlI4/CvpaUolFTYS2KlaDCPROi1Pr2mHPlJdzlU6rdkH&#xa;10l3wNoJzMMjt6R8Bgl5NXAh+KOpuxYzqzan/8kflx2KnhLQwkhyQLv5+MetlKo1uHAVAy1bbF&#xa;1redyouNRQRnv0TFh6p6LIqcN8VmGsUsXe7gG0hbOJJZs5xE2k9UA5H6TrcEytj2Ib8WmGoXHQ&#xa;ORM2/VJ06mlW1NsW3XG5Ca7hFLpdtkVajVnaLKtG1D5TYFl7PZucUuGvrFKHSqBxK56frG8OOe&#xa;ZMjV4pbWPJhTcdkimq9N5vxBGc6KQCIalX9x2Chwl1VltGF0em633kEGb60dYgDypUFWUBvC0m&#xa;Z3sI5lf+WRomFjUrTfhNhOYXjBgL3/ZqHB/BlFp1KYBMxkL7v5JBdEnTwBAXjNdfJAJkGnr01z&#xa;Bt4kHtHfRCAmGELv6GYE4wdw3BEqsOTcJvNItI6piab/xMqdPeMRQ5MSEEh0bJu2zqOjAX6fYT&#xa;hhBG9Q6ZMeHpRf9Aaimhgjep3KXGyqSUTE7bQzsyFW2As+keLBkK7JfCJptRRjtpw/WOb1AdWn&#xa;4L27OBz9zXJJCe3wtIJpeJSXcO97psC2Sj0sVIUl0UNmHk9z+dMedP2q6Xx3gqlf5wZpx7wH63&#xa;irMNZ+i6YJtLkHB2sds9Ettf7215tH6oRsAssdfcJG/kCmxoJFc9MUfNZ9XZBllE0YD9aABnna&#xa;tqfnatOPHqyCFCC1j/RgnHqqxjJUSC7wjeJti0uVw4va/tKXhy8AydOwe6/TyFrkfHgwGWIFvj&#xa;pnqz5JYh1d7P5htoizLdXsB+ciFdtBb/k1XWhX83jWBIu/0WCnxtD1+0foeG7FhmJCJArEINJP&#xa;9hXtzyo6YocGQNuRDfw5s4bZUxvP8vtJ3h/EaRceJ+4JZSEiqIfK681pI1G/C/UfbOMb4+Dbbv&#xa;bhvftm1rt7Hbtm3btnfbtm3btm3b7j6/d+ZM7rxzTu7NTSpPKvX/86lVK7VWZavuzNhkxO0DN8&#xa;DoHJ1yPw3s2Jtmqvk0Bnc0WFDUAVnTMpT80AI/VABZfDLO+xbEZV9QfArDH8zk2hjoe8G807T5&#xa;SEQi9/TfA4goDnz8ZmUgiZipcJsak7f7x2mMdyfgvL5KQr0iffDdfkS8bpSl/1WytKjQ7AuLRf&#xa;lfJUtiqhxCEP/AdhD6/w22GP9X2P7vB0vVodxwluKq40XSl1ut13i6hzGsImuL5tSIo2gPJME1&#xa;66OscZuNNEdxJCwX48FFFgakYmiQE0CBxdn747CRCNARkeCxA0kNq0nAbfUIg0Dja2Em6jvWiD&#xa;2N2ToytowSvio6TFmSRZo7Mb2/zp8qylWfzpWXKlY8jl5muGWFnD9ZE5bZ9QoXOhRDADYXV9I3&#xa;UZgfXYNSzDXLoY92WrKPoRse1az5ySl/045fSqQcT/2Yu5euTetIpY7WMC1wmMhI9Z+xpuoawf&#xa;inDky1Rg7NbS03pg5xFxO861r7WKaurhar/OtaVLwR2XWtan0NZdf5xyQ7AK46iX9L08Q0UZuk&#xa;HHEZAzEQbP8+sWHOrebi6bKJKIY2KRfSbv0Vxj7w4OyinTNlAsuYUvJlh7aGeJTivKRjNn4cyj&#xa;OblApybEwd39iKwtTASnPDV1zL1T9jTTfXcez216iHvJW6uG42CBQJLUIg62vJKqOyLezgqjeQ&#xa;du3HYFJIOR8rjCut0K0r5q03kbbWvoKuLHfypgE0sDJMlWWaDZd3SQ0lKXsqa4idvI0KRqSaKD&#xa;9iqxTgxbgO0hgaUhUZMhMlKaeg65iQEaYHFeTKBvJmGmuVzL81DooKOwEl6BZf1sKtMDXv/zFe&#xa;IrFUORPQoOqcUEoXfZiYraAK2QAs3DfM90sSvibD2v6uzKJkNi+koTE1J1SUwlEoC+lfMONYKj&#xa;8sYJInJrKolVjIXPFwp40Hx5tWpWgEJ6iMfS0RM17X+bOoJAJdvvAHWygrQlkB9w1buFE0Hclc&#xa;grBLJI9WqqKExAWJMOVvrLUUDDm4m7Ari00xM2XBtCRXarK0dOSVLi2vRbFKUjFX+Q1KcNc8hR&#xa;Sp/qBRi0CHcvpe7gt0Mey15kF+uxKVq1wKzPhI4XqAgYkbzP6mpGob1xZFXfq4EC1z0Xxo5tBp&#xa;P5P0ssmNKf1C8cJbnDNB+J2QLXeIMAumtweZzdXw6nVitthLGmUhJGhzynuuUIz5MBxPHfmcIb&#xa;wsktGHElZuasz7mcWcYLCjGgijUO/lcThayAUKsWveVVQRgy/ZWoWmyIFfdn0vIzmf3noUL7Ex&#xa;Sb6alwSNV3XMvFF42Nn8ZGwxzlr+LOuxbMbWQlgK/OsppwUPTDaqDudoo76Fjo6c+woP737BxV&#xa;kBg7RH7yYfL2404IDFbhGxyWUYx9ooj7koDcyHn+IRKkhALE92rJQsSjd9DYOndLakiE80vW1+&#xa;UnAeW9FFs5/pPSoxhTfQiadwhFkE+9nd5qj508w+HJEup2Dm47ThEay4faFNSZQFVVIjA14tRM&#xa;7qcikhefQVad6TxViP5yoVjXxJWLH+kFc1JRI1IvQoNojoZT7F2wnBW1iFRTf910Ik4zQajqXO&#xa;O1V0j5SALK5ZOCmTeVK3jL7+e8gsvZ8gGidQ1yNiZ11zsU6ebdTDLTx1MKK96+0Gr0dqNzFzFv&#xa;GUgPm0sNXK0vLyIpWT2PZMgkkcS0QRh2466bwWgTTYQjzQhETxSsiA/Npqus/CpagbqeFZeinH&#xa;KSyVEyy2i70TwZYcehludY02Fm4tVjw0rqgA5xaelfPiFmvqYHo2V5GcPYOOB5Bn9JkHdmUTtH&#xa;dKXObpR1jI+AT5dd9RwtoeKT6PLL3hXirFdu5sDgPtHzYL1sWNnsCm5xu9hC/FU9RQFqh5vqH+&#xa;WdxFbAvB5x1+buguuuE2xDEGq/62OFhfUL4acbJ31Pe63GSJBql0CfPLBiYKaWdWSTJY6s6Srj&#xa;VJX7IBQvNkZloNPj24YbbKG0ZPBKtbWhffizg79BLFuRBS6C+w6DNS99Ja6XZeqwfKxxSpBWFS&#xa;LmhNfZdT0hsK68sqi3labW6t9ymPGACESfvXso2GC5Kws3GPIAcidI2R46KFuy3FMkON4pF5PA&#xa;e1x949at1grHsUofLaOTAvR9FCtPlV4ox/NBCzcQ5wSjuxzrtpKlt5SdVWMfHjZFJwRabEj0TP&#xa;/VzPbI9+iA5xlhD0qfPfrRDmNw0XM01lf/kkH+kfQsBXjph6tL+cClxql3X4sBQ05aKAw82U6n&#xa;xZazp5xfSKtFK332pA8KDtaY9wwk/fNukllVYGO7qdRzl+hjZvc435AF1TirS1onzfNIho97Rh&#xa;sM7HWcPZWg0uYHpSWA29YJ+6LiZUMfHGNVFXg0IS7b7H/SvhrPsiZqNIQLMfOiX8nCIbhfI+i3&#xa;NTV/03f/w4lexIsJ8pgd4RcJxqiyr64504lXv2WINQYXF8jkmBl2FmX5JiF6O7Ox0wSUW5445F&#xa;qllKeZlun1L2DBD+zAHY9CCHsrJOGBcEInv9YmNczy5YUkKlTKbsVAzTpnqQrwy/A72u3fBH7x&#xa;oJfdLMCUyJPRi9cPXlTM9OZt47X1aokkOSFOZg4tkn5cqn75NIb5Bb26S6oa4x9fzH0yGrG0p5&#xa;wt/TspVJx4fXOs89+IYZLOovpeqDMLdZ6CSTeZqzpYpCjq6I3fmLAvuP6gqHqk2TCLcrSlS5hv&#xa;DMqYuhvZaTGu3hotgDOF6b3Qh7lyHG+hUo683olorOODaoavkiRzP/sA2tAEs9XQ/xO3olaHbB&#xa;VoYpMVO96r/tf4PMh95rcxVKChwavLuO0VBw1dOBeHhmzfDTYoFMSLly7+m2KRev3BdVrsPStN&#xa;V3/wB5JgscdXWKrnIB2tVdlC6gDLlt6aCSVs2S6E+8+92ChfwmWnVTsu4h5do21IdCe+XbvDOs&#xa;rNleRsVQSBjKefRGf1Edq5dgGRZshkw4eCcZThupnqRNtbIWSIbLnTsp4SVaJoQiu4ecRpA+ul&#xa;1y0oiMuSh3L6dRJ4myJe8cq7CjPlPusLRfFBbTqw3o00LqSu59QX8hPemNiw0/lebdOs/SlE0Q&#xa;lt/yM0pMYsm9EttZQtY3k3pE7TXzBvMVz974SQ8zmwfzRS/odz18jbYlqFjJvZqo7zNEwyB6IQ&#xa;3jdIK78gTbAqXkiTKeWCNGLD31y0H7YjU76aZHFv6uJU2WEAzk6kuVGTY83Y6iW+4AbM0YRFdM&#xa;qQnszWyUI2CWsSj9EE3+DtO0osHky73lkRLmaqH8NP5I5ii89c5tmqS1VxxBQfiFfaH8ainHo3&#xa;9pO6E2Fgl2gfGe278Te8vwXhntr4Zvhj/oDUxJFCfMd8meEOYFSlEYS1bYo4YD8wW/WTMrw1BV&#xa;nkniL/usPnKsSS5sFTWOiRevxjeIwvEh3vl52CoxMHaZgPrymRgTc7sgdZJJpujuDhoyFFLqBQ&#xa;sYKviMHI+5O8g/bnAjFVIKv67seq7sqbiD+TTATOy9KmShGt9fdtrDHI+6LBm8txfU8RHnnpIa&#xa;M1VIkr2Hwu+ZbK3NZBNZtVgvlBbZQWNOON3KlEijpD+Yr3fbNKoqPpKDFd0rvvcPss+5Wwu14q&#xa;x6Eey9GJX6xPqZHalB+uw7OOSrWhvkfDkvS91GZnORBFHOMIQq+M28ali4CdANTRMXhmsDzL4p&#xa;CeEFgJXi8ASPH3JlehU27LGgl9NlXvdj0tGgszv6ZxKxLlqdJkCD3aKlCzoC2SbaxvgZx+9Zu0&#xa;XDeTvAj22h3aNLTNjuM2CE0C38QgcVNbujUG4EjVEwvrjXe1lA0drGnC8nXhoprQ5b9gDGw9QC&#xa;3Oo5Gbs0ksgRFVQAk2J0USDNq4gGyM5RYZdVLS3jF0hyNzazyFEpZQAX5VqAKiNnT7knasbMPR&#xa;twykxp85/OmfRUPYF39jdR74KpcrFzBhkmNI+IFHRM5CkC/511BkeZ1Uabe47KGwc2DmgnkgNf&#xa;TAJUYZdOGy6CJNLvDqixIN3iEheEiZyle45duKdyD73IuYtFmAKyQoeePw3bPhQZ659wsAqDvH&#xa;qEZgajGb7+UlGGZ8f4ErVoPB7r3ZTX2WLXmX6t1nzUKtLr92yP6Hylmzw4yTFoS+qbop+C3/fT&#xa;h2FVxCh66L5AGmvUoldNNOWNOljzZeurv0Nr5h04ZVkXIXSwduDZ5gHeU788whCy8un4wUS1iy&#xa;UJjkVa4x5tEYesnSXvWEGq+x/vKjmHYBiBSyjWaeEB8zYBV7bRSpY5jcJmLau5yp0HKno2ETQt&#xa;Tw4jQ/J+bTz5W4D5a9BvOm7XDpZs+XcDKDzrI4qtk0mXUDicZaSNqGuIARDAlWWzZeQ8m+B6YN&#xa;zBo13K8ygkD9Y8Hsi7/T/6PHlCia7DGmMWB3xqNXK6sah5hwcqm9gtu/+BJbvATeQ2UqTRtNFU&#xa;25B358g9mlt7CEhWdMzx0UC17rkrmi7GJd8wSCaanHIs/nNXCelq6S6xSH18ZVj+exaI3AF+h1&#xa;KLlDWllWpUcB3bptY5kTMhM1Z8+/KUas6HiDn8J2fcJXjqeRlzdfwy1w0b7ZUSmDh3VV8fez4q&#xa;KocQVGB9hv9WRujjwc81slcFHeXmOICksAu9bFrTXt1l6CZiEcGBevplhpeEl8rC9UvRw9c4dK&#xa;E/X/lx5RRV0Xuu7ZHt1J1iDH+WfpY6L8EL+4vWo8gq4Ptm9uFe8JHii8cDukcS8x3icfyVrTHG&#xa;Jw1m/AqSF6Gq+MGMdv0psRjuEZpoH3VdombBxCMh/dTaotDVDLkrNPXNj24P5WpXtDRtpwTtm7&#xa;ZJIKU5n2r9d8IZ/lnOZi9ucxPxOtFeOSrYiJRcVlNv+GZ2zHxPjxg9GshVbBAn98x7+9+IDZGz&#xa;HpGzlmhrdnqXjPpm/hvXx57aqEcfhDTh2X0EqWo0kFoSKk8NUo0gEuCS4nEKyVo8PPIm3v8Y2Z&#xa;I4ZVrjOqrnxs94gCWJ5NTyXvO3ikxL04L0zE4s0W2pmE/iqaR6YBaBJhq3xImmfAhxqOj6n9kE&#xa;7pK2d5KkiVOKnIUlr6ATJfyjByOHgHQYR2StXy7q/dxCIrUXxvc457Aue7EDQOTE6iHCnavGs1&#xa;rhRX0Wszgudycnz9x+uC0/mkBrkgFLeYadk4Jr5lSOx2kIRGkizqPR9s720VSJG+3hCcE8h6M0&#xa;CR+5kioIRB/YlFZdIMqL41oCVtW8/RXlXI5jNaROQaqhl9JJP/JVY9LyB3SWYxQ11NhHki5/DB&#xa;YA20iXmVOad9ta1j22NdeTdO6i0a5oNBSsNFDRdpZoW8NcMLlceM5zHe6yQI/G6shOd93Ap9QN&#xa;pxXQ48sN9TX7eOhXoUCkwF19wifRdjcY/nEbMiNORX3CxJs5QwgomT/pNJwydeHbDP0mLvZjAZ&#xa;dnNB3ByD5E7ZvqmbIWvi2fFoEW+zBR/FXrMwO4/NZFOQi/tA5PEEAqnx+efkX5fFP8Scix/bV6&#xa;eYINtP7lhfwnFITOsTfJ5xv0z+JMDnDYx5uKHyHfDnztzozrL9iPNzq/jM9PTL+Mr08OP82vTz&#xa;C/jc9PUr+NrLFrJ/AbB7FrF7uXjzcdP4jPT1Q/CNzxkU8vvt4Dn2+qXmT4gQT46zCQbIfeBXj2&#xa;cz8ARCTnLhyfL+4uLUTn1Ykt8Oei+tzM5ydi78zXJ62fa2af69entd/L56fZiP5Ka2tda7Ouwc&#xa;q6GLOPD/CbGQTSyN6BVyFMm0VQTHsG4c+N65kqZwb/PxvNeIo52nqB16cwwyW7+DoFX8sBe4yL&#xa;/5P7oO4t5Xc2c2D/zgnyNazkVuoKwTlEaHrMQ4V2WDmbyKsoPbvOH9LP9Kzv7XjkmM7/jG/Yw2&#xa;mV6SH++pVG9N9dCmo1Tpn/7lJw/JtLIWfraO5kbmsjbuNk7GDnYPzPl0TX1NhJwFbfwUhEWOZ/&#xa;pDqyVCw1kUVRfMihrCCpdwPW3YaSBWww+iRp82kL9eL8lkEp1lm144FUBmzaO+6WP5SvrtAfLX&#xa;sUrQEXCxMl79xf0rzWM5d0GEZ3/j4czFyOdDeZ7jNpXx85ur4QdqA7zDhjk44T4xmZJTPYySaW&#xa;Ibz5G5uVqZlGovrRG4EhFskhocMwQ/X6ytLbxP6MjdNpIfZPIu2V545nkR3EhKOxTJNtTnMUd+&#xa;5NFkU8tA3lG+vAsjl7nGzKGSkqtOcYLh9CvIdYTJeeZH+g9EOGsWJhrevcnus9lJ3jsjLaJiOe&#xa;xTEBLExBpipLLsaWCHb+Mw4JF8I+8f7msLS4yVXrGoyKKrSWQjm/MZDUdwLv1pjACJTOlLXvCV&#xa;GhD/VpBLfpmBZfLNtNckxSw6pCjxv2Y6wCj15JBp7hJfhFaFMc06cgpBSLBp+G91M+CT1d5Um8&#xa;JShkazAUkl0MVEGBuEdmmyhL78QxrVdx+SE9jawEFUHUbxLmLqfhGYIu3acM2JO/8IUKhFhRI6&#xa;muYk6d8J00wI15IA3+8AvZ81FukQrihOctnMDyHkIqMP6BzH+C3yGRFGMAhcqPRMEiFsvPyPOU&#xa;HEuKLTZCwdUiZ03R5MN6yW0BhNoL9cJBAlAstQ2uSEMaMg5WTAS7aDafwykIQ/xEyqy981Ny2K&#xa;Isz6XSZEQm4eUdRDCeq2MXWZW30n9PBpOTytJxzZGe/haLBjV0lImKstd0tggllGjS9ASq0HQa&#xa;oZUVTGSQQqUNu8Fqqab0WpEavsAI34WdZnrkvuh2EFasWA1ks6JjAZewGDqjUw+xznexZCDzFj&#xa;+K0RhmnxZmCHlg0qjVThwEC1k1wQ4P4g7sdBBogcv6W8Vl5PWQJT5MUkyU2ptRfaBcykRnIGal&#xa;lZ9+QVFtTfphIRC/4TSd2mTJdTwdnT929nfFKVcAwXqQbin12Epx4SQzhDSjU0ElwkuNmZYLNi&#xa;kvehZ2tlHM1QK72gJD6ZZQsmNsIJU4SWJJPu978xg9bs/NKlDLSikpOmvh1/kyw2QUPX+KfG9H&#xa;QAPqeammK22fV3lSu+pxBtqcxBUkjZJxZ5QrqGY146W7yDXpZtguWbuxFr967qcfZyo+H+4OPt&#xa;RWDGVMeUbVgKYvPu+QKRzorSP0wUbdWTvToUyjeeAlubIiMi0RPWgSEqrX3Xiqxl13RkP69EgF&#xa;DPPmo0o++uZuQnrRXL9fNXa+KAYnajZ3viK5/f3IWYO7GLo8pbPQvnvBIOIYprKiXflkmTvYqX&#xa;R+yy9nWqA7BiAWVi5DoUWiKNfc3KW3YitkMCyxHjguMR9hXZhHkiDzSw2Rxhq6OKmtke3r7ncz&#xa;7/xbmGfRi5L8PF5KqvCa51KWpwQ3PruIQ/nFuMtBfm56PLT0Lj/4deQGdHM0OxNghdk0KDlgqt&#xa;+i9I8IoFxCByTBeJKUdduJSDfSn5FfkuxCglxwCHYsYUYSHCKeI54JCHZEv2QzYfW5ix75jGev&#xa;rKSc6fcRTpo6pBXAP9DdgbT6qVsFEzwEEPtrHaOz4Oc/zznu2Y8yA8N9KRHOzLGCVZAJpzyAti&#xa;D9yQGHSZAtm6ii7TqYOluzqh/J3s7xNX4HFTkie5IuXnWkRsvufytfUO64va+MDfxGAf2WGPeI&#xa;8B46HUiSGMrAfESZasPYEa5xE2T4/3oVxtCD0xOh7RBpW8Ppz5ZLKqqZR6QKFLIQqwVFdg/JVm&#xa;CYJ0HeYGKalkA4NWn8SKJ6/EiSe/zX+FFmbrIe5VKrqdssIWytoPor3DBFntsNYaU5aWxrTEVE&#xa;NufXhPs5Jr3MJV31T/AVScrtd44RwzvkOBMvjndYxoLR+xiPVsmgbx2424Yhi7jSA7/XQeFoVy&#xa;F9WUA3Kh94IdEBF3nT/H9EJvzX/VDcwH79Uv+3yARUA++/4Z34/wvv/wnyJk4YPaWlOuaPrrVN&#xa;kowO0NZPUKC1y9DgJgISAjJGgmNJJDVgg00rVqMxE7ZLm1c1649SjaqvdYuIL/Uq6YoqYTmxQh&#xa;8LzaafdQ3JH/wP7ytP652LC1H346lMR7a1IGzY7heCtLYTZkeT48nJNMfdihreZ9BfWn97BNXU&#xa;VtBnTLiY7txKf2dJHyKdLS4r0WVjTg5CcQIBNj/yIfLzjFia2Bbnu+jxJjj6/jK42pJl8dqpPd&#xa;sCdt7kufq5kU2oScEE5o7fj6vfi5ejZUCr7KleLECTyBtdFxudray3A/SKyJyH89e0mLYBU5dR&#xa;J2LlbuW/06dMCsq0uisK6dMvrSXww1ZIF+p8QD1psqRMEbVAFle4WWZxS0Tm9O7tvje2s6JNPM&#xa;JW6q3o0iUHz+MH7S3L2aJ2LaVMn0MMzrLddJ0osJkSpwY9E0iIzlCxciTvOTvawwQVcYGv81HB&#xa;99tKMURSF9TMios/f82xs5IohG8eQaJuO0rLtYHkeWFSKqNLk20gt7lJkyGTTgR3JXVMgWFLHC&#xa;GB3MlFHifsHeRx6zdBP+j7w9DUxsKeVW3mBcCjt/WCRwCWjRW2Pj46FNNmc+/IG6dfNyw+oZp+&#xa;r9hYllrbaHrZ2Q80f39FBEao0upU9Q5RoQjKA+60Q/QOAGB08vxJ3jr1QnJAOdCk9cR/3qXMxm&#xa;TqUrosSdeu/7BwoNieCadebWmsuU2TKOihVrrwQ/ZTJUrY2BI8Q6CqVQikXaqVBGj6KJfJ0fWw&#xa;ElC4f6EQCFK7k6K2BmjwH8QANy2OX1T0Ji2OU1f1mgQtnTC7edIkYEwu4U0PuYtIyzrJBU0pHz&#xa;rXSXGnR7CR1R+mT3R1SLuou8AdIY0hyhIr14SAo1sFi6CylIFxdIfi5mmzmy0EmZ5tj5t7SQar&#xa;rA5zbRf346ROaHFWotz4IXYS7NgLgOaldlyEMKW5/X1s7d9g195Ula3Q00+BzqqtwHDpt3HI0N&#xa;INYGkrvevkCDMYWseWBUw6xOoaoNGZiIOinIpQRBRBgBekuTlyqvb4UqQLqen39wYd0aF6EExn&#xa;8FeXXengatFnmsu1ilzg9QB7D154PW/OZ0+QKHi2wMOSZdXaKuAlEcsQ2M9W/KJWxcyP4bdQpf&#xa;pTVjY/qQ/dQRJhgTnLgf44gEiKenMduOUZNsB/z3dz/f0FtxHg+blYvCl/uYUL96zdruLSGVef&#xa;85KO990ZFzDbYU7ApeReBWxLBoVGfUufOOyBXJbNCt0nCJlhYtIA7DvNoF9KmR7xFI7hQ7052N&#xa;yZhhs3jYLtmQTdIpDovcc6fe2QM0hWZtfB8sWlBke5LoEf/kSXr0XTvT0QSUNlXQ+Z8GK/MN4r&#xa;Yn4lUJh1mdnSD6GWi8BEzgUCcbXRPlvY0/geKl4d7lTaK0qOUxWn3UafrrCHVzYwkhaV4N+fG+&#xa;YPs3eOCcVhWBeqfinLeGMAThWIBF4EO47RipnIPIvhhjFpINenxxrIAXvMNIs5aciQ0wcMDoNJ&#xa;Y2AHCByCTWZoTe1TAHfCYNfoWLdIxx4t0+iw0LRYr0bRnnri4mKfcllaanRlWU7ganZZYmtZbm&#xa;xZYVn4o265ovw7KiNDw2Vx5XfzIqBpfX2o6vhKuunJejCgK27GSmqWXnihHIYHMutWmjOm5E6O&#xa;3CsD6SrImOud6Sxw7prkqPdGjiKMk5BmPFZdJwFXbyllQV4nFXtjv8teIp3R4M47es6djh2EL1&#xa;esxKq6P2bXc/ObUVGnXw8sgFRM/ehkM/fB8ck9Yb++2j6u3WDMyYUCWfcqKAWxeWaySgosq1rz&#xa;OFW3Y1f1Fju5WiH4opCz56Q4hpWksBff3DNYrl/KsXhP2JEyh9NjXqskjlEFTJXyFn9yWFbwC/&#xa;oTnZTs/PC6x5FNGV6saWjiE7eQNH+rLtvtZpsX7DujozSglCcH/xAeQcG3nFx8jMnJuJONM3HS&#xa;WU5XlCx9/LmYGUS+uTIBDaiJK0tmuKDsquz6Mc/8vF6bSmP2XEBonJm9NDcwGJJRbUjvdyCD9V&#xa;GfDZgwos74LhzsMkNuehGwieK4AJz+0RvJzAqKwYpnQd0rJ/l0vmMPeZzxyGXeX4IlwWO6UqjS&#xa;bmIg0wMcdJVcyIMJjH814/GjguxVYWNYGdlxBErDVuvJCRpkncSy8c3bcxTho/hoTeRG9yXBnm&#xa;NamdQG9ynDNjO1pvMHQtPbEajFWplgI9Lp40sNGgZp85xxVr+aH5ChxjQ5pGS6YaZEdkCDMYW0&#xa;Gg0+0WmFCuyIgEvDpmM2xiJXFfJ99emJ8FeDMiuBPSvGBAi8qoBviOHdFAsVBWS8AfepC2QGU+&#xa;mQznNCk65jNDIjoi673IeDg2m+ekKAlOfUSve5CDQuu1yvj+Um9NGBK4HvsYK5Prz81kKKs1Vw&#xa;kDLKOAh1iOOV0Gr0Itr4o2Im+2g30Aoe7k5apX0nGPj2+SecCk0aqmAutX8F4gw9W5xjohSpDk&#xa;IcgB1qCKUrDP05aqthKK1obYBPtkrwoXTbS/NsVW7RydzFwxE3qPKQP96xInLDMa8y/clZvE9w&#xa;7aqPxRx/11pKdVxKVwxElYh22DR29PDHTJIbdUaub1uQw+K7bYAIVnHO6CmRhW96O1zJqGzNLY&#xa;/wxL2kDkv3dlHo/E87n0yW91k2pXKE/NbU6evJLabHVMC+AHu5G3F3EUaNKBVIxFhQVdqjHncC&#xa;F3fR+3RKrsnSi+Wi3kJC+atKZ9pKd/DyNFp1l4EJONFEtW9X8WreftWri86XC3QuXF1ha0HFLp&#xa;IymcJbm54FI/uZRuRNXkMULFn0H9HlVwpk9Lf+kYj6y0U8hL53Rx0WbvUGHba+CjI+59aGE6fw&#xa;1xQEAgmXz4Yg4vxdjkISrrYpwALnnUD/t9asUXbT/VSQO1ZO0YRBQg4lGlpqsgHLYvb1FGryr4&#xa;aUsY67wpWo6qXMGekadmgt0TLGjFbe6l2GLEQSYWmZPlnFEz0HiordQC8r2PDpGYW/k4MQCU56&#xa;yyQJ0D7RQlNFpNRg+MXLv5J+hfcd6oPJIgaiHKmD4Rdtpkliy8JDZxP5gISjNOAduRYacQpL5h&#xa;Sf3ZlVyvaNnFnqcsYp3IqDrSDNqHEmRZApsPyYO2xoeXwQcNBeMch7izuxFCMcc2XL74JxVpw9&#xa;qtxSK8mlY4LoV7mmZ7Jp+1OfDq51iw7J7n5lopXuw+myI5P7eEo0jhX+3npC7jnoP7nroNqOeL&#xa;FP9YpBOnXH6Q3fcSVM6qbygeuZVviOzVDC3CjobP/L52+LBhjIif/JSGwzem9nyQkyjgpP3GvB&#xa;1QLcGRqks6wDpkharZ2S5fJQLmz/wmNZd0lT9RDHScuJSlMlTYcTxd43tf8WDvWbZZWRVvX0oE&#xa;COsJUhOagNskljLUfClZMYYtDmeosfDPe/yftEI6u12EUCScFqney1AUnBVjO8dLkbE39lrYaD&#xa;wt9zxb42jbiXjlguggHVzvTtq2EnCZXomonqzSfboVTLp7WGf2/HCz7qC2vOHy/eaJUv2yBK7x&#xa;mv3mhDXbwCXGiIBhuC0h09p0OLCnVUjpdxtTXpuIpYWSZBD2FUVcuVaivJGzWyqaAIb44f6F00&#xa;WmSsc1lrSHuWaFdY3jgx2DHJYbTiavDwlzQXeYOml2u1R5RpOqkOuiKtV/x9MrCxXYkgBrIWXT&#xa;3BD7asRHRPpfXvObRkVDfyc+KCK3pF2hEvg7ulufS3fPv6290+qkNRaR/XCN4ptExBxi2xbJa4&#xa;bAYNaQk6ijXPkMTPGqyfSoA53L6so4/PFpwlvTeLO48Cr7ClvofDNmS0YEWy0AmviHImPI/yzw&#xa;gxb04wJ1t0jTX4+INaXtE5w2BQGu2091ciGLfAKED4EETU/eNLwwr0GS8Y6ScIhkRtYdT89IYF&#xa;dMmahALkn00VhBwk2F+zcWtzj84DB1yshuWiKedpfcbjyrTruUHnI/hfAxaVdsMHGr42QbhR0K&#xa;o/zIWHS1moI09iLinsmWw5My4iaxegRjfoIFZ3SZMcOORQrwYdoTxo0La+JUM5rqmWSEwzDkA7&#xa;goxwCBLmIBIKv7sntoPpQHtb3Oj3uKPo3AJWWa8CuJ3Iwx6vNE6Q4nYWVmwRtvVktPWktMUwKz&#xa;gnpZYNXkaXTebus3f2lAvRA0KWJYkGZvn6OHO3MOHNXAGAGfzgApXaIz6zND8XNjjfUrtVXl6r&#xa;sAcA2onhwb5S0nmRQ9n8j+xC0plxob160FG5w4UNdPT9X4e5UoqYU5sWoseeF4pPktwtUQmvfL&#xa;lwPxdfNdcYS6o/SWizvJhkcZpOLdVR/SXWiHO/2/xEX+S4p8pTSbFQG4jaR7QTdQnQZvFywfBY&#xa;zKLAeJGXeQyIgddNB9JzsA1IDTSVAbN44zVK+pVK/NxcFSYQjTPBHaDapknk+TPRsDFbRR1cFc&#xa;egjYYHINdhvKHgaKCNoeZ7B8HpZ9d+LgYG+YtW1byqJuFth4QxiGMFiuIyMqRzztrHhlliMoCx&#xa;UaX4uTKSh0d3JsUp4viRsEOWLx8fqrUDxVGhAotuXl2j3968c7z8TrLzN4qK5j16Eh1/dAkcsr&#xa;v9zHLI2unrrStGcJOwLpomhGjYrQf0sE3Vm+R0KeoLum8xuMdk616pxzUicl9pJu37W4YZoEhl&#xa;atn7RGjt+v2Q38FoPt2zfX7p+HfRC75g4AavWyrelu0esum6oVYjO1q/QpP8ADmO2MHRdCKCD6&#xa;vuISjekHAPx+T8aOqojMGMnNaSb7DvdRCd3RQ4bomMT+f1RJwu+qI33QS93eqrQb7MUb78yvpG&#xa;GEByGlDQgp+wR9AKwFTzZ/NH+IEEkoQJouHSTyIFqaAdIbDCDJasiqodfjdRs+SBT1H3hbuwkt&#xa;TrskawQoSYeNLiWuWN5VM8k8wue7Bm6005nQBv2VB6ZfJe24PPwM3Oo4e4uqtwekeLU3hR+4Gf&#xa;mUsBHljmG1A9rYDEq//G65ZYDSZdbhlYOa1Yrd9SgNEtoW85ItmE3MmlR6i6B/aaKTVAQ4aAgG&#xa;KYPGnW9ZQXqrMbWLAzUV2hfNVX/FMY6dXAgQGVHZTz2pQTAhI0pBT32+WfaXh17imZ66JPX3iU&#xa;LH/P80StDRdcz/njP9pA8VaTkQ7DWWXta/3m3h7RC3raKSvIN2pWnpXbZbHmi7928VsaEYX9tz&#xa;XcWr+sz24Q8+MDNMlwaSf16tyaEQe2FhBMLrjF2Q1eaQHuFlHlTQHA7wPuYiZwY29nT1bpSEkg&#xa;vvKJvLaf7vyrYRUiqOcQwfuitJKGtiVMEH8ozbdG90MWEJHt97xSK/uRQVMSssfa8xzz2ctnvp&#xa;v02avXrbWKPTsd0qQKsq62apuV2CE664Pyl/sUB5x2l79IL5M1lwAoccFMnp2ikg22aNEBk5bV&#xa;i3ktu/3vAB6NPlEaaaSBE89aKriksEMaa4nTX6VB5Il+0E1maWERwpa4vwAiatP6383iUitC0Q&#xa;UnNnKicj3YOAO3jOlsMSupM3pAgcGwaIytYX0G4JIYWpP/KmjW36GozkX6Hm39M/82vJGkuN5H&#xa;efVbcX1JAaiAQreaKwaIW5za3b1NApwX3AccCJwfnBozCKPSoJazckC88/FHi4rqpFBJQp8hM6&#xa;S+oTYzQN+mNi1+Q13tz63FuzdmpmEtOA6yOnIxyWKZIPLbnXNcVrAF40GgCEW0vBIH+czRGQO4&#xa;Kwq4Jar2nNWs2N6SlHgrWLIgdWWQtR1H4wDaqR9bn4tbbPnNCQXKD/AWRhCGTQj7d7CPLpIqc7&#xa;u9ps14ieKE9Ct4nIytHyLuH2EWi76mg6aPCachyiL1rP3zZNc9QGXxan7XBuJzBOT8N5mnMDTM&#xa;39hDuw0z2Am7jk2z8POM9YzVBWrnDzeMA8ytZISTdH07t1qZxFPW40lhToA25nJW0LnwcxI1pY&#xa;2pPrf9kvkE+oyLvIaHHcxKcn3AYEV4VmQVlamQ69+kmqKLZAEv7FVi7BJTG0j2uQpqEUDJbVRV&#xa;WGlGqvDDI81rfjE6ppJwSJPYwbJ+raVvhQPgidVkjhWEkgJ9lX3glC4wxzJAN7R2N7rcYB9VP4&#xa;RLNyFPMU+m2/5BWOCW2iTDlemJrk5TsRB18MB7xW6Hmun9VIMoQizJ8TZ9uhxpv47c122ssDgF&#xa;RYhMmTBCJ5j6NbXf+dGxKUyGvk+DSmX4tFd+OFBwGnEH5LHPreR0dGTzUfEqWJHSyVUw7k0LKE&#xa;pvqoHnRmnjVcmA6+LTkZb5kCPO4HOXc2bQUdi7ag1snq4KAJ6NMHRSwuEah4koVTcOS0GDPshn&#xa;m+feFIJ0bjmfWTEyaUZWtp9GGHckoJq26nBzMQtGr4au33wPs2RSfKEGg2aPjhN8wOLVPcX34i&#xa;UZ6/8St/CycJYcpLPvBFK4ayI2gDnaO0MYIUkYmsUQ9M9v/irLblQWwvb34YqKk70PCZNvh8it&#xa;in1nnDajTjLTVkcSsgYZzDJhKFje3p49UtawpZUdp08+8m6oz/rgJ9mEe31pfm9S1pPai9y+xq&#xa;QNH2UH8hmfKxok6ts0L9JTlGFjzQ0Y4pP8rpdxWWwRW1iPkgcGj7x4a/QnU7SE+gEGwNbtMpV3&#xa;2Nr1gFmLG/HKKSvwUVCb5Ul2iuunmeXG863RzbrPj8UO+mdyO4wNY5JFkD10RvbxkxuC7MF2kA&#xa;3zwblaADIldtX2+Q2kwG0QfKSY0JNae5NkTasabjWGdI2ie4qTdqnKbaMxomsAvJgpIOAGx5f0&#xa;CN1Ixyq5ubHPFXjnKsLttivqG/nWp8fNz+hjk9+VuU2szc0QrPahYSFIyojbRObW20mckXH5Pl&#xa;T6uHsn0boIc4Nrak0lva5rItF6NvIKYnINfGrVZzbxCou5WXRqrZrR0LOFcuPJxIrPaNqlC3MD&#xa;IaO+itXwA+DYvPTPmsW4SwHmRkxaw5bZ8DOeYjPtP2s2081HOM026D+aKY8OE8woWIPL96myG3&#xa;t9ss0fjS3ut4pB17GnMgi8f07pwq+TTwWRtsjnyEnadwJzCB/FEXiFToEQ8Igfc3E+IiFikN8r&#xa;IfAJH2Mz7zkQskmcpPJDjyYPkLJis2JGlwuQshKzSowshfLl195SIUQhs5KzclJO7Tmeg3A8FV&#xa;x4SefQD1cX8LwiZ9GLjOg9bh+CfKicf9Iy3yQRePlPXeN3EfC8/s7q8ryCCfwknlZC9IiZSSG6&#xa;yTEyKBfqmlze7zZERgwZOEWhF+drts+5RCydHVs/zjDfeoHQM9wKgNAz3QqD61jtkoJ3r/ZKwn&#xa;VOBs4wPmNdSYB8wF6y2fX28oPUsNiN9lbAdq73YsN2sWJ56Ng0skE5ziqPBeoaa9muFvBbcWvb&#xa;RrokzNmwrm9EumTMRWNcZYl0LNSu0IHc7NECvqV5v35/tse10aPR8/9q4HmFa/f+Pcv/VrXw6l&#xa;VicpfVjx499vbp+xn15swE3uuJo+sFPg6VPYjPLQwKNxPAGsBnwR5lyhn+OEJ+K7xD/NogbnpR&#xa;2SB3PnhC+ehDDI8M6jP8xZF4YOv/0zb/xvcvn7id+Y5tBfXXL65/a3Erqvt3n5js33xiGVsn/X&#xa;/5xCS6jsZO/0eTm6YqsirGFjko+AAku5t5+bKkvOAv4salZDPqYglKoCQ5mvV0+D0STCjmM6Pb&#xa;+Yyml+/YbsUrgcqKKlnnpp6xJZectF/hQhUIHI7Hk65rO9905L4/Dxc3v3T6EIA9FYXVy6TaFM&#xa;jIcGYeaUaup1UKU6aSMsfzqSFYIP2rAy7YVW1JJIq1xQoD6LHSQd9xWmJHORzrzehUkJQpXeee&#xa;K8HSMOKanaRlp6vMWWCcKts5cMRgMLAJzcxQzYhg/QPrHlEfyjFbp92qjdHjeX6LmprWjGamLA&#xa;L4M/6YugqrjxZJmBQxWZzg+ru1E4qk0cvHdCNZ1osD0WYUBd8l+rVSzDps1tPeSPsL1kXhsWU/&#xa;SsFYndGJ0RsnS2BOJAxUWzL19qnNFA0TlAsdUejmeRkox+056VuCElot1IGJgOpfIkJ6ClcQ1f&#xa;J9+Yobklypm84lXJdKC1xmkkxhA8E0GieN7SbdTXNA9xkW1oisiPm+cMY7wgsSxMtn2ExUH5br&#xa;1/T2LhDNHGpVXGa174mTMnKbJns3fQHHZarfFWeWYRsb8D07fX/Bslb/tcEJ2zXGQTGjVQVqJh&#xa;oWcO8sZRkEc4kdBODr6+1mXiQWXTCGJswEEGhvkDW5xMNZuGmI4r+jtg5IX4qUBlct/2gF5+vL&#xa;6ZVwVjuzEa3EXriheq6vXtTUeSVmRhv29V2M64vRXh7EDj1GXFw+OucqCq+0mUwnnwbR1v5erv&#xa;3lUjV82VasPcZ13e+xkfCdUiuqfEeJpRIVd5fhqOVRLJv6J1HFUlzzI7FSUn5XZgCzWP5JNXdT&#xa;GYJSbuEOXoQYo68DOEP5ZZn9wlptKWrrQsxQi9RUYMSk0dYA8QTUYIZTgkUK+rRCLpDfiWg51y&#xa;jHnfUstd8TYMSAi6ETWH7gnamCb7L6uNX2PtfQMUw6RcYks52R6H4mMQ3q0NnFdSJxXG5jYAzx&#xa;SuhSJj/lQJWS5UBdD6o/cYGXkc0xNdXSf2hWw4NJ5141WmeD5Y7IjuUpcClb7qRLXzb+u/JAUE&#xa;vFWPnQytuHGKuam3Uu0IgFVi1qRwH0QW3WHgq/lFOPypU3WBkOP4HUREwUjJzYri9LSAeom6q2&#xa;Sh7wblNNra6wYAWOguv+LXmg6NUcrsZnerWyBXH5hTJVKtmbt914plFeV7IooM6nf2DS9r4d12&#xa;zFUdfKQL11Lu7EZMdprUyDB7vh8rSur3pWwPqxVSJ333TQWNUZz6NiNpd2QDLDHmEjk10ngQRC&#xa;Qgi7zWJ2Hlk6DMzpKwTB+RZJEZCm+30g54q3Qv/mEhDIOGm6Ad0sO+j5cb0fnLNUOEhb7flVhs&#xa;mPQl8OGN+Sudxna9qY0g7zjM4tL+sxEztw9C8eHhLqqbMFC8XTywH8xeZBmO0IEPoJ5j0Y1cth&#xa;ZMDoCS0g3BzAJoQNLtgDr59jCA6lyKxEtolm1UUUpJ1Du9ZIvg3lW+/ZLxf8nDhE7Ahpuf3NBg&#xa;4UHEc+CywiHwRVQVb51lR7bL+JcMGEydWn3YC/LB5S0s85bSq2Zqp21qomQnWLpfGCpf7kQc1e&#xa;RniF/a3hxjQJG3THKqM6xqnc5EHRHclI/IiscUDN3uGEfbLQhTCXJ6Nqp0/mDXHimWJvPzYT7j&#xa;CKZu4bRAeHaZIYpdHk6sdI2TPXaj/4SoHMBh6pXi34zWs+aaykogyoVS6n+vhUAGrGDN6Z5RL5&#xa;WfaenGEAc9WnVx564yujyi73CNsSeZO12muPHIJQwvCENARbGb4eyMo7J3eVi/4JoD8nsPUOco&#xa;kSYtvTzMHZg/BNCH7NwuJAmbvrki1//o8IicsI2oYA2K9ffP+W1yNV5fz/S+X/6jlTtlTdEEHs&#xa;suQCAPZJ8YK5scS29EAH+8wXIEjgWqGKMAQYi8DWOQV0NohEHEjTEnNm8edvWM4ICzm8vSymz2&#xa;zHzbmox/zqEkLoqc1dn6cns7gKen7enlx/sd2G6TNo71d37NtlazXybDFbU2c7tqUwjzdrOrtJ&#xa;ABue0nE2dzVk0FyoMKbBy5AIYQ5blaSyXHLTnymzYWpwKE8wt7g7JGtuzvFk83Xah+QVHB9r6E&#xa;3lsoYQ5AUT/nNU0JI2an7E5bHLesJZoJKJxtlo72kbgrNV8I9UCZlupUaMdFJ33eKo0GM2Sytm&#xa;vBdIu46rOcy7IglMnAD0C6T7VzFnZjHRLnRMMWSaPa62MtePz6LSO9BXpUyoLxwsRBcoBpQNjo&#xa;o8EAjkw9a7jvGqd4idORWIioB2Qbfnjoft0YakqjJph1Cn/VBjGc9nN1TguR7TEA0ysc9tYjAI&#xa;Wsr8Ac9JtN1GA2QSdCVrH6gkKoHWxQoNyyblBlHDog8+V9pi/pp2sB2ro968c0EdtG9DvdnVlt&#xa;BcpcSAZ0WCBSQEXPFCmxYdrsY8TjH1RTM9kqQHjdsxIoMfcbQfoVmZfojlDr5stNK8yiDVUugv&#xa;p8wBvzjp4sGCBHl0wsDHQLY/FHJBsWFoBCEFTGw5E4KtoHTGZDBtD0DAItcQ01uymwxlrD211q&#xa;ZOX6CWVwTFYKwHcccMsa83Wk0VqDCEU2LiHyQHsDbmFGzy6Yt1mteIpZrIWWCCZ7lQz8Uejmaw&#xa;5QSw8CYxBnYA3eqXQpvEIUHkxJUfiHjbanMex+slqHfs0v4rOx2eLbGAzoYjQ1ptObYJikvCmg&#xa;6Ldr5rNlTdqBensbbP5ybJepYMTMqDgaBZK3RvETJqx3z3V0t3CfibpyeYyBkaWiDutigAFi2I&#xa;rCcf4OBhBmVJDq4qF19sHkHZQGiIu0PxivMgALcjH9gdogmFEEZdnhAgHTkxq0+hJqICKrVQ3J&#xa;KG4s0mrK9pwF4AMajN92W12T/giEINV97cXidaQCTNYLC85mSr7CrFiKoyKNDsA4f+KPG6FcdI&#xa;2622tX0o08pci8Ou/Vs7gbWYljqzelFzPFN4oL8kdsF0RFvSjfRZrISUa4bA9Krc8NbTJM0wQC&#xa;zMH5wqP6vejD73QdQpNyG7niC1XIZPhXHdvOnsAm1qDoNHE2G2pTQqmkf4Z8agNl/gIpfPyBh2&#xa;tzO19dEFCP1MqlM7vwWya+ETOg8vtqmWT1YOxvBcz0IKV8J8xu53gClGuB6C76vhh6cGaq3vHD&#xa;2OOEagIL0pFCn4xMuG6GjuQfqOj1m37p515nRQC6UHNHVwpzFLc8wFkM8hpG71nmpAlmFba96I&#xa;pZBUpJlkMMdkUOnAOi+vEjFfnjBX71XXSGsCprc/fJ2nn6dlGnkrc3tMG08O1V5s4sY30haSSZ&#xa;jZeQ6ird89qs8Gi7NcV87SIuFTRCWB2mKgEnY63JsyiMdS0k4tpyxvj0/00+/f+TxDLZ55HF9p&#xa;gg9OYelukZu6p/nO+G98Z/2fMKUQFJN8od0iqlPko+Y9eh10k9kpZiliQ/JuvISTsqtE0kpnmM&#xa;TIYFy8cf95XYHs5volC/TXrzqo/w68mHb2fwPe739/Je+/ZorGTk7mNqaO/0+rMMn/aPf6T1WK&#xa;8i2DlMke+Ydsm0KhSQSSP1LPsoqCVqgo8VdyLopVBvwA4X+o0v6iF0/LjZ4513JaA+0u7qWm9w&#xa;wt65c0TMHYU+j/kKXbHxsfGykJvt9fVwi/TO+IBZmSTormE6felukGcEcYHIvUVOjViuqnPKk7&#xa;GpAwBFlMNZfvNepz09qMxj+ICEftxusdxbfST9yrtCTeFVzWnCJJs3GOyVp+h86osmBhwN/84b&#xa;kqY8ysnPgNpR/C86AiQY2CMT2y0NJoPPVgZXCNtpL1nUWuzRWDMmpmBIluXTFqHbqLUFRRkHkI&#xa;s3lcPP2BqWFAKuoIy6M8K1EEcOwzECu0FJlGhzbarJ00Ek5+LLJKpokswlilefOZY4Az9dPPpd&#xa;vJ2VdegQsRoxnB7RMctnvNtbZEEdbtvDCx3vmsPCXRJXo7NBTO3/8FPw65iyho6u21LYcoXBGJ&#xa;mK1YiyDtKf4BKTg6hk0asv1IFxHJbjGuYRy6QUwmL33HWMqlj4nVANznCacgLkijlMvT8VetXz&#xa;yE1Z77UsLjOaTNsUoBFve3W6m6cFYYWz6INiyEBZmEAJtg7P1gLZ/OggCCzAR7MMkcuZbCbISI&#xa;fn1MmJeKGuYW69/p2fSB4MHdThWSb5LOUQJ68+jsnEOObg1XEVPUzIEJJp1+d6rKqhvBZOXddM&#xa;o94KW7ehWKh3CwkMC7tXM1L0LoYyK6sVMIZTbNwh2mqWjaurJO6yozRzAiYzESuj9QqIQl46z2&#xa;wrDSwy3Kns4uFs4i3pjtARUB0/rAE8ol7FTt5AeszxiuLC36mBqU4ku8SrzhHLeFzlDmWIT5UD&#xa;xHp82wnhbQw4yEhrArGM/h0zXAF9Xqxk17qFJExPfMRbmYtPkHZqCDF7iCSNsGcngd53B1kne4&#xa;2y5LfCsok/vFkZidV5jVreW72pF/EdQtLlK7vXmbVPnj14yGNezKTa/6Um0c21mao5qsaijaMp&#xa;TLMUeK9fdl+sD78Zz6c9PqbMWp36FY3SgjtTCYnrRpE2BP9mWhns0NB5Yu0IOxN1VgsumRklFO&#xa;U9EDE1uvNrrMoW745qp1ZCyGacHtxEPgRP1DOOThF62sZwhU+8sjf5Ogbvbn394Lpqs3Qc82fd&#xa;XFfgWtLnE3T19+q7zB5tyQQvTorWqmPbIcKhgJRLpGONmYNROC9yeqUfguRr/vp6o87mQshIyN&#xa;TEg6bj7LJgISvpVaO+0sco+pi2ulEuWejqrc070xK6wuPsvld1nEQJwE56Ii5CT/aCn+iaBJD8&#xa;1uAfifdyN7Js4zjAnX5SzXnF1xatN4nq61hw+gC4RfK77MLjvm5TURxn2hXlXBLfBFeELszKYT&#xa;QO4yZI/I2xPOXWNEL7DVefq7ALmS9wY6SfhyeoUpe6Cn2wdg3MjLPj6V1nUPepMAi30GPMNlts&#xa;U08DvZ7idJd7ZH821tXGv+A+Efs9w4ECSF12hWz1ETSFEt3+g2VwPRoRz4zuOPBX/+FXwyG4yd&#xa;CPN5ZB0hHnq6F/nKlzsPSDw9PRiGeww7GBIFoHClP0SosYDMZ37wU0ozM6LYRvxN+A+JJu+hpi&#xa;K3Z00BN5CC7irCeUAzJzK2myLcZ5CdAfLKyo0e59YX4tS+E/LNZOGNQbsnyE1VhzsSwSKhdAxi&#xa;EoMgRwnv0xWu84IAKMki8rkAWd7wIndVijIxsQMNdND6EDrvdTKy3R/aT3jHxNgIBL2ZUv9Bns&#xa;QVb/t35qOIEq+NOy61N2yABtttn24hwzviORkvlrdfE6bC1yOdSlgyfQtHxw8gncQih8Bmwf9S&#xa;8RUV8MnDI0iSvwuRInD2H7wefluJkP5HoO7+m0C9+x+85vq/ClQlB30bRyt9J1sHEl2n/z03lj&#xa;M3NjT+P+4Pa6piK/+L2hicUiAkf8LBmiQk6WZRGtlyKQYDxHKT5KiEsUPHxDGwTOxMBIZ8dxHu&#xa;cDWLzFJSyDuSe8okt0xN/AqhaG6PJtsuu3q6erzVH174er7hd0G8Rux4GqatPcf2ubv0OMsLMo&#xa;bji7Bc1J2lKvhuXj19dE+wZiyNF6rVvNSADcOSaRY2t8VTlAsSp93okQJgA4uVJSxN/GsqULmu&#xa;JNVRB+bY3D1CsDeJAoMFo8hC1HielWVj8l5IEEgbGYIsu4xaUWdsSjfKT9a6muCqOQyf2MLfqc&#xa;GYNDA1/ia3pRV5hsCsnVOgu8dpbs6+Ygh69tB2zjEZLzWbRuWPxU6yRmaiTxhlfsrgj8d3J84k&#xa;BL/BgngOznJXY7cz9zHYU+3E3FHVTc7O6e7L/OvacPsAOa0kKbzofvjScPeb+pzYNtnboz+R/F&#xa;ywDSaQlh4GO27OBHR+2BjkHi3YCYBXdL0LltBUuwXTxuRHtQyguNepbt/62xJxL2TUthAvM+83&#xa;vV0n8Z06gzAFrCrW6zbBA78FJIPT70PlftQQgrnxWUxbNVZ7EiNYgjEGJ7J0Ulgk/n2NPuXGZg&#xa;NI8xA/GbE54tQi5wmv8uokca8gYFLRYgSYxpdcFK3vv8VN7osGh6sfp+jinfzPQtqHm/FZJ9Hn&#xa;yUTOeEOKuA97CaW3bCBJDBJThOMTitHLsXtllBgjuJiGuRp4vOERmSZnmtOL0f/w34h/Kx9H8j&#xa;V1r9MsmApfEU5xddUSTHF0NHWQHHp9lk7CLp3QZ7078ZYy0AExb2XJdd+Zn0xm5xSadyAzUt2I&#xa;ZyC0mkqt1/rOLoaqU7fCerWbSowpYzpNuMTj1enFEq0EZeXR3ScVb79CuZxjZD4qngstHdJz3r&#xa;wPpHxPZByWbX8kyFnrrt3D5qQ23eBOjpRbIXYgnqKH3hw0a6sxaMR2Ei/mKwTwd+2hKZJbCSzH&#xa;UJ5Ex7DVDTgKqTWSKB4abx9m74jzybdAwdHaFnKNfLDgvM756hLEGXmYwyFWovyk1Vx0gEAQbS&#xa;iMeWyw3uIs/yZlUCCK/6qCJ0215dNRU4XtVcDYMUrzW9pqbkB32TqLjgxuIKdxUWS8kt+xryh2&#xa;oe6qmlAunIdqzLmhl+Bk8m/RnXnXJKOUV5AZASvxIh7iAI5ZirDo3IunE8F+drjZuA/MmPCceI&#xa;VwCQRkPBrihuiMGUUalpd/hGCBdF2x0bfp41A63vepjEbGMgn/Lx437JuwO8kOV/vw7cFrnnWw&#xa;zaxfCPO0UUz4+4xZwmtPiIOfeof3YlRvyO/Pse9gKwGrQ/iPaEGCFcDP9O1guUI/XKjrLAlRiI&#xa;QwnzboeR+IPRn9aK+w+ER7htKzqmLBUNQXA26Q/sSgR7/6nm02lxqoPmViK2t/y+jqS9pb1/Fs&#xa;VjaQrGjGe0tudL+shL8j2uw13+wl2joTtIXGEPnjz8Zvjvyv0r4yLqqtfRsQlEaQLqW7c+juLm&#xa;kkhmboDukGSeluEBDpFEnpkC4paRBpDPwPx995DyCe4+O759PMh+vae60117r3ve6YnzdJ7MnX&#xa;zZKd2zP0IvuCz1LEO/feMQ3Ne4xkaTJYKjFPRang80k2/ax3XLh2JO26SINIWZGkh480CAihE3&#xa;1p5oqb6jWLeJGhSbS0zpQxyD1FaXHpqsV6Gtimt5HpiJLHL6m/h0H8ZXhdN7tOqPjDOuX9N1ps&#xa;yE4tYurZ+XDLRdIBCeHWhVCv86yDRdB36tClfpRl40vOlR0C27mT8P8Wlsvx31kXBpcpF8w/51&#xa;zE38y5qM2LwhPbVwozRVCkRRtOxg6tkU1gbDWfykuJwNz9Vtx84eO1e2nperqdq2QUvO4p2E2a&#xa;JvOl5QPL5k5/fdPhIMDk5K9CPK36X1uH05KW4qUW1ng83xRjR+onCee37wJSYi0Z5NQbeKdZXI&#xa;yr1Km14osHGjEYAyfMZl+VDRX0NQDSBuu44X0RqfrS5RJeSPLlPKYxk+8rS45k6ntnUt9jNb8U&#xa;yxbGFZjGZ4vSEIjong4nL5iYlXU3OosOc0h3vHybvuzwwWPXHkAWsa9Y4MuxWHPuVzRLeqvKc2&#xa;vGIRlPntwVlnbvHCHIiaPaju+NAoCN/1ct3cvKQHiBxFE2nYMs9LBVfVLhBXqWsVOc/KVUgzp0&#xa;LYQBk86H01x9n6DaJ07M9oyO7AAmnE3vaxyzSykwXy+jTDeGoG0+SONptpSgteqOhIVyicyyF1&#xa;ZYgcGwmsIRhG1UsRS8TLlQHNkZPGHyT8XJabPhbNwkJcFNCVWLdwqSaUDiovGrwYQSNlTssOEP&#xa;2ZGUxg/Oal+H5itCzWX2vh83OutBpRb1BBatnVrJNPxRCH1gmaxiySNZlTjSshU8wwmGkMaRd8&#xa;HCnLSLd/1hQ6vlKk7Q2usjgJNif6VchF6mXAiO1fCN9A1NTSB5ZstQ5DSBSO3umudhZJcTBc73&#xa;wW1PNWgkvdqZpuiUh+QaplKKkMpVNbKWm5iFdXbQEEdULF6Jn1SczcazdsV96VupMp8Nq70yoS&#xa;rbyqbM5G+P2hSob+461NCs3cO+lurjGoQQcSHpKXeShBpIlx35+InM5/xEfnOMdVsiX8WmsmwY&#xa;LVHXVWwDPCtqeHqmwj4KB63Rnqlk4S6OhTyV8KUIWHhsZ4LJzOI6X8GKT+SqT9zNHLWmK4lJ62&#xa;XXX1CZAE/nFnRfAXQ+FYNUdvIjpuIx8gHd7P1m000qKUPxx2gPWXdCH3RBCxNkbRZsks4XGdYX&#xa;68soGquGp/CE4ygllUjFl4ztfyNmxg8rbe90Y6PeNeIu1IrXB3nAPA91zgxL9Uxo2F7ToSnkGV&#xa;ebpznME60aN4dGLitxwRONpvvItON29xQeJGaDoEPdm4hByZ/ptZaQMXoqLnRquKzoPM1VdV67&#xa;rOwxIQDBX2B+uLngoIFjR65ZIzoBM88u0vgWQTBA5INuA3v2kOv7AY321ZzxaTiQO81IGGjDV5&#xa;HJNOs9K90IEW2shEqQzBZJDK9cxoCJDGp8cA56egWlBTGgxDwsnNre3AjSLW1DR0BHWoBHESJi&#xa;wC48WCr3EzJrVa/1cjJaps/R7MuI1cdHbNJDwoldg2Qi7ttoPWOeO3tbpc8mKEJfG1hXedHibq&#xa;lmh57NPFTt8sK0hgPF8vhyxRBweq93kghXYg3LuRucEA9A2ZE/gvkg442mUMTmlvWUdIoIFwHd&#xa;jTSv001Js4niE8IJ/fIjpC9mLt4kgqTKM4oz3BOxHt4rkC7LIrA5VKUfqfzo65kmqr35P/Q5B+&#xa;XCnzw8gKrzfbzPJrsFJwhb8AFQI517PgM44KQaerNPjcubW2CKrinrz7oN40ACnS6ikEAy5/Q4&#xa;16GZ+ah82+J7vqdjVLn30bh4zn6elJ4lasGkS+iL48vUixUmJoEe1DYcRDfYezzlaSGiRtWt8r&#xa;AUz21sl+gPpldJWMPGybQJhxaE+eqDazFJC7mZK6Fkn40UZwr0iO12HCbkut+3PSWrSlTrJauq&#xa;65IkHM+XJHyHGOM5U50qQRedp7KUvgSZxNjKPvCVwL7dv80L1kQbgXRvpcu3QO6pY7pbV9iDxr&#xa;Dz1xXxq8QL38MQAx8KarUFtaPYWqTK8NcHuRJfhKm2zhLmSGaFoixrSUa7S+opwXhSeKFJiHae&#xa;xmh++MsynqlEfecJtoz1riVeFHpzX1N45l+4bvWNnPRBhsC/Jf+ndhU6l26MeQ6Re+2wnJR0qj&#xa;Q1hURwYi9Vtarp8qWivScUaGfYCcg5jBj7c2PhnntNT/59uPZQ3rH0gvzxrKcJOSyazr6dydqC&#xa;/cn0+uEg//eLk3ve784UH8WWvHXznIll5v7wOd+6cVBghJYuKZKsvNFRywq9tFjL2sVOxO/+Rt&#xa;KptrMZQIst7dySnmdkWIxyMmVIEySp1i/GiyfpitRdiwV0kuEaZfHU0JycIhseZ3VljsNkrBkd&#xa;GZbrWaeE25FHXsPqJ2NZtbUCCWpeuBLAOcA6oIzFl8WXJB9/rlN2glE6f75jVC/FC2U8CRxCMO&#xa;0kRiW3h1p+3rqHUGP45SNcqgSous7RxEbsyfvWpiN742rNl56ALVdyHTxJ5AWQLDF8tKirG0Wl&#xa;rGjDO79vcB02At182HAdn0IF5sqnHH1iz9NyI3UdMecDGZptg95kwfo1xzcJiCu+Cco4al6lZo&#xa;fq1jpbIIa0ekFTGBDAXEViwtZEZKNg9Qwmhmgx8ajcHSTrdvEqEhJ/szWFs+u+OmSR/ay0RAkX&#xa;wCe3DVdF29BcH1JvHnOuBgmR6g4FjAH7nelDGaOG5XrngXpqHUJMzrhnxCvu+coMjQvLlbpE/d&#xa;uc2fCLdMSFydTQjrxUniyFj334at50BWrzG1A3ZhTkLaUKNFIPKNSbKKMEmHMtdJ5DL7yB8VlK&#xa;AL584uo08LpqR5qMSZPZgpYeaSe2uViP3Uam9kXaxAtHD+8R6IVuMgL3kfqglqeUUXOgQ/M64k&#xa;wOXkSt7wZ2YbF+sxl3ufjaXKAM63ChypXHo7s1HBl7JnBfsnN8WUIih0uhqwN+D6SVln91mJi8&#xa;ANkXK/MpH0fRCHBEbm2tQHeWvtt/jwSIZfXs8y6lTcNY9h4hHctq7F6MZTdFXCEbVEhKv61yNk&#xa;ElfnxpOFyqZMsjRAbzEQEG009n+cvwGuZnQt3ddVm9x9KRjWnCFonuoLeB0+Y4qGyo0nDqUVxl&#xa;Sw3Uca7IUQn+On50w12MW3V+kdCYCuO2eBlUbU0KyFXFo60ysj1enRAp+otyux6Rk0sfiSbv4p&#xa;0EkCQb0olLsCXoGPQnppfmd1RpTqlYem4P5mqEtTQe1JAU4IbZj4Y5fQb5QxvvNAxEKHaHgGBq&#xa;Mvn2bPKhl+K+7jTsUJaEk/bVLz+HRoOpXdI4CNWJxzYWWF7cF9dyFnIkGv72oGF4wEQIJgWjVQ&#xa;/Skcz2W7IeFuBwxcPpRZYzdfwgT0fJ60JpiD7tL34IRD58Tfmgey0EHUTpRbXtHmGf0gzpfTXJ&#xa;o3y5ZAt7wkf4Y5giI3MJl1wQN8UlqvWpDXPrk8xAyLxC7JEpwjRnLHXuLUvFwl/FOd4KtMO2fO&#xa;gDtXWPwMIej5K6zJGyhitDEonm+JmEdsHwxcfJ4Z7HqXfOEnnt4Hhlh7zG37O0OWh8u2wmRhvJ&#xa;wokHcKYS4o3W7BQlOWGZUbZ4WzrX/cHjM1zD2B4uufEhig2gObQo/lFg76O+xkMqN9ZwpjuWr2&#xa;A/Yn9TdfqiJPaaSUcCRzwCp8xsRbkMZ0VNEChIFgEkLMJHUkLAZ+T7TtAJN8PxsD2ZzaAoiLJc&#xa;ZPnrbnCHfXTAqqfKRRdfWYn61zD4B/JPXrxJcwkP0Ch2Q1GQ/BaaJxt3yi9a0PXKuv1U0EZk8a&#xa;sO5iCKebCCSHfzo8KZv2pV4reMJS6BTeS4aybyc7PrAsr1CwH9Uavyb/0UNAYby7LWTsCb3R7+&#xa;jlL4IaTPi1U1x6KgSZ6Mq1mFFSmRZrKhh9XIBvXA4SCybBr55nF8mXk46lysE+x4fKAyuWVtVz&#xa;1vYiwQZVrBYDL4gfvL7Pvjfr2n3w/wvPU9GGyoH0cff46jADqNHsu+d0prMchRY/Z0HSidNedV&#xa;OsnjWKLvzVZ13EaSR7a4D6Vjn75NTw8syWdJGAigwNWEZi7jSKiei3mRGOHGHnOAG2nN8Han0C&#xa;FXfH/0cwQBFIFFsbz/KFSXmiauJswJf1By64LRU68FbVZhvscm63kfMt5FC6QImOjp6KvXF2uU&#xa;PwMAHz+Kt+5Vel7SJL4KXuEAyFJ10jYROYE59CnXBSfL7wQ+Kz2luLV7R/IIO5spsV6DL9QQah&#xa;jEeYZyQ4R7LrQGJEXKXlHKswCddokHNtsWoA2mCgxRwqGXpxjun9I46Sw6XHz3j5moxpq/W9uN&#xa;z9VTsSFlWIIKZSWaR649eo/scQUa50THPVmokTYPP9xEzjsMwKrASRjkwt0RAWZo/PgLtqFSyS&#xa;G90ZGgdiuXO+Kb8DSPHJ3cfcyeM3RHq6h/C7WQQZLZoJn1na3xhcxb9BfozydpTA+VUeU5jQRo&#xa;5fX4Qd07jDbxGHLYAk5quWhy+7siBakSpxL79pYKRb1/MMrh14SxoQ+wpB0+Jgl8daihiTsIX1&#xa;WMjsTgbFWct58cWWtL71Nro/tkXxSVVj1d55CB/lxJMjyuHzdW+s42sLY4BQn/nax9AcCC4KM+&#xa;qY+zrWI3qOpj9u5HBNJarQ5ceoQNC8xAukUhu7Dob7Mf4bn4WtWhcurQfggqjiPjm9GtSnasb1&#xa;lI1D8EteFSUA+wk/f4+mIRP+XrKhpxOVBYW9Vp7vPOJiFo9iFvEX7SUnwCbaGYVLtMQjiG++YN&#xa;Uk3GTOXx+1Ccmn7j3imJmCHb9kMp1jqsOBcPZbsAWjaP/BVh7cebnwGzC31gLfXMnw4cMd9CHc&#xa;f5oaXLyVJxAPYorLpLLRXi2KqLqIFeUxy3RcigbItsbTHWwC0soppm2DBjcZjrSfi47njW+Laa&#xa;aPhLRmnyLp246XiGjoFsSnppQ2ccrrq2JeTELlwlZik3WEsp8BAqwVrqVhYkkr8L1lLU7hBduO&#xa;fZfGsva6FB8dpO2nZxam5xZjq20lAhvrP7tK7TZVKIo0y2+6gC0iZCqiTD53e4hnushQBpSa16&#xa;0Mcitl9jShB2vtl6zaqN8CZJmRAuxmeMGXqTRYr7BhH5EDYV68INIi8+GhrbuW/CNDi9R1xIBk&#xa;VVqC8kaxROIoyT40x5fL/bQIJfpBgmFodkYKB/Zq1V2Giljull+Hs/jg2aSK4OflY/RFbEJQs5&#xa;JzQ+OZhQBQ5V324L/7u2zI9yTas+yYxwDpXHjEqSZKDRuLB0POPtlH+xxBDAjRf+lXyUU+ZZpy&#xa;2uCfEKvVhhtzJN3ZMOLxELc4z6D+51cfL8YkEzOp1nMhd89HmPGevxzxSojJJr+QUTAhXFvDsx&#xa;lwjymqWs5Xs5DWQwlMTKmQaYrDz6mQznaAspCzOZ5nNomgVNfTy7Cl5nc8p9WyNRZxGjPYb48E&#xa;Ei9TVRtAv9aFRTUG/GVLstDMLT/bYzQ+wSm+6H+l6Bj5u/FOZ6dS2T97pnZOoYfq5dnG0FEDNe&#xa;ID9Y5x6XocxeAS2q7Opdaum7/GiNVbCWVsH/W3QX3S+01NDaxlXewBxo+FM4wf9zzDIzItbaFF&#xa;VgFRH7+7MGGJQKlETp5kK/9PdFZ0OOvYOIxGJrLCRq1dxyJuzRrUZV3dcXq9P3fixvj4VlLnkY&#xa;Q3fQ6uTixPnk/ETu4vy0lh9CuxUFkXdTFTRbibleRPVOkWCetcEuWWMuVVdzJTn2HXy+zqszb+&#xa;iu4QaDpLUu4+JMXJqiqlNRoaisoSo1peSk9RLzHrlzNbUemyPH9IY3SKAi5KGPrmOMrLti3Osa&#xa;LCK9SRKFwKjTaUbtUODEGNK44SIBckLG0fOHVFGKQ/f7Z/3tiO33iVk8ki69sYyetXQRWfV9mN&#xa;BVDoLVu7aG00bBJtS60QxYsGmF+SeWcKKXZX+ZB1r3GP3FHYSdyxjnykK/os5Fcu6lGZpuai7J&#xa;adKhv2poF6eTzrNE7nDDolE+0RMlcU/ZUW6MjMtGTo1CbaUhDds64CnIRCrvhV3K9b3LOhF9ag&#xa;Yju7DFFhhVWTyL2JxEDRTrsehPIgvSWrnbDDkf5a9ImJjFRxHlDEQdTFnGRZzHcHmsIBy1ihJ4&#xa;EgqIH5YWyoxjruqklqLy4cOxJcWJ6Zaq8EfPE8Gn2RD35B00FFDIGm3QSGMvjnXjX0CbwsKB4p&#xa;rPdnxv5DTO/LFIGib7ADkvgt5VFd1f3SjgQH63t79CpV2XvfT42wHZIugI1ifquVbA2itQvIyd&#xa;uOP40P08D4L+zQUKt4o1rBApbMNCjNHjVC0Usll7ZRuMSaNc27Ss78D6QfPnug5d7AT0tGKH5t&#xa;GspEuegXcVPe9xklNL5TJbwHAwERni48AMmKJmpxsEq87Ck3q0Zu4sDFuQJhgCE3ZKW2opEwXV&#xa;uuj63VrdVTD69VU8Egvgt0aROfze3RNCs6S2oOe+16grnmBs67YszEs6Kf/QIOyedmVkHh4NqK&#xa;8oaypHjo4vH1ixSm+vQh9vg03fFVm3pOi4/LleFJczF++Zt3+Tr6gHaVydTNre2TCamp6p7YKw&#xa;StMLU1sLZoc51Zfe3EJ3thEp9GIU4fIvHbcqtHDPMauTpYrtKwj0tbJ5inVrBh++tn7fvu4oEp&#xa;U6S82mugUwE3qQNkZ6ChgfFUVIxLgzfk+1wslZie7zl/xw0H7R6Ge02q+xG+FY7nK1jlzYbIiv&#xa;A5TZqFbuVt/j8EytkZ1ERI1nFu/VZjs8Okxjk37eVb4NI+dJJcCPMQZSeId//zUWxIDsHm0YVM&#xa;65uMjw1h7VdK431ytrYe4IvREQgeDY6Fyl34aCLM/IKXZBjPCSKWf6FwyT7KVzU1OJUCmDSZz4&#xa;tadOs189ce8pChtyDC47jnwxO77bsJGi3ixZ4t2IFue7JxWFplK0cp5lNRNkKqe00dMiYfnoAo&#xa;ELvF9+gsbyTdwKQwyNZVkmPYe2DmLMmGvLWL3fcQcX4+X3jSC/Mwnstskq2Ac2sO8bj7i0oUJ4&#xa;3eC07TaZEHOGKGwCjPXHJaCZvSgZhJ7w+77CW2pxXo4kpG5/G62e1t21Rf7CO4xNqLJVSZu2Js&#xa;K5L2rVjnRa/HPXUAfQ7fD+QnvhkE2/+G6I9YoY6f4D8xXuxDm34E2ZZZzkjk1kEIMRoT5XRQRK&#xa;rbYSivYbaNyMHNU2utH71XAPGaQ+Plpm7yCpeEsx7WLEeGCmtiEsEbE1xsG93cI1TDjidS8jM5&#xa;FGPotBBOpTN6Xl+doRfw+H/JfCiiDGCzGEiNmzHQa7RJfAt8g7IQWU9FHbXSTYcWsMyCOW7pFi&#xa;IVvswdbz/i7yB2Txb5xZg96KELkGi0j9aFW2xJydTwQDAVH51xEZJBQ6xD/qC9e2XbeDCQEBxX&#xa;ZZCBga4vr1sxb/kN2L3utIe0/SZB1wxal6wADtYIVnv4bCjvXbh283fMhXOS6P9PxXik/DwPiB&#xa;WD/6Of9zGeL/O8fPeJchHYrsfYvOdyEgmJAhIGiu4fFR/GaAx8/AL2F8ZFgHvm+ng4dcDhECgv&#xa;UaMDL9bwLfaHJyk2FkcoYwGMxAgHjz1pFZf4+B+Wfgsjs+MsmsmBw4YGAehB/u/3+uj4D/ALYH&#xa;OijYWdsA7Rxcb7zm3Bx4TmB1thuYIB0bAoLoGokV/7+S3D4YOBoq4HdlCAhShB8t966sPen/vu&#xa;d/uVdF51RZL0rA8igYfP2nucxT+B/n8hejIdzAth8DZniPePP2p9V+//ZvmU9QiJws8J2JOgx4&#xa;jZMi/eir8M/1VvsauDUIBDawrO2utVr4+0f7f1nwlyz7GpBWADALF9KPw/Z/LhbD/2SRszb6h+&#xa;m/HiejvfsFeKxcEW8SjZv9GdEtk3JJROERj377E21Z/xnRLf/kS6L0yXcPmcBPFIJwkyjc6c+I&#xa;2G4nGvFOeXrZsvLrT0TkHn9GxH47EcSgnMYIeCtQg79JxOP7Z0QctxNxyQ/UcNw6R05Bf0bEeT&#xa;vR53aOWcZb5wgz8s+IALcTcSZAuEWC92MRZrC0XyMqj/0l0c9QlzX+r/aqvr5ZBhff3l7l13/x&#xa;S7yrHU+vq9Thy/+53/VN8Ktdwq6Df6v5n1uo3gS/2nTmugSSt/5527GbLFe7LVxnYe3683Y2N1&#xa;muVkvEvsaS1ffrPg5XUS4rK14tygW4hiI+9/9RZ/EqzWUowdWcLpLrA7/8W/W+bpqrV9MRyK8B&#xa;yp39bmLYVczLRIarEb/XMVe//W5aw80d/WpUGts1zHEoyD+LHL5pC18N4LguSQGwkL9rb98W7H&#xa;ZzEq+eI143CJuRIP9rrfwqOuQqyeWR5FVfO/M1kowHtz3Nfx1QXsW/9Nhf9T9xXcNfxL4d//f8&#xa;9zcX6NV3LbprPLSEt/P80relIH1ptkFAkIE/JeANrpAEEvzt/wBQSwcI4+8c4/gbAQBpMQEAUE&#xa;sBAhQAFAAICAgACbM+TuPvHOP4GwEAaTEBABEAAAAAAAAAAAAAAAAAAAAAAGxpYi9DaGVzc1Ry&#xa;ZWUuamFyUEsFBgAAAAABAAEAPwAAADccAQAAAA==" ID="ID_878330939" CREATED="1549009856594" MODIFIED="1549009856630"/>
</node>
</node>
<node TEXT="images" POSITION="right" ID="ID_209340361" CREATED="1521562135195" MODIFIED="1540216035600">
<edge COLOR="#7c7c00"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      An add-on may define any number of images as child nodes of the images node. The actual image data has to be placed as base64 encoded binary data into the text of a subnode.
    </p>
    <p>
      The images are saved to the <i>${installationbase}/resources/images</i>&#160;directory.
    </p>
    <p>
      
    </p>
    <p>
      The following images should be present:
    </p>
    <ul>
      <li>
        <i>${name}-icon.png</i>, like <i>oldicons-theme-icon.png</i>. This will be used in the app-on overview.
      </li>
      <li>
        <i>${name}-screenshot-1.png</i>, like <i>oldicons-theme-screenshot-1.png</i>. This will be used in the app-on details dialog. Further images can be included but they are not used yet.
      </li>
    </ul>
    <p>
      Images can be added automatically by releaseAddOn.groovy or must be uploaded into the map via the script <i>Tools-&gt;Scripts-&gt;Insert Binary</i>&#160;since they have to be (base64) encoded as simple strings.
    </p>
  </body>
</html>
</richcontent>
</node>
</node>
</map>
