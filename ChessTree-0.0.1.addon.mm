<map version="freeplane 1.6.0">
<!--To view this file, download free mind mapping software Freeplane from http://freeplane.sourceforge.net -->
<node TEXT="ChessTree" FOLDED="false" ID="ID_1869326925" CREATED="1521562113754" MODIFIED="1540216035211" LINK="http://noUpdateURL.com" BACKGROUND_COLOR="#97c7dc" STYLE="oval">
<font SIZE="16" BOLD="true" ITALIC="true"/>
<hook NAME="MapStyle">
    <properties fit_to_viewport="false" show_icon_for_attributes="true" show_note_icons="true" edgeColorConfiguration="#808080ff,#ff0000ff,#0000ffff,#00ff00ff,#ff00ffff,#00ffffff,#7c0000ff,#00007cff,#007c00ff,#7c007cff,#007c7cff,#7c7c00ff"/>

<map_styles>
<stylenode LOCALIZED_TEXT="styles.root_node" STYLE="oval" UNIFORM_SHAPE="true" VGAP_QUANTITY="24.0 pt">
<font SIZE="24"/>
<stylenode LOCALIZED_TEXT="styles.predefined" POSITION="right" STYLE="bubble">
<stylenode LOCALIZED_TEXT="default" ICON_SIZE="12.0 pt" COLOR="#000000" STYLE="fork">
<font NAME="SansSerif" SIZE="10" BOLD="false" ITALIC="false"/>
</stylenode>
<stylenode LOCALIZED_TEXT="defaultstyle.details"/>
<stylenode LOCALIZED_TEXT="defaultstyle.attributes">
<font SIZE="9"/>
</stylenode>
<stylenode LOCALIZED_TEXT="defaultstyle.note" COLOR="#000000" BACKGROUND_COLOR="#ffffff" TEXT_ALIGN="LEFT"/>
<stylenode LOCALIZED_TEXT="defaultstyle.floating">
<edge STYLE="hide_edge"/>
<cloud COLOR="#f0f0f0" SHAPE="ROUND_RECT"/>
</stylenode>
</stylenode>
<stylenode LOCALIZED_TEXT="styles.user-defined" POSITION="right" STYLE="bubble">
<stylenode LOCALIZED_TEXT="styles.topic" COLOR="#18898b" STYLE="fork">
<font NAME="Liberation Sans" SIZE="10" BOLD="true"/>
</stylenode>
<stylenode LOCALIZED_TEXT="styles.subtopic" COLOR="#cc3300" STYLE="fork">
<font NAME="Liberation Sans" SIZE="10" BOLD="true"/>
</stylenode>
<stylenode LOCALIZED_TEXT="styles.subsubtopic" COLOR="#669900">
<font NAME="Liberation Sans" SIZE="10" BOLD="true"/>
</stylenode>
<stylenode LOCALIZED_TEXT="styles.important">
<icon BUILTIN="yes"/>
</stylenode>
</stylenode>
<stylenode LOCALIZED_TEXT="styles.AutomaticLayout" POSITION="right" STYLE="bubble">
<stylenode LOCALIZED_TEXT="AutomaticLayout.level.root" COLOR="#000000" STYLE="oval" SHAPE_HORIZONTAL_MARGIN="10.0 pt" SHAPE_VERTICAL_MARGIN="10.0 pt">
<font SIZE="18"/>
</stylenode>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,1" COLOR="#0033ff">
<font SIZE="16"/>
</stylenode>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,2" COLOR="#00b439">
<font SIZE="14"/>
</stylenode>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,3" COLOR="#990000">
<font SIZE="12"/>
</stylenode>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,4" COLOR="#111111">
<font SIZE="10"/>
</stylenode>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,5"/>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,6"/>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,7"/>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,8"/>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,9"/>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,10"/>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,11"/>
</stylenode>
</stylenode>
</map_styles>
</hook>
<hook NAME="AutomaticEdgeColor" COUNTER="11" RULE="ON_BRANCH_CREATION"/>
<attribute_layout NAME_WIDTH="107.99999678134928 pt" VALUE_WIDTH="134.9999959766866 pt"/>
<attribute NAME="name" VALUE="chessTree"/>
<attribute NAME="version" VALUE="0.0.1"/>
<attribute NAME="author" VALUE="Gergely Kiss"/>
<attribute NAME="freeplaneVersionFrom" VALUE="1.6.4"/>
<attribute NAME="freeplaneVersionTo" VALUE=""/>
<attribute NAME="updateUrl" VALUE="http://noUpdateURL.com" OBJECT="java.net.URI|http://noUpdateURL.com"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      The homepage of this add-on should be set as the link of the root node.
    </p>
    <p>
      The basic properties of this add-on. They can be used in script names and other attributes, e.g. &quot;${name}.groovy&quot;.
    </p>
    <ul>
      <li>
        name: The name of the add-on, normally a technically one (no spaces, no special characters except _.-).
      </li>
      <li>
        author: Author's name(s) and (optionally) email adresses.
      </li>
      <li>
        version: Since it's difficult to protect numbers like 1.0 from Freeplane's number parser it's advised to prepend a 'v' to the number, e.g. 'v1.0'.
      </li>
      <li>
        freeplane-version-from: The oldest compatible Freeplane version. The add-on will not be installed if the Freeplane version is too old.
      </li>
      <li>
        freeplane-version-to: Normally empty: The newest compatible Freeplane version. The add-on will not be installed if the Freeplane version is too new.
      </li>
      <li>
        updateUrl: URL of the file containing information (version, download url) on the latest version of this add-on. By default: &quot;${homepage}/version.properties&quot;
      </li>
    </ul>
  </body>
</html>
</richcontent>
<node TEXT="description" POSITION="left" ID="ID_752418840" CREATED="1521562135104" MODIFIED="1540216035317">
<edge COLOR="#ff0000"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      Description would be awkward to edit as an attribute.
    </p>
    <p>
      So you have to put the add-on description as a child of the <i>'description'</i>&#160;node.
    </p>
    <p>
      To translate the description you have to define a translation for the key 'addons.${name}.description'.
    </p>
  </body>
</html>
</richcontent>
<node ID="ID_281132702" CREATED="1521563587956" MODIFIED="1521563734014"><richcontent TYPE="NODE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      This addon is intended to ease the creation and maintenance of mindmaps containing trees for chess movements.
    </p>
    <p>
      
    </p>
    <p>
      0.) Template is available after addon installation from <i><b>File</b></i>&#160; --&gt; <i><b>New map from template...</b></i>&#160;choosing <i><b>template.ChessTree.mm</b></i>. Any additional information can be found in the template.
    </p>
    <p>
      
    </p>
  </body>
</html>
</richcontent>
<attribute_layout VALUE_WIDTH="134.9999959766866 pt"/>
</node>
</node>
<node TEXT="changes" POSITION="left" ID="ID_845634758" CREATED="1521562135109" MODIFIED="1540216035330">
<edge COLOR="#0000ff"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      Change log of this add-on: append one node for each noteworthy version and put the details for each version into a child node.
    </p>
  </body>
</html>
</richcontent>
</node>
<node TEXT="license" FOLDED="true" POSITION="left" ID="ID_1331637895" CREATED="1521562135113" MODIFIED="1540216035338">
<edge COLOR="#00ff00"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      The add-ons's license that the user has to accept before she can install it.
    </p>
    <p>
      
    </p>
    <p>
      The License text has to be entered as a child of the <i>'license'</i>&#160;node, either as plain text or as HTML.
    </p>
  </body>
</html>
</richcontent>
<node TEXT="&#xa;This add-on is free software: you can redistribute it and/or modify&#xa;it under the terms of the GNU General Public License as published by&#xa;the Free Software Foundation, either version 2 of the License, or&#xa;(at your option) any later version.&#xa;&#xa;This program is distributed in the hope that it will be useful,&#xa;but WITHOUT ANY WARRANTY; without even the implied warranty of&#xa;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the&#xa;GNU General Public License for more details.&#xa;" ID="ID_1555852289" CREATED="1521562135117" MODIFIED="1521566722845"/>
</node>
<node TEXT="preferences.xml" POSITION="left" ID="ID_136508631" CREATED="1521562135121" MODIFIED="1540216035346">
<edge COLOR="#ff00ff"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      <font color="#000000" face="SansSerif, sans-serif">The child node contains the add-on configuration as an extension to mindmapmodemenu.xml (in Tools-&gt;Preferences-&gt;Add-ons). </font>
    </p>
    <p>
      <font color="#000000" face="SansSerif, sans-serif">Every property in the configuration should receive a default value in <i>default.properties</i>&#160;node.</font>
    </p>
  </body>
</html>
</richcontent>
</node>
<node TEXT="default.properties" POSITION="left" ID="ID_1494843788" CREATED="1521562135125" MODIFIED="1540216035353">
<edge COLOR="#00ffff"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      These properties play together with the preferences: Each property defined in the preferences should have a default value in the attributes of this node.
    </p>
  </body>
</html>
</richcontent>
</node>
<node TEXT="translations" POSITION="left" ID="ID_461099033" CREATED="1521562135130" MODIFIED="1540216035360">
<edge COLOR="#7c0000"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      The translation keys that this script uses. Define one child node per supported locale. The attributes contain the translations. Define at least
    </p>
    <ul>
      <li>
        'addons.${name}' for the add-on's name
      </li>
      <li>
        'addons.${name}.description' for the description, e.g. in the add-on overview dialog (not necessary for English)
      </li>
      <li>
        'addons.${name}.&lt;scriptname&gt;' for each script since it will be the menu title.
      </li>
    </ul>
  </body>
</html>
</richcontent>
<node TEXT="en" ID="ID_1779268052" CREATED="1521562135133" MODIFIED="1540215919911" MAX_WIDTH="322.49999056756525 pt" MIN_WIDTH="322.49999056756525 pt">
<attribute_layout NAME_WIDTH="155.99999535083785 pt" VALUE_WIDTH="123.74999631196272 pt"/>
<attribute NAME="addons.${name}" VALUE="ChessTree"/>
<attribute NAME="addon.${name}.updateChessTree" VALUE="Update ChessTree..."/>
<attribute NAME="addon.${name}.pasteBranch" VALUE="Paste branch..."/>
</node>
</node>
<node TEXT="deinstall" POSITION="left" ID="ID_1510539068" CREATED="1521562135137" MODIFIED="1540216035366">
<edge COLOR="#00007c"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      List of files and/or directories to remove on uninstall
    </p>
  </body>
</html>
</richcontent>
<attribute_layout NAME_WIDTH="52.499998435378124 pt" VALUE_WIDTH="271.4999919086697 pt"/>
<attribute NAME="delete" VALUE="${installationbase}/addons/${name}.script.xml"/>
<attribute NAME="delete" VALUE="${installationbase}/templates/template.ChessTree.mm"/>
<attribute NAME="delete" VALUE="${installationbase}/lib/ChessTree.jar"/>
<attribute NAME="delete" VALUE="${installationbase}/addons/${name}/scripts/pasteBranch.groovy"/>
<attribute NAME="delete" VALUE="${installationbase}/addons/${name}/scripts/updateChessTree.groovy"/>
</node>
<node TEXT="scripts" POSITION="right" ID="ID_836008002" CREATED="1521562135167" MODIFIED="1540216035376">
<edge COLOR="#007c00"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      An add-on may contain multiple scripts. The node text defines the script name (e.g. inserInlineImage.groovy). The name must have a suffix of a supported script language like .groovy or .js and may only consist of letters and digits. The script properties have to be configured via attributes:
    </p>
    <p>
      
    </p>
    <p>
      * menuLocation: &lt;locationkey&gt;
    </p>
    <p>
      &#160;&#160;&#160;- Defines where the menu location.
    </p>
    <p>
      &#160;&#160;&#160;-&#160;See mindmapmodemenu.xml for how the menu locations look like.
    </p>
    <p>
      &#160;&#160;&#160;- http://freeplane.bzr.sf.net/bzr/freeplane/freeplane_program/trunk/annotate/head%3A/freeplane/resources/xml/mindmapmodemenu.xml
    </p>
    <p>
      &#160;&#160;&#160;- This attribute is mandatory
    </p>
    <p>
      
    </p>
    <p>
      * menuTitleKey: &lt;key&gt;
    </p>
    <p>
      &#160;&#160;&#160;- The menu item title will be looked up under the translation key &lt;key&gt; - don't forget to define its translation.
    </p>
    <p>
      &#160;&#160;&#160;- This attribute is mandatory
    </p>
    <p>
      
    </p>
    <p>
      * executionMode: &lt;mode&gt;
    </p>
    <p>
      &#160;&#160;&#160;- The execution mode as described in the Freeplane wiki (http://freeplane.sourceforge.net/wiki/index.php/Scripting)
    </p>
    <p>
      &#160;&#160;&#160;- ON_SINGLE_NODE: Execute the script once. The <i>node</i>&#160;variable is set to the selected node.
    </p>
    <p>
      &#160;&#160;&#160;- ON_SELECTED_NODE: Execute the script n times for n selected nodes, once for each node.
    </p>
    <p>
      &#160;&#160;&#160;- ON_SELECTED_NODE_RECURSIVELY: Execute the script on every selected node and recursively on all of its children.
    </p>
    <p>
      &#160;&#160;&#160;- In doubt use ON_SINGLE_NODE.
    </p>
    <p>
      &#160;&#160;&#160;- This attribute is mandatory
    </p>
    <p>
      
    </p>
    <p>
      * keyboardShortcut: &lt;shortcut&gt;
    </p>
    <p>
      &#160;&#160;&#160;- Optional: keyboard combination / accelerator for this script, e.g. control alt I
    </p>
    <p>
      &#160;&#160;&#160;- Use lowercase letters for modifiers and uppercase for letters. Use no + signs.
    </p>
    <p>
      &#160;&#160;&#160;- The available key names are listed at http://download.oracle.com/javase/1.4.2/docs/api/java/awt/event/KeyEvent.html#VK_0
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;In the list only entries with a 'VK_' prefix count. Omit the prefix in the shortcut definition.
    </p>
    <p>
      
    </p>
    <p>
      * Permissions&#160;that the script(s) require, each either false or true:
    </p>
    <p>
      &#160;&#160;&#160;- execute_scripts_without_asking
    </p>
    <p>
      &#160;&#160;&#160;- execute_scripts_without_file_restriction: permission to read files
    </p>
    <p>
      &#160;&#160;&#160;- execute_scripts_without_write_restriction: permission to create/change/delete files
    </p>
    <p>
      &#160;&#160;&#160;- execute_scripts_without_exec_restriction: permission to execute other programs
    </p>
    <p>
      &#160;&#160;&#160;- execute_scripts_without_network_restriction: permission to access the network
    </p>
    <p>
      &#160;&#160;Notes:
    </p>
    <p>
      &#160;&#160;- The set of permissions is fixed.
    </p>
    <p>
      &#160;&#160;- Don't change the attribute names, don't omit one.
    </p>
    <p>
      &#160;&#160;- Set the values either to true or to false
    </p>
    <p>
      &#160;&#160;- In any case set execute_scripts_without_asking to true unless you want to annoy users.
    </p>
  </body>
</html>
</richcontent>
<node TEXT="pasteBranch.groovy" FOLDED="true" ID="ID_1708118480" CREATED="1522494712280" MODIFIED="1522494830917">
<attribute_layout NAME_WIDTH="146.2499956414105 pt" VALUE_WIDTH="134.9999959766866 pt"/>
<attribute NAME="menuTitleKey" VALUE="addon.${name}.pasteBranch"/>
<attribute NAME="menuLocation" VALUE="/menu_bar/addons.${name}"/>
<attribute NAME="executionMode" VALUE="on_single_node"/>
<attribute NAME="keyboardShortcut" VALUE=""/>
<attribute NAME="execute_scripts_without_asking" VALUE="true"/>
<attribute NAME="execute_scripts_without_file_restriction" VALUE="true"/>
<attribute NAME="execute_scripts_without_write_restriction" VALUE="true"/>
<attribute NAME="execute_scripts_without_exec_restriction" VALUE="true"/>
<attribute NAME="execute_scripts_without_network_restriction" VALUE="true"/>
<node TEXT="import org.freeplane.plugin.script.proxy.ScriptUtils&#xd;&#xa;import groovy.swing.SwingBuilder&#xd;&#xa;//import groovy.io.File&#xd;&#xa;import groovy.io.FileType&#xd;&#xa;&#xd;&#xa;import java.awt.FlowLayout as FL&#xd;&#xa;import java.awt.event.ActionEvent;&#xd;&#xa;import java.awt.event.ActionListener;&#xd;&#xa;import java.awt.Dimension;&#xd;&#xa;import java.awt.KeyStroke;&#xd;&#xa;import java.awt.event.KeyEvent;&#xd;&#xa;import java.awt.event.KeyAdapter;&#xd;&#xa;import java.awt.Action;&#xd;&#xa;import java.awt.Font;&#xd;&#xa;&#xd;&#xa;import javax.swing.BoxLayout as BXL&#xd;&#xa;import javax.swing.JFrame&#xd;&#xa;import javax.swing.AbstractAction;&#xd;&#xa;import javax.swing.Action;&#xd;&#xa;import javax.swing.BoxLayout;&#xd;&#xa;import javax.swing.JComponent;&#xd;&#xa;import javax.swing.JList;&#xd;&#xa;import javax.swing.JPanel;&#xd;&#xa;import javax.swing.KeyStroke;&#xd;&#xa;import javax.swing.JScrollPane&#xd;&#xa;import javax.swing.JFileChooser;&#xd;&#xa;&#xd;&#xa;import java.awt.Toolkit&#xd;&#xa;import java.awt.datatransfer.Clipboard&#xd;&#xa;import java.awt.datatransfer.DataFlavor&#xd;&#xa;import java.awt.datatransfer.StringSelection&#xd;&#xa;&#xd;&#xa;import ChessTree.Notation&#xd;&#xa;import ChessTree.NotationTranslator&#xd;&#xa;import ChessTree.ChessTreeSettings&#xd;&#xa;&#xd;&#xa;/*************/&#xd;&#xa;/** Globals **/&#xd;&#xa;/*************/&#xd;&#xa;chessTreeSettings = new ChessTreeSettings(this.node.map)&#xd;&#xa;&#xd;&#xa;/* CONSTANTS */ &#xd;&#xa;SUPPORTED_LANGUAGES = chessTreeSettings.SUPPORTED_LANGUAGES&#xd;&#xa;DICTIONARY = chessTreeSettings.DICTIONARY&#xd;&#xa;&#xd;&#xa;LANGUAGE_CURRENT = chessTreeSettings.get(&quot;chesstree_language&quot;)&#xd;&#xa;&#xd;&#xa;ROOT = this.node.map.root&#xd;&#xa;&#xd;&#xa;ROOT_MOVENUMBER = chessTreeSettings.get(&quot;chesstree_root_movenumber&quot;)&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;/* FUNCTIONS */&#xd;&#xa;&#xd;&#xa;/* Static functions for ClipBoard handling */ &#xd;&#xa;//static void setClipboardContents(final String contents){    Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(contents), null)    }&#xd;&#xa;static String getClipboardContents(){    return Toolkit.getDefaultToolkit().getSystemClipboard().getContents(null).getTransferData(DataFlavor.stringFlavor)    }&#xd;&#xa;&#xd;&#xa;def showPGNFileChooser() {&#xd;&#xa;    if(guiPGNFolderRB.selected) {&#xd;&#xa;        JFileChooser chooser = new JFileChooser();&#xd;&#xa;        chooser.setCurrentDirectory(new java.io.File(&quot;.&quot;));&#xd;&#xa;        chooser.setDialogTitle(&quot;Choose directory containing PGN files...&quot;);&#xd;&#xa;        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);&#xd;&#xa;        chooser.setAcceptAllFileFilterUsed(false);&#xd;&#xa;        &#xd;&#xa;        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {&#xd;&#xa;            return chooser.getCurrentDirectory()&#xd;&#xa;        } else {&#xd;&#xa;            return &quot;&quot;&#xd;&#xa;        }&#xd;&#xa;    } else {&#xd;&#xa;        return &quot;&quot;&#xd;&#xa;    }&#xd;&#xa;&#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;def switchPGNinput() {&#xd;&#xa;    guiPGNClipboard.editable = guiPGNClipboardRB.selected    &#xd;&#xa;    guiPGNClipboard.enabled = guiPGNClipboardRB.selected&#xd;&#xa;    guiPGNFolder.editable = guiPGNFolderRB.selected&#xd;&#xa;    guiPGNFolder.enabled = guiPGNFolderRB.selected    &#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;def getNodePlyNumber(node) {&#xd;&#xa;    return node.getNodeLevel(true) + ROOT_MOVENUMBER*2 - 1&#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;/****************/&#xd;&#xa;/**** M A I N ***/&#xd;&#xa;/****************/&#xd;&#xa;&#xd;&#xa;/* Build Dialog window */&#xd;&#xa;def s = new SwingBuilder()&#xd;&#xa;s.setVariable(&apos;myDialog-properties&apos;,[:])&#xd;&#xa;def vars = s.variables&#xd;&#xa;def disableItem(item) {vars.guiPGNClip.editable = false}&#xd;&#xa;&#xd;&#xa;def dial = s.dialog(title:&quot;Paste branch ...&quot;, id:&apos;myDialog&apos;, modal:true, locationRelativeTo:ui.frame, owner:ui.frame, defaultCloseOperation:JFrame.DISPOSE_ON_CLOSE, pack:true, show:true) {&#xd;&#xa;    panel(id:&apos;pMain&apos;) {&#xd;&#xa;        boxLayout(axis:BXL.Y_AXIS)&#xd;&#xa;                &#xd;&#xa;        guiPGNSource = buttonGroup();&#xd;&#xa;        panel(alignmentX:0f) {&#xd;&#xa;            flowLayout(alignment:FL.LEFT)&#xd;&#xa;            guiPGNClipboardRB = radioButton(preferredSize: [150, 20], text:&quot;PGN from ClipBoard&quot;, buttonGroup:guiPGNSource, selected:true, mouseClicked: {switchPGNinput()});&#xd;&#xa;            scrollPane(horizontalScrollBarPolicy:JScrollPane.HORIZONTAL_SCROLLBAR_NEVER, verticalScrollBarPolicy:JScrollPane.VERTICAL_SCROLLBAR_ALWAYS) {&#xd;&#xa;                guiPGNClipboard = textArea( id:&apos;guiPGNClip&apos;, columns: 60, rows: 6, font: new Font(&quot;Consolas&quot;, Font.PLAIN, 11), text: getClipboardContents(), wrapStyleWord:true, lineWrap:true)&#xd;&#xa;            }&#xd;&#xa;        }  &#x9;&#xd;&#xa;        panel(alignmentX:0f) {&#xd;&#xa;            flowLayout(alignment:FL.LEFT)            &#xd;&#xa;            guiPGNFolderRB = radioButton(preferredSize: [150, 20], text:&quot;PGN from folder&quot;, buttonGroup:guiPGNSource, mouseClicked: {switchPGNinput()});&#xd;&#xa;            guiPGNFolder = textField(columns:60, font: new Font(&quot;Consolas&quot;, Font.PLAIN, 11), mouseClicked: { guiPGNFolder.text = showPGNFileChooser() }, editable: guiPGNFolderRB.selected)    &#xd;&#xa;            &#xd;&#xa;        }&#xd;&#xa;        panel(alignmentX:0f) {&#xd;&#xa;            flowLayout(alignment:FL.LEFT)&#xd;&#xa;            label(&apos;Language&apos;, preferredSize: [60, 24])&#xd;&#xa;&#x9;&#x9;&#x9;comboBox(id: &apos;guiLanguage&apos;, preferredSize: [100, 24], editable:true,&#xd;&#xa;&#x9;&#x9;&#x9;&#x9;items:SUPPORTED_LANGUAGES.collect{it.value}, selectedItem:SUPPORTED_LANGUAGES[LANGUAGE_CURRENT]) &#xd;&#xa;        }         &#xd;&#xa;        panel(alignmentX:0f) {&#xd;&#xa;            flowLayout(alignment:FL.LEFT)&#xd;&#xa;            button(&apos;Paste&apos;, preferredSize:[110, 24],&#xd;&#xa;                   actionPerformed:{&#xd;&#xa;                       vars.dialogResult = &apos;paste&apos;&#xd;&#xa;                       dispose()&#xd;&#xa;            })&#xd;&#xa;            button(&apos;Cancel&apos;, preferredSize:[120, 24],&#xd;&#xa;                   actionPerformed:{&#xd;&#xa;                       vars.dialogResult = &apos;cancel&apos;&#xd;&#xa;                       dispose()&#xd;&#xa;            })&#xd;&#xa;        }&#xd;&#xa;        panel(alignmentX:0f) {&#xd;&#xa;        }&#xd;&#xa;    }&#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;/* Handle received data */&#xd;&#xa;pgn = &quot;&quot;&#xd;&#xa;if (vars.dialogResult == &apos;paste&apos;) {&#xd;&#xa;&#x9;/* Update attributes */&#xd;&#xa;    PGN_LANGUAGE = SUPPORTED_LANGUAGES.find{it.value == vars.guiLanguage.getSelectedItem()}.key&#xd;&#xa;    switch (guiPGNSource.getSelection()) {&#xd;&#xa;        case (guiPGNClipboardRB.model):&#xd;&#xa;            pgn = guiPGNClipboard.text&#xd;&#xa;            break;&#xd;&#xa;        case (guiPGNFolderRB.model):&#xd;&#xa;            dir = new File(guiPGNFolder.text)&#xd;&#xa;            if (dir.path != &quot;&quot;) {&#xd;&#xa;                dir.eachDirRecurse() { dir -&gt;  &#xd;&#xa;                    dir.eachFileMatch(~/.*.pgn/) { file -&gt;  &#xd;&#xa;                        pgn += new File(file.getPath()).text&#xd;&#xa;                    }  &#xd;&#xa;                }  &#xd;&#xa;            } // else no folder selected&#xd;&#xa;            &#xd;&#xa;            break;&#xd;&#xa;        default: break;&#xd;&#xa;    }&#xd;&#xa;    &#xd;&#xa;&#xd;&#xa;} else {&#xd;&#xa;    return;&#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;/* Initialization */&#xd;&#xa;pgnNotation = new Notation(pgn)&#xd;&#xa;nodeNotation = new Notation(this.node.getDisplayedText(), getNodePlyNumber(this.node))&#xd;&#xa;&#xd;&#xa;/* Determine starting node */&#xd;&#xa;// First check this.node&#xd;&#xa;currentNode = null&#xd;&#xa;if ((pgnNotation.getPlyNumber() != nodeNotation.getPlyNumber()) || &#xd;&#xa;    (pgnNotation.getMove() != nodeNotation.getMove())) {&#xd;&#xa;    currentNode = c.findAll().find{ //breadth first order&#xd;&#xa;        nodeNotation.set(it.getDisplayedText(), getNodePlyNumber(it))&#xd;&#xa;        if (pgnNotation.getPlyNumber() &lt; nodeNotation.getPlyNumber()) {&#xd;&#xa;            return false // node&apos;s plyNumber is over notation&apos;s (breadth first!)&#xd;&#xa;        }&#xd;&#xa;        if ((pgnNotation.getPlyNumber() == nodeNotation.getPlyNumber()) &amp;&amp;&#xd;&#xa;            (pgnNotation.getMove() == nodeNotation.getMove())) {&#xd;&#xa;            return true // found&#xd;&#xa;        } else {&#xd;&#xa;            return false // not found&#xd;&#xa;        }&#xd;&#xa;    }&#xd;&#xa;} else {&#xd;&#xa;    currentNode = this.node&#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;if (currentNode == null) {&#xd;&#xa;    return -1 // no matching node found&#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;// printNotation()&#xd;&#xa;pgn = pgnNotation.getRemainingText()&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;translator = new NotationTranslator(DICTIONARY, SUPPORTED_LANGUAGES)&#xd;&#xa;&#xd;&#xa;translationNeeded = (PGN_LANGUAGE != LANGUAGE_CURRENT)&#xd;&#xa;&#xd;&#xa;/* Walk through PGN */&#xd;&#xa;&#xd;&#xa;while (pgn.length() &gt; 0) {&#xd;&#xa;    pgnNotation.set(pgn)&#xd;&#xa;    &#xd;&#xa;    if (pgnNotation.getMove() == &quot;&quot;) break;&#xd;&#xa;    &#xd;&#xa;    //parse comments for Odds, Freq, Opening&#xd;&#xa;    comments = pgnNotation.getComment()&#xd;&#xa;    odds = opening = freq = &quot;&quot;&#xd;&#xa;    &#xd;&#xa;    &#xd;&#xa;    odds = (comments =~ /(?i)\s*odds\s*:\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*;/)&#xd;&#xa;    if (odds.count&gt;0) {&#xd;&#xa;        comments = comments.replace(odds[0][0], &quot;&quot;)&#xd;&#xa;        odds = &quot;${odds[0][1]},${odds[0][2]},${odds[0][3]}&quot;&#xd;&#xa;    } else {&#xd;&#xa;        odds = &quot;&quot;&#xd;&#xa;    }&#xd;&#xa;    &#xd;&#xa;    freq = (comments =~ /(?i)\s*freq\s*:\s*(\d+)\s*;/)&#xd;&#xa;    if (freq.count&gt;0) {&#xd;&#xa;        comments = comments.replace(freq[0][0], &quot;&quot;)&#xd;&#xa;        freq = &quot;${freq[0][1]}&quot;&#xd;&#xa;    } else {&#xd;&#xa;        freq = &quot;&quot;&#xd;&#xa;    }&#xd;&#xa;    &#xd;&#xa;    opening = (comments =~ /(?i)\s*opening\s*:\s*([^;]+)\s*;/)&#xd;&#xa;    if (opening.count&gt;0) {&#xd;&#xa;        comments = comments.replace(opening[0][0], &quot;&quot;)&#xd;&#xa;        opening = &quot;${opening[0][1]}&quot;&#xd;&#xa;    } else {&#xd;&#xa;        opening = &quot;&quot;&#xd;&#xa;    }&#xd;&#xa;    &#xd;&#xa;    //println pgnNotation.getMoveNumber() + &quot; _ &quot; + pgnNotation.getMove() + &quot; _ &quot; + pgnNotation.getComment()&#xd;&#xa;    //println &quot;      &quot; + odds + &quot; _ &quot; + freq + &quot; _ &quot; + opening&#xd;&#xa;&#xd;&#xa;    // search for matching node for current pgn move &#xd;&#xa;    matchingChild = currentNode.children.find {&#xd;&#xa;        nodeNotation.set(it.getDisplayedText(), getNodePlyNumber(it))&#xd;&#xa;        if ((pgnNotation.getPlyNumber() == nodeNotation.getPlyNumber()) &amp;&amp;&#xd;&#xa;            (pgnNotation.getMove() == nodeNotation.getMove())) {&#xd;&#xa;            return true // found&#xd;&#xa;        } else {&#xd;&#xa;            return false // not found&#xd;&#xa;        }&#xd;&#xa;        &#xd;&#xa;    }&#xd;&#xa;    &#xd;&#xa;    if (matchingChild == null) {&#xd;&#xa;        // no mathing child found, create it&#xd;&#xa;        currentNode = currentNode.createChild()&#xd;&#xa;        def moveText = pgnNotation.getMove()&#xd;&#xa;        if (translationNeeded) {&#xd;&#xa;            translator.setNotation(moveText, getNodePlyNumber(currentNode))&#xd;&#xa;            moveText = translator.translate(PGN_LANGUAGE, LANGUAGE_CURRENT)&#xd;&#xa;        }&#xd;&#xa;        currentNode.text = moveText&#xd;&#xa;    } else {&#xd;&#xa;        currentNode = matchingChild // matching child found, advance map processing&#xd;&#xa;    }&#xd;&#xa;    &#xd;&#xa;    if (opening != &quot;&quot;) {&#xd;&#xa;        if (currentNode.children.findAll{it.style.name==&quot;Opening&quot;}.size() &gt; 0){&#xd;&#xa;            currentNode.children.findAll{it.style.name==&quot;Opening&quot;}[-1].text = opening&#xd;&#xa;        } else {&#xd;&#xa;            opening = currentNode.createChild(opening)&#xd;&#xa;            opening.style.setName(&quot;Opening&quot;)&#xd;&#xa;        }&#xd;&#xa;    }&#xd;&#xa;    if (odds != &quot;&quot;) {&#xd;&#xa;        currentNode[&quot;Odds&quot;] = odds&#xd;&#xa;        //TODO: update oddsNode&#xd;&#xa;    }&#xd;&#xa;    if (freq != &quot;&quot;) {&#xd;&#xa;        currentNode[&quot;Freq&quot;] = freq&#xd;&#xa;        //TODO: update connector&#xd;&#xa;    }&#xd;&#xa;   &#xd;&#xa;    pgn = pgnNotation.getRemainingText()&#xd;&#xa;    println &quot;*********************\n${pgn}\n&quot;&#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;return 0" ID="ID_1216165566" CREATED="1540216117504" MODIFIED="1540216117526"/>
</node>
<node TEXT="updateChessTree.groovy" FOLDED="true" ID="ID_728751355" CREATED="1538315999856" MODIFIED="1540215984948">
<attribute_layout VALUE_WIDTH="134.9999959766866 pt"/>
<attribute NAME="menuTitleKey" VALUE="addon.${name}.updateChessTree"/>
<attribute NAME="menuLocation" VALUE="/menu_bar/addons.${name}"/>
<attribute NAME="executionMode" VALUE="on_single_node"/>
<attribute NAME="keyboardShortcut" VALUE=""/>
<attribute NAME="execute_scripts_without_asking" VALUE="true"/>
<attribute NAME="execute_scripts_without_file_restriction" VALUE="true"/>
<attribute NAME="execute_scripts_without_write_restriction" VALUE="true"/>
<attribute NAME="execute_scripts_without_exec_restriction" VALUE="true"/>
<attribute NAME="execute_scripts_without_network_restriction" VALUE="true"/>
<node TEXT="import org.freeplane.features.map.MapModel;&#xd;&#xa;import org.freeplane.features.attribute.AttributeRegistry;&#xd;&#xa;import org.freeplane.features.attribute.AttributeRegistryElement;&#xd;&#xa;&#xd;&#xa;import org.freeplane.plugin.script.proxy.ScriptUtils&#xd;&#xa;import groovy.swing.SwingBuilder&#xd;&#xa;import java.awt.FlowLayout as FL&#xd;&#xa;import java.awt.event.ActionEvent;&#xd;&#xa;import java.awt.event.ActionListener;&#xd;&#xa;import java.awt.Dimension;&#xd;&#xa;import java.awt.KeyStroke;&#xd;&#xa;import java.awt.event.KeyEvent;&#xd;&#xa;import java.awt.event.KeyAdapter;&#xd;&#xa;import java.awt.Action;&#xd;&#xa;&#xd;&#xa;import javax.swing.BoxLayout as BXL&#xd;&#xa;import javax.swing.JFrame&#xd;&#xa;import javax.swing.AbstractAction;&#xd;&#xa;import javax.swing.Action;&#xd;&#xa;import javax.swing.BoxLayout;&#xd;&#xa;import javax.swing.JComponent;&#xd;&#xa;import javax.swing.JList;&#xd;&#xa;import javax.swing.JPanel;&#xd;&#xa;import javax.swing.KeyStroke;&#xd;&#xa;import groovy.transform.Field&#xd;&#xa;&#xd;&#xa;import ChessTree.Notation&#xd;&#xa;import ChessTree.NotationTranslator&#xd;&#xa;import ChessTree.ChessTreeSettings&#xd;&#xa;&#xd;&#xa;/*************/&#xd;&#xa;/** Globals **/&#xd;&#xa;/*************/&#xd;&#xa;cts = new ChessTreeSettings(this.node.map)&#xd;&#xa;&#xd;&#xa;DICTIONARY = cts.DICTIONARY&#xd;&#xa;&#xd;&#xa;ROOT = this.node.map.root&#xd;&#xa;&#xd;&#xa;LANGUAGE_CURRENT = cts.get(&quot;chesstree_language&quot;)&#xd;&#xa;NUMBERING_CURRENT = cts.get(&quot;chesstree_numbering&quot;)&#xd;&#xa;NAG_CURRENT = cts.get(&quot;chesstree_NAG&quot;)&#xd;&#xa;ROOT_MOVENUMBER_CURRENT = cts.get(&quot;chesstree_root_movenumber&quot;).toInteger()&#xd;&#xa;CONNECTOR_CURRENT = cts.get(&quot;chesstree_connectors&quot;)&#xd;&#xa;ODDS_CURRENT = cts.get(&quot;chesstree_odds&quot;)&#xd;&#xa;&#xd;&#xa;/* Globals for odds image updater */ &#xd;&#xa;mapfile=this.node.map.file&#xd;&#xa;mapfilePath = mapfile.parent.replace(&quot;\\&quot;, &quot;/&quot;)&#xd;&#xa;mapfileName = mapfile.name.lastIndexOf(&apos;.&apos;).with {it != -1 ? mapfile.name[0..&lt;it] : mapfile.name}&#xd;&#xa;imgAbsPath = mapfilePath + &quot;/img_&quot; + mapfileName&#xd;&#xa;imgRelPath = &quot;./img_&quot; + mapfileName&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;/*****************/&#xd;&#xa;/**** Settings ***/ &#xd;&#xa;/*****************/&#xd;&#xa;&#xd;&#xa;/* Build Dialog window */&#xd;&#xa;def s = new SwingBuilder()&#xd;&#xa;s.setVariable(&apos;myDialog-properties&apos;,[:])&#xd;&#xa;def vars = s.variables&#xd;&#xa;def disableItem(item) {item.enabled = !item.enabled}&#xd;&#xa;def dial = s.dialog(title:&quot;ChessTree settings...&quot;, id:&apos;myDialog&apos;, modal:true, &#xd;&#xa;            locationRelativeTo:ui.frame, owner:ui.frame, defaultCloseOperation:JFrame.DISPOSE_ON_CLOSE, &#xd;&#xa;            preferredSize: [280, 300], pack:true, show:true) {&#xd;&#xa;    panel(id:&apos;pMain&apos;) {&#xd;&#xa;        boxLayout(axis:BXL.Y_AXIS)&#xd;&#xa;        /* &#xd;&#xa;        Text: Current language is ___. Check tooltip if you don&apos;t agree. &#xd;&#xa;        Tooltip: If the language of notation in the mindmap is inconsistent you should edit the mindmap manually to make its language consistent. &#xd;&#xa;        Otherwise change below settings and click on &quot;Save&quot;. It affects settings saved in Mindmap properties, Mindmap content will not change. &#xd;&#xa;        */&#xd;&#xa;        panel(alignmentX:0f) {&#xd;&#xa;            flowLayout(alignment:FL.LEFT)&#xd;&#xa;            label(&apos;Language&apos;, preferredSize: [120, 24], mouseClicked:{disableItem(guiCategory)})&#xd;&#xa;&#x9;&#x9;&#x9;comboBox(id: &apos;chesstree_language&apos;, preferredSize: [100, 24], editable:true,&#xd;&#xa;&#x9;&#x9;&#x9;&#x9;items:cts.SUPPORTED_LANGUAGES.collect{it.value}, selectedItem:cts.SUPPORTED_LANGUAGES[LANGUAGE_CURRENT]) &#xd;&#xa;        }  &#x9;&#x9;&#xd;&#xa;        panel(alignmentX:0f) {&#xd;&#xa;            flowLayout(alignment:FL.LEFT)&#xd;&#xa;            label(&apos;Numbering&apos;, preferredSize: [120, 24], mouseClicked:{disableItem(guiCategory)})&#xd;&#xa;&#x9;&#x9;&#x9;comboBox(id: &apos;chesstree_numbering&apos;, preferredSize: [100, 24], editable:true,&#xd;&#xa;&#x9;&#x9;&#x9;&#x9;items:cts.SUPPORTED_NUMBERING.collect{it.value}, selectedItem:cts.SUPPORTED_NUMBERING[NUMBERING_CURRENT]) &#xd;&#xa;        }  &#x9;&#x9;&#xd;&#xa;        panel(alignmentX:0f) {&#xd;&#xa;            flowLayout(alignment:FL.LEFT)&#xd;&#xa;            label(&apos;NAG&apos;, preferredSize: [120, 24], mouseClicked:{disableItem(guiCategory)})&#xd;&#xa;&#x9;&#x9;&#x9;comboBox(id: &apos;chesstree_NAG&apos;, preferredSize: [100, 24], editable:true,&#xd;&#xa;&#x9;&#x9;&#x9;&#x9;items:cts.SUPPORTED_NAG.collect{it.value}, selectedItem:cts.SUPPORTED_NAG[NAG_CURRENT]) &#xd;&#xa;        }  &#x9;&#x9;&#xd;&#xa;        panel(alignmentX:0f) {&#xd;&#xa;            flowLayout(alignment:FL.LEFT)&#xd;&#xa;            label(&apos;Root move number&apos;, preferredSize: [120, 24], mouseClicked:{disableItem(guiCategory)})&#xd;&#xa;            spinner(id:&apos;chesstree_root_movenumber&apos;,&#xd;&#xa;                model:spinnerNumberModel(minimum:1, maximum: 100, stepSize:1, value:ROOT_MOVENUMBER_CURRENT ))&#xd;&#xa;        }  &#x9;&#x9;&#xd;&#xa;        panel(alignmentX:0f) {&#xd;&#xa;            flowLayout(alignment:FL.LEFT)&#xd;&#xa;            label(&apos;Connectors&apos;, preferredSize: [120, 24], mouseClicked:{disableItem(guiCategory)})&#xd;&#xa;&#x9;&#x9;&#x9;comboBox(id: &apos;chesstree_connectors&apos;, preferredSize: [100, 24], editable:true,&#xd;&#xa;&#x9;&#x9;&#x9;&#x9;items:cts.SUPPORTED_CONNECTOR.collect{it.value}, selectedItem:cts.SUPPORTED_CONNECTOR[CONNECTOR_CURRENT]) &#xd;&#xa;        }  &#x9;&#x9;&#xd;&#xa;        panel(alignmentX:0f) {&#xd;&#xa;            flowLayout(alignment:FL.LEFT)&#xd;&#xa;            label(&apos;Odds&apos;, preferredSize: [120, 24], mouseClicked:{disableItem(guiCategory)})&#xd;&#xa;&#x9;&#x9;&#x9;comboBox(id: &apos;chesstree_odds&apos;, preferredSize: [100, 24], editable:true,&#xd;&#xa;&#x9;&#x9;&#x9;&#x9;items:cts.SUPPORTED_ODDS.collect{it.value}, selectedItem:cts.SUPPORTED_ODDS[ODDS_CURRENT]) &#xd;&#xa;        }  &#x9;&#x9;&#xd;&#xa;        panel(alignmentX:0f) {&#xd;&#xa;            flowLayout(alignment:FL.LEFT)&#xd;&#xa;            button(&apos;Save &amp; Apply&apos;, preferredSize:[120, 24],&#xd;&#xa;                   actionPerformed:{&#xd;&#xa;                       vars.dialogResult = &apos;save&amp;apply&apos;&#xd;&#xa;                       dispose()&#xd;&#xa;            })&#xd;&#xa;            button(&apos;Save&apos;, preferredSize:[120, 24],&#xd;&#xa;                   actionPerformed:{&#xd;&#xa;                       vars.dialogResult = &apos;save&apos;&#xd;&#xa;                       dispose()&#xd;&#xa;            })&#xd;&#xa;        }&#xd;&#xa;        panel(alignmentX:0f) {&#xd;&#xa;            button(&apos;Cancel&apos;, preferredSize:[120, 24],&#xd;&#xa;                   actionPerformed:{&#xd;&#xa;                       vars.dialogResult = &apos;cancel&apos;&#xd;&#xa;                       dispose()&#xd;&#xa;            })&#xd;&#xa;        }&#xd;&#xa;    }&#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;/*************/&#xd;&#xa;/**** Main ***/ &#xd;&#xa;/*************/&#xd;&#xa;logger.createLogger() &#xd;&#xa;&#xd;&#xa;&#xd;&#xa;if (vars.dialogResult == &apos;save&amp;apply&apos;) {&#xd;&#xa;    /* Handle received data */&#xd;&#xa;&#xd;&#xa;    def language_next = cts.SUPPORTED_LANGUAGES.find{it.value == vars[&quot;chesstree_language&quot;].getSelectedItem()}.key&#xd;&#xa;    def numbering_next = cts.SUPPORTED_NUMBERING.find{it.value == vars[&quot;chesstree_numbering&quot;].getSelectedItem()}.key&#xd;&#xa;    def NAG_next = cts.SUPPORTED_NAG.find{it.value == vars[&quot;chesstree_NAG&quot;].getSelectedItem()}.key&#xd;&#xa;    def root_movenumber_next = vars[&quot;chesstree_root_movenumber&quot;].getValue()&#xd;&#xa;    def connector_next = cts.SUPPORTED_CONNECTOR.find{it.value == vars[&quot;chesstree_connectors&quot;].getSelectedItem()}.key&#xd;&#xa;    def odds_next = cts.SUPPORTED_ODDS.find{it.value == vars[&quot;chesstree_odds&quot;].getSelectedItem()}.key&#xd;&#xa;&#xd;&#xa;    if ((LANGUAGE_CURRENT != language_next) || (NUMBERING_CURRENT != numbering_next)) {&#xd;&#xa;        // notation text modification is needed&#xd;&#xa;        updateNotation(language_next, numbering_next)&#xd;&#xa;    }&#xd;&#xa;    if (ROOT_MOVENUMBER_CURRENT != root_movenumber_next) {&#xd;&#xa;        // TODO: update Notation...&#xd;&#xa;    }&#xd;&#xa;    &#xd;&#xa;    if (NAG_CURRENT != NAG_next) {&#xd;&#xa;        // TODO: updateDetails(hide/show)...&#xd;&#xa;    }&#xd;&#xa;    &#xd;&#xa;    if (ODDS_CURRENT != odds_next) {&#xd;&#xa;        oddsView = new OddsView(this.node.map)&#xd;&#xa;        oddsView.updateCharts()&#xd;&#xa;    }&#xd;&#xa;    if (CONNECTOR_CURRENT != connector_next) {&#xd;&#xa;        connectorView = new ConnectorView(this.node.map)&#xd;&#xa;        ConnectorView.updateConnectors()&#xd;&#xa;    }&#xd;&#xa;    &#xd;&#xa;    &#xd;&#xa;    /* Update properties */&#xd;&#xa;    saveSettings(vars)        &#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;if (vars.dialogResult == &apos;save&apos;) {&#xd;&#xa;    saveSettings(vars)&#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;/*************/&#xd;&#xa;/* Functions */&#xd;&#xa;/*************/&#xd;&#xa;def saveSettings(vars) {&#xd;&#xa;    cts.getSupportedProperties().each{&#xd;&#xa;        def value = &quot;&quot;&#xd;&#xa;        if (it == &quot;chesstree_root_movenumber&quot;) {&#xd;&#xa;            value = vars[it].getValue().toString()&#xd;&#xa;        } else {&#xd;&#xa;            value = vars[it].getSelectedItem()&#xd;&#xa;        }&#xd;&#xa;        cts.setByValue(it, value)&#xd;&#xa;    }&#xd;&#xa;    this.node.map.save(true) // true: allow interaction&#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;def getNodePlyNumber(node) {&#xd;&#xa;    return node.getNodeLevel(true) + ROOT_MOVENUMBER*2 - 1 &#xd;&#xa;    // true : countHidden&#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;def updateNotation(language_next, numbering_next) {&#xd;&#xa;    def translator = new NotationTranslator(DICTIONARY, cts.SUPPORTED_LANGUAGES)&#xd;&#xa;    /* Translate each node */&#xd;&#xa;    c.findAllDepthFirst().findAll{it.hasStyle(&quot;White moves&quot;) || it.hasStyle(&quot;Black moves&quot;)}.each {aNode-&gt;&#xd;&#xa;        def text = aNode.getDisplayedText()&#xd;&#xa;        if ((text != null) &amp;&amp; (text != &quot;&quot;)) {&#xd;&#xa;            translator.setNotation(text, getNodePlyNumber(aNode)) &#xd;&#xa;        }&#xd;&#xa;        text = &quot;&lt;html&gt;&lt;body&gt;&quot;&#xd;&#xa;        if (NUMBERING_CURRENT != numbering_next) {&#xd;&#xa;            if ((numbering_next == &quot;white&quot;) &amp;&amp; aNode.hasStyle(&quot;White moves&quot;)) {&#xd;&#xa;                text += &quot;&quot;&quot;&lt;p&gt;&lt;font size=&quot;1&quot;&gt;${translator.getNotation().getNumbering()}&lt;/font&gt;&lt;/p&gt;&quot;&quot;&quot;&#xd;&#xa;            } else if (numbering_next == &quot;both&quot;) {&#xd;&#xa;                text += &quot;&quot;&quot;&lt;p&gt;&lt;font size=&quot;1&quot;&gt;${translator.getNotation().getNumbering()}&lt;/font&gt;&lt;/p&gt;&quot;&quot;&quot;&#xd;&#xa;            } else { // &quot;Black moves&quot; and &quot;white&quot;, or &quot;none&quot;&#xd;&#xa;                // nothing to do &#xd;&#xa;            }&#xd;&#xa;        }&#xd;&#xa;        if (LANGUAGE_CURRENT != language_next) {&#xd;&#xa;            text += &quot;&quot;&quot;&lt;p&gt;${translator.translate(LANGUAGE_CURRENT, language_next)}&lt;/p&gt;&quot;&quot;&quot; // pure notation without numbering&#xd;&#xa;        } else {&#xd;&#xa;            text += &quot;&quot;&quot;&lt;p&gt;${translator.getNotation().getMove()}&lt;/p&gt;&quot;&quot;&quot;&#xd;&#xa;        }&#xd;&#xa;        text += &quot;&lt;/body&gt;&lt;/html&gt;&quot;&#xd;&#xa;        aNode.setText(text)&#xd;&#xa;    }&#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;class OddsView {&#xd;&#xa;    private nodeList&#xd;&#xa;    private ROOT&#xd;&#xa;    private mapfile&#xd;&#xa;    private mapfilePath&#xd;&#xa;    private mapfileName&#xd;&#xa;    private imgAbsPath&#xd;&#xa;    private imgRelPath&#xd;&#xa;&#xd;&#xa;    def OddsView(map) {&#xd;&#xa;        /* Setting up internal constants */&#xd;&#xa;        ROOT = map.root&#xd;&#xa;        mapfile=map.file&#xd;&#xa;        mapfilePath = mapfile.parent.replace(&quot;\\&quot;, &quot;/&quot;)&#xd;&#xa;        mapfileName = mapfile.name.lastIndexOf(&apos;.&apos;).with {it != -1 ? mapfile.name[0..&lt;it] : mapfile.name}&#xd;&#xa;        imgAbsPath = mapfilePath + &quot;/img_&quot; + mapfileName&#xd;&#xa;        imgRelPath = &quot;./img_&quot; + mapfileName&#xd;&#xa;        dir = new File(imgAbsPath)&#xd;&#xa;        if (!dir.exists()) {&#xd;&#xa;            dir.mkdir()&#xd;&#xa;        }    &#xd;&#xa;    }&#xd;&#xa;    def updateCharts() {&#xd;&#xa;        ROOT.findAllDepthFirst().each {&#xd;&#xa;            aNode = it    &#xd;&#xa;            /* Update pie chart for winning odds based on [&quot;Odds&quot;] */&#xd;&#xa;            if (aNode.attributes.containsKey(&quot;Odds&quot;)) {&#xd;&#xa;                if (!(aNode.children.findAll{it.style.name==&quot;Explanation&quot;}?.collect{it.getHtmlText()}[0]?.contains(&quot;&lt;img&quot;))) {&#xd;&#xa;                    /* [&quot;Odds&quot;] order: white, black, draw*/&#xd;&#xa;                    updateOddsPieChart(aNode)&#xd;&#xa;                }&#xd;&#xa;            }&#xd;&#xa;        }    &#xd;&#xa;    }&#xd;&#xa;    /*&#xd;&#xa;    Google chart API:&#xd;&#xa;    https://developers.google.com/chart/image/docs/gallery/pie_charts#gcharts_chart_margins&#xd;&#xa;    */&#xd;&#xa;    private updateOddsPieChart(aNode) {&#xd;&#xa;        /* [&quot;Odds&quot;] order: white, black, draw*/&#xd;&#xa;        odds=aNode[&quot;Odds&quot;].split(&quot;,&quot;)&#xd;&#xa;       &#xd;&#xa;        chartData=odds.reverse().join(&quot;,&quot;) /* chartData order: draw, black, white*/&#xd;&#xa;       &#xd;&#xa;        chartLabels = &quot;|&quot; + odds.reverse()[1..2].join(&quot;|&quot;) // only white and black&#xd;&#xa;        // chartLabels = odds.reverse().join(&quot;|&quot;)&#xd;&#xa;        chartRotation =  -Math.PI * ( 0.5  + odds[2].toFloat()/100.0)&#xd;&#xa;       &#xd;&#xa;        chartURL = &quot;&quot;&quot;https://chart.googleapis.com/chart&quot;&quot;&quot; +&#xd;&#xa;                &quot;&quot;&quot;?chs=120x50&amp;cht=p&quot;&quot;&quot; +&#xd;&#xa;                &quot;&quot;&quot;&amp;chd=t:${chartData}&quot;&quot;&quot; +&#xd;&#xa;                &quot;&quot;&quot;&amp;chl=${chartLabels}&quot;&quot;&quot; +&#xd;&#xa;                &quot;&quot;&quot;&amp;chco=555555|000000|DDDDDD&quot;&quot;&quot; +&#xd;&#xa;                &quot;&quot;&quot;&amp;chp=${chartRotation}&quot;&quot;&quot; +&#xd;&#xa;                //&quot;&quot;&quot;&amp;chdlp=b|2,1&amp;chdl=${chartLabels}&quot;&quot;&quot; +&#xd;&#xa;                &quot;&quot;&quot;&amp;chma=0,0,0,0|0,0&quot;&quot;&quot; +&#xd;&#xa;                &quot;&quot;&quot;&quot;&quot;&quot;&#xd;&#xa;        // println chartURL&#xd;&#xa;       &#xd;&#xa;        oddsFileAbs = &quot;${imgAbsPath}/odds_${aNode.id}.png&quot;&#xd;&#xa;        oddsFileRel = &quot;${imgRelPath}/odds_${aNode.id}.png&quot;&#xd;&#xa;        file = new File(oddsFileAbs).newOutputStream() &#xd;&#xa;        file &lt;&lt; new URL(chartURL).openStream()&#xd;&#xa;        file.close()&#xd;&#xa;       &#xd;&#xa;        aExplanation = aNode.createChild()&#xd;&#xa;        aExplanation.style.setName(&quot;Explanation&quot;)&#xd;&#xa;        aExplanation.text=&quot;&quot;&quot;&lt;html&gt;&lt;body&gt;&#xd;&#xa;        &lt;img src=&quot;${oddsFileRel}&quot;&gt;&#xd;&#xa;        &lt;/body&gt;&lt;/html&gt;&quot;&quot;&quot;&#xd;&#xa;        aExplanation.setFree(true)&#xd;&#xa;    }        &#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;import org.freeplane.features.link.ConnectorModel&#xd;&#xa;class ConnectorView {&#xd;&#xa;    private final MAXWIDTH = 15&#xd;&#xa;    private final HSHIFT_LIMIT = -50&#xd;&#xa;    /* Errors */&#xd;&#xa;    private errors = []&#xd;&#xa;    private final E_ACCESS_METHOD_GETCONNECTOR = 1&#xd;&#xa;    private ROOT&#xd;&#xa;    &#xd;&#xa;    def ConnectorView(map){&#xd;&#xa;        ROOT = map.root&#xd;&#xa;    }&#xd;&#xa;    &#xd;&#xa;    def updateConnectors() {&#xd;&#xa;        ROOT.findAllDepthFirst().each {&#xd;&#xa;            aNode = it    &#xd;&#xa;            /* Update edge based on [&quot;Freq&quot;] */&#xd;&#xa;            if (aNode.attributes.containsKey(&quot;Freq&quot;)) {&#xd;&#xa;                updateEdge(aNode);&#xd;&#xa;            }&#xd;&#xa;&#xd;&#xa;            /* Change edge to connector for &quot;(un)wrapped&quot; nodes (with negative (positive) horizontal shift) &#xd;&#xa;            with &quot;*moves&quot; style */&#xd;&#xa;            updateNodeConnector(aNode)&#xd;&#xa;        }&#xd;&#xa;    }&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;    private updateEdge(aNode) {&#xd;&#xa;        width = 0&#xd;&#xa;        if (aNode.parent != null) { // not the root &#xd;&#xa;            width = (aNode[&quot;Freq&quot;].toFloat()*MAXWIDTH/100.0).toInteger()&#xd;&#xa;        }&#xd;&#xa;        aNode.style.edge.setWidth(width)&#xd;&#xa;        //println aNode.style.edge.getModel().getDash()&#xd;&#xa;    }&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;    private updateNodeConnector(aNode) {&#xd;&#xa;        hasConnectorFromParent = aNode.connectorsIn.collect{it.getSource().id == aNode.parent.id}.inject(false){a,b-&gt;a||b}&#xd;&#xa;        hasHiddenEdgeFromParent = aNode.style.edge.type == org.freeplane.features.edge.EdgeStyle.EDGESTYLE_HIDDEN&#xd;&#xa;        hasMovesStyle = (aNode.hasStyle(&quot;White moves&quot;) || aNode.hasStyle(&quot;Black moves&quot;))&#xd;&#xa;        hasNegativeHShift = (aNode.getHorizontalShift() &lt; HSHIFT_LIMIT)&#xd;&#xa;        &#xd;&#xa;        if (hasNegativeHShift &amp;&amp; hasMovesStyle &amp;&amp; (!hasHiddenEdgeFromParent || !hasConnectorFromParent)) {&#xd;&#xa;            aNode.connectorsIn.findAll{it.getSource().id == aNode.parent.id}.each {&#xd;&#xa;                aNode.removeConnector(it)&#xd;&#xa;            }&#xd;&#xa;            &#xd;&#xa;            conn = aNode.parent.addConnectorTo(aNode)&#xd;&#xa;&#xd;&#xa;            conn.setShape(&quot;CUBIC_CURVE&quot;)&#xd;&#xa;            conn.setColor(aNode.style.edge.color)&#xd;&#xa;            conn.setStartArrow(false)&#xd;&#xa;            conn.setEndArrow(false)&#xd;&#xa;            &#xd;&#xa;            def ConnectorModel connModel = null&#xd;&#xa;            try {&#xd;&#xa;                connModel = conn.getConnector()&#xd;&#xa;                if (connModel!=null) {&#xd;&#xa;                    connModel.setWidth(aNode.style.edge.width)&#xd;&#xa;                    connModel.setAlpha(255)&#xd;&#xa;                &#xd;&#xa;                }&#xd;&#xa;            } catch (e) {&#xd;&#xa;                //getConnector cannot be accessed...&#xd;&#xa;            }&#xd;&#xa;            vShift = (aNode.getVerticalShift() + aNode.style.getMinNodeWidth())&gt;&gt;1&#xd;&#xa;            //aNode.children[0].findAllDepthFirst().findAll{it.getHorizontalShift()!=0}.each{if (it.getVerticalShift()) println it.getVerticalShift()}&#xd;&#xa;            vShiftOffset = aNode.children[0].findAllDepthFirst().findAll{it.getHorizontalShift()!=0}.collect{it.getVerticalShift()}.sum() // children at the topmost position&#xd;&#xa;            vShiftOffset = (vShiftOffset == null) ? 0:vShiftOffset&#xd;&#xa;            conn.setInclination([0, vShift-vShiftOffset], [-2*vShiftOffset, -vShift-vShiftOffset])&#xd;&#xa;            aNode.style.edge.type = org.freeplane.features.edge.EdgeStyle.EDGESTYLE_HIDDEN    &#xd;&#xa;        }&#xd;&#xa;        if (!hasNegativeHShift &amp;&amp; hasMovesStyle &amp;&amp; (hasHiddenEdgeFromParent || hasConnectorFromParent)) {&#xd;&#xa;            //aNode.style.name=null&#xd;&#xa;            aNode.style.edge.type= null&#xd;&#xa;            aNode.connectorsIn.findAll{it.getSource().id == aNode.parent.id}.each {&#xd;&#xa;                aNode.removeConnector(it)&#xd;&#xa;            }        &#xd;&#xa;        }&#xd;&#xa;    }&#xd;&#xa;        &#xd;&#xa;    &#xd;&#xa;}&#xd;&#xa;" ID="ID_1432480978" CREATED="1540216117528" MODIFIED="1540216117530"/>
</node>
</node>
<node TEXT="lib" POSITION="right" ID="ID_328124690" CREATED="1521562135185" MODIFIED="1540216035574">
<edge COLOR="#7c007c"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      An add-on may contain any number of nodes containing binary files (normally .jar files) to be added to the add-on's classpath.
    </p>
    <p>
      
    </p>
    <p>
      &#160;- The immediate child nodes contain the name of the file, e.g. 'mysql-connector-java-5.1.25.jar'). Put the file into a 'lib' subdirectory of the add-on base directory.
    </p>
    <p>
      
    </p>
    <p>
      &#160;- The child nodes of these nodes contain the actual files.
    </p>
    <p>
      
    </p>
    <p>
      &#160;- Any lib file will be extracted in &lt;installationbase&gt;/&lt;addonname&gt;/lib.
    </p>
    <p>
      
    </p>
    <p>
      &#160;- The files will be processed in the sequence as seen in the map.
    </p>
  </body>
</html>
</richcontent>
</node>
<node TEXT="zips" POSITION="right" ID="ID_188436602" CREATED="1521562135191" MODIFIED="1540216035581">
<edge COLOR="#007c7c"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      An add-on may contain any number of nodes containing zip files.
    </p>
    <p>
      
    </p>
    <p>
      &#160;- The immediate child nodes contain a description of the zip. The devtools script releaseAddOn.groovy allows automatic zip creation if the name of this node matches a directory in the current directory.
    </p>
    <p>
      
    </p>
    <p>
      &#160;- The child nodes of these nodes contain the actual zip files.
    </p>
    <p>
      
    </p>
    <p>
      &#160;- Any zip file will be extracted in the &lt;installationbase&gt;. Currently, &lt;installationbase&gt; is always Freeplane's &lt;userhome&gt;, e.g. ~/.freeplane/1.3.
    </p>
    <p>
      
    </p>
    <p>
      &#160;- The files will be processed in the sequence as seen in the map.
    </p>
  </body>
</html>
</richcontent>
<node TEXT="templates" FOLDED="true" ID="ID_1849114914" CREATED="1521565216661" MODIFIED="1521565216662">
<node TEXT="UEsDBBQACAgIAIKad0wAAAAAAAAAAAAAAAAfAAAAdGVtcGxhdGVzL3RlbXBsYXRlLkNoZXNzVH&#xa;JlZS5tbe0ZaXPiyPX7VOU/dDRTE5wdhO5jDXZhwDa1HA7Inp0Yr0qWGtCMkFip8bGbzW/Pa10I&#xa;kDGZSW0qlZVrQHS/fvfVb+oLa4kecBi5gd9gpiHGS8/yMeJZheWYkz+9qf+5WjUC9ODiR0Tmbo&#xa;Smroc/ICd49L3AchA9ghau7yDAtHT9GYqCKXm0QozOc2zTMFigOSHL72u1nAYbBavQxtMgnGHW&#xa;xwRVq5SeRUjo3q8INkM8cyMSPqPx5fCj2TSMUffs2uiMG0yEPWwT7FAGETyFQ761wGjUGQNwy+&#xa;i0GwwJV5hBg2a/02BacxxFBjBwFQZLHBIXRxmKLTQPlrfC6KbZu4ZjTC2jU9sk9AL5fnNw3exl&#xa;pF9ipmf5s5U1w4dwgP1ZzsQ+OFDuQXDzlX8QXPS82Cd8cSmzFl32Awcjo/OjAZxLDOoNW81e9+&#xa;+dtjk2PvU65qhz3mCaKxIsLOLaPes5WBHWww/YY8MgIAw6H/baVF1Ty4tAX1147bZNSVV5med4&#xa;nkGtUacZK5SXBV5QNU3jRZ5jUH/Y7p53sw1FkBRNUniROanPg+BLqvi+tRyTZy9XfN0OfMclEA&#xa;GWZ0Z0JyqqZmcXNVtG96aTWbMg08e5SyAaggfwK9Rrjo0UpoAuQ/l55dvEzHFvQcRQVIsmuKkb&#xa;OK5txvpZH0BXnVF3CIIK1MP6ze6g3Rk1GG7DrDmqyA7d5X5yBbiTK3Nw3T8DAoML1EC1ysT5bs&#xa;JWJuyEPTo9qr1/++Qcv7ky+8ObTrxdueWGd1X6UYk/AegfFfYU1q3q/O6Wr2p3p0enT/BvvVBp&#xa;UFxHt5PvJm/vTnOcg2ZCsTJ5N3F+5T+IvwGq258mj3e/ch+E344y6n5ALCrIFTggDv34zOkiWh&#xa;399K7A/Okk+uu7hNHkDdBntJLPEJMVHK/Q1MZShbMzTNpuBBnqGTsGfiKVI9Ro/BNtETyq11Jd&#xa;lWi79oq667W9DhBvb7rcV/rjmWfZX/6r/sj/4Y//v/6Ypu/S9O/gqbXySOaWCei61LyYkuvLvH&#xa;SjaB48mi6AmtBEmHkpinLKU5eYJDBp87IMQpKuHzPJSVAhjo9HWejYtD8g0B+YXlqc16UXyhp0&#xa;OGtm6vFbXOnWAiY1L4GJa5lJAdKYbDABFFcGXQ+658NR3xxfNq/yqL25aF6Zf7tuDoyu8QmiSG&#xa;I5tCRxBzYNfILGgJ8ux7y8TnsZYtCw60OPhK6G467RHQ4aTOjO5iTn5n51f59UwT34cju1hr0h&#xa;BPRbLn5yJKD5L2sukwLbDF3LQ9c+6BYw9sdMyj2t0GdQ2teF3QBaraL1wVczVg7iKwZgHUws14&#xa;sO5UP7BlJrL/s9qFEX3VX9WbP1w8VoeD1om9nWNH6YuOkyAd8FWLvXOTd+DyancBEg0PnHtLAz&#xa;w5lvzF0oGHQhQW57wcrJhZly9A/oJ1GQiDPqtIwEeB/PJaweyngaHqsIh9WvC5AEz0an90JopM&#xa;fL471oqFZnYHRGOzlATlIA6ncH5sdu27iEJY6uPW2nBV7IAitGXts2xD3+xcUhg1Is0EC3m2N4&#xa;GQ973XYCvm7kvbgfT24AGV1elFidPrKuKoqmKJSxvR6TqGmjATnAjZX4+UODaw0Ol9insZVrT+&#xa;Po32ZJ2QqYCwx3atdax3ZRtDzplgu6jtkdiqkk0Jr4h3DeeaLX/LhJ2V89XjdvnMngWv1jpk2B&#xa;S814gGm1zaJziMRZNn1F4n8z6WzdeL+xMO+7P/+vJKRXdbr1a7MBq9E7/bdEXn5ueyKzPSbZgS&#xa;wbJG1Mi16UtjgakUtcIJ118BonKbzEK9LWsENWBEUQZU7dHnbIiijK8Cm9aLbLrWWBFSRQi6Yp&#xa;HKfwAifFUDfjy+65UYBT+UR9qiZLgihoUtaXFkT5AVLUe2sZRMcR3GOs46X16G/cRPM0lsmnKq&#xa;rEC5Iql8gnq7oq7Mon6CChpO0IUpVEVo0lEVRN52VdLBekKicC65okyqKq8UImSWE4RIeWA9qz&#xa;J76ZuV5BVkcsWInnOYHT9e2RFBhDUClPpVZSRE472EpKKpsqyDqYXS6XjUugwEqqImmCrOklVu&#xa;rCncrabxdR0xWNUynj2wLBI2nSHoG2zSKnjqNxogjerGrlrPMcm7CuaCrIB/b/OrNIa7OAonRO&#xa;EoXt4NEEEA8cfse56IYqgYa3VYZ/QXj2jD6DV0/FY+TBN9aPl8lXhCA3+esBJc/zECCSyqsldF&#xa;WIHrmMrgYJSt1JDlbk5Hg1WVY46It20eq8Dgl+x8viDZ4DcTbVtftSoGjvS0eCwPGSXpqOqNFE&#xa;vsQvBEHkZOE/nY6qkpq6lazokqbJaomnF3oPlmU3PH6jLckdRtNlVdKUkmykqTqvloknC4oqKD&#xa;ty8Goaihr4GaQ4/YWIhaSVgKmcKOs6x8di1EPXnttQSDHUUuMTLc/tjtHs9sZURAgJsvBO3iBU&#xa;n2PLOYknIvRXLftZvw+c55N0UnKSDmlo4KD1xRXZlo/u8ffpqGW5DX77/udVQI6HjhMlb3eoit&#xa;wpwk9uRKIPaOliZM+tkKBH1/MAE5phH4cWwQ6yImTBpus5KDbHo0vmqKBylFwZXyEN0f5zKelH&#xa;1wF8wTRG/pcIub4dLBb0f53ielsJQgTK87FNgvAoZ89yPq+imDvbDkIHwL3nDRbqtURtoMdYv/&#xa;VawQyHZaKSF+hW4PtfUEsHCBPvSGrWBwAAYhsAAFBLAQIUABQACAgIAIKad0wT70hq1gcAAGIb&#xa;AAAfAAAAAAAAAAAAAAAAAAAAAAB0ZW1wbGF0ZXMvdGVtcGxhdGUuQ2hlc3NUcmVlLm1tUEsFBg&#xa;AAAAABAAEATQAAACMIAAAAAA==" ID="ID_1607683939" CREATED="1540216117556" MODIFIED="1540216117617"/>
</node>
<node TEXT="lib" FOLDED="true" ID="ID_1750925238" CREATED="1522351097503" MODIFIED="1522351097505">
<node TEXT="UEsDBBQACAgIAHWJTk0AAAAAAAAAAAAAAAARAAAAbGliL0NoZXNzVHJlZS5qYXKMumNwZm+37R&#xa;12dMe2bTvp2LZt20lHd+x0bNu2bZsd206f/3P2+5zae79V+5xVa1bNqqtW1fpy/WqMMaeiDDgE&#xa;Ggg0NDRII3igLMh/erBAIEBELM1cXFSdzcwY5R1cjVytHOwZTGyNXFy+J0BAinm8fiav3rFedv&#xa;vC+tOel3oS01wyrJKUUT1hKCGQngJ/JaILGB42yLhjxki5sMllFrFrmCRmlEi5/CaTU46jwnLh&#xa;9PC3ui60u/7o2Wg6u7Phfeh2SIV0Rw/oFXQ/xmd9MD+e7uK8Cab86/fiB6IYZEA8RtuxJFnEXF&#xa;Uh5pZfxniOCEn/Czq99LXlIxKsx9BC6WtFZamlDBIAncQzmD/3nG3cJW0zai4Hjc0MExoE6MdZ&#xa;krDMz9hHwSTG6hTZVINQiTOwI7U9sddzeFFnjza0gnPzqOynCqqmrGPl4KGocv/4FAqoa1Tijz&#xa;mOVjKwCFmajrkVtqMF65Es4llDFnZcCRnIFrPLd2+eXMWlXmBHrMQH1c5UpYlcTCRJWVFPVOwE&#xa;A1UogOxcLlPIFE/TTLJ0sbMN8lzQ0Sn8tm8mPr+4Ju5phn6DIa2uzlkIrRZy68TRP7w4UwomNy&#xa;NQ0LLSOvt8g5uUQZ6KGo88fUFquEfhW0SCT7KKuuckjp68Ui2k9Q38GSxYwQAX5vdHQUHf38W5&#xa;0Tu4y1kJd14ivIdqpE0yyDbNOowtDchEPK68/JZJlgZgTTOl+GicVFCPq8XGxuwyUJo+u5dkhg&#xa;byEVvV4EfHh4GoO0pD2HIkXqb0MWiHohRFqTOvc1GV8mCp8S7XQfI14W76Beo39wSz18zUYguJ&#xa;ik8Hs/AmC7dDJMa3/AxiLlAj7tec16YTAlom5MrEHrcCW+p6KTt8LVTNIs2uenKoLhqSjfPpq9&#xa;4LrKvjnrk4a71M0S7en8S/AkkKSLZTBmF56YJ/o5hGLmuQcnly4jZhVeMDGMgZBcU8pep+VHgp&#xa;rEjHQ6JqSsML78/bhlvNysN6vG4sQWKUFbJvfCHvrvzakK+E2vTbfw55+ucw0ZA/yzDMe80wTw&#xa;QUCTaWto+uLkE5MEzjETio3WM/VinlJk+Hc9abTCCHl9gHR1kySGFJUkxKQ8/CaUVHeWgLxHD/&#xa;Yx7SRMATXpfBwV6VGC9+dYqVmxoSJfmZ8F7Xm5RFLZTpqMgrVoJFXuoWXi8Pg8eU0zo6e12Y5H&#xa;LmpJU7sAKyuRHDRLm+H781hoQrJZSxs3BtTW0bwaUDm62eR6pi728xex3k8ay72lBYnOesHmXT&#xa;OAn7R0jlIYWVE3Xc3f048VrS4Tslxfxg0mZ9f8Ihok3b+T6j9Y+t+3Hrn7qmaYgqRxyvkkFC29&#xa;2fXpJX5F6j9fnakSHpCSjkGyvF5Pdnjj8oJ1/WfaxcwxzJ1Mrnn/YV43Bir/GOgwq9rmy5wrqf&#xa;wRvSamIJDDSrF5Q5t9aO4BDg0pYqFla+kWZMfvsP0WBjYZ39MelGwsCL6xZZ7kTyHzj/SobMwE&#xa;rD1kRaiZU+LtNoT9ZojzbTwV7DWsMueqg6Lqgcw5WQuadBtlre5geFu8RWBoRjw30GHfxEzOji&#xa;o/1MZLj5ZI3cJrdwBtHa5+n4eGjW5An2Xl3szt51Ns8i2oXlXLBLv2Szk3fHvm92bsSvARo04q&#xa;MEMwNGSOgEM/Dns/nZCGwR49MKfluH1XIi2RXVj9QxYp1Bh3Y+eZ9wQi+sKFLlvQfhBuuIlMJ3&#xa;JqMKHyK0LSK0Djp4PQF+pANGmOOxubCiLeLFCO7s7Gw0eHk6Iy+qmfqCUbFkTZki5AtTwtGvj2&#xa;IHDFmCqQENZ9GFZC0DN22cv2OrhGn5Jq6sACWsaf2/rm1sbFGrbgWHUma5//rkTBoxRQkxBK8D&#xa;jpnSJonihATAKbN/eXcs3cYofGu7WdcyEvUTiuJ8JpTrArYAsFhoLFTGilN5IYFhQtTBXoAJrG&#xa;TWtFlD0OBQAA0WnXFdmhB58A2z5oAhdbAZIIVVs9+QPFgNoM5aZlwHFGIPbgaszLe39jTbm1zd&#xa;q+FWXFSUdWnvauv0WqGLnb2voD81N1ee45TLDR9Y83S1xbN5nMLrKNLSU4tSSQer7i7BPy+eLd&#xa;REpdZhnC9bQ1b+1r4Qm6ZhlooOVis3UpzMixXiD35qYg8NDVXHE1HqN9Oramq2zv5JNaVKGc/m&#xa;RzuEkVdlB8pzWrczL5ZajU5dJasD3tNip750YAlOXV1J3rTX/+NHDIADFnIVEWPONqTtlaW82c&#xa;iSnd7lKVUGUoRtlXCLYKPkOAXA+/CYhbdsFaLIfH5pewob2rylWxin6YjROYgZwQEcKhjtgXU9&#xa;IsuKcblMi3KREu7EOcu3yesGRguX8a2ko+JWzCiw0BgJ8HiJ6Kqmw0IpMS+jW9cing8jLutcRU&#xa;hHGturQgbW+J7DupRRQGqOZaDNL6M9uqkQ4fgZ7SxH99MXoYS9MGoVJ5siezvLksWKPv1g3IeX&#xa;6C2M3ZXlWaoHTK6HvKEtaPcLir7J538OzajSZN/+fXBRLmUYGK5SKs5JK5B0B1AjPd3jpe4pe5&#xa;/usUwI+o+Roy3XFCllFEyNorclpuqS93PFl8eK8nTdi384Nzsy0w6rot/sTCT4jxN+qWgOuGma&#xa;lI7aViPhaagNeHvHz0FkmymLyrF5OuvDXnCVFA3x5aP8fmtMTNRxXGSOyj/k9iezHUJdnI+SOy&#xa;AiBGSbqDpJRMWb2xolPKZJxpFF6r4GLGfe56ErmKcLXCUJ25uG1ZZmkMAa2dpvzp38XYLw3+gu&#xa;ACpCZe/h02Tz2T0ujLqrcgedbtvqbWHM9TBKro0w3rM9JnUJXWcg5dZtcrWtUmyMH352jNjz/o&#xa;i/5tP5Jc4RcVm0eqAN43OrmgMnk9dHps9gXeAxu9IIu80AQxFJXJE3Iu49zt5O3t6vuLQrNJEp&#xa;JjLA2qQA8erXEWjMptcjuQoLq2AHD2tlY/tzwOXWtuRbCMyNzZ8Y4Nc5LCimaYKG8g09a/JMqJ&#xa;IxsrY5RvZ9WmQEwxhSLXuHimCTbRwWt+1gSrYvJrwdFUHqQB9A3x91q0zQHi055rPRd8RXh2u0&#xa;pViZepfZj+Eg4/kb6fkB4m+Z77IKRvo/f2HgGGM1ZINCV6I9jHmbO/Nboop63014pRbl9AdiNU&#xa;z7QedwPKJkNfmnGLlVhF2oubtU+LU57XdGBpk1NrvDfq1Lt/YDR0NrNthOZGtSCyj7GvZVw0F2&#xa;kYoOFVYxC4nxcLfqbsgyAY2iasNq5EdE9ybhZXF5Z3hdJqxjgIJhKTqiEzvGQu+JptMvUxch8+&#xa;HON+FC46HIF8VKyr6ql3rVAAuNpvzJXSFWRMUs17DwV2LYQFMgSfJJMdejst/o3GtTQzLHo3hX&#xa;hMsxM8TsHVz9Huogg54TTon3xp6Kuy9KuXeuc/Jly97NuOUGGkxu8a9hi1tuGMIRCc1pTOUuDb&#xa;Z9RuarySZ4gf20g8PvX+G1B4S2RfuEVquba4m6IeujrwzIH+IZzLZjQQ6KMNIKtTwVWmS+cAat&#xa;h5mvHANNQgMd8eLSN83LaLFXlQP7imtBNyRTWBTRNC5CTtqZG4Xdf279lAxWF2RGVqXgfCXP4g&#xa;j3JD6DsoxHX25RYWmcFsbYiVnckxgvT2pNYgCSuzgBioxFT8g+ImWcWyU1z1CqaTBWhhDO4NHF&#xa;Kei2n9NBgrbWXHqjibGjp55VsayuWeNcizMv/Ptwbx/I+y5vrIRGuLn5OOpsticq2YQ2TQzrIO&#xa;G5dzowgLzuMyhD7+pFs9OwLL8NqOTZt99SUXOZhOZCDAHzhSu2aSLRBrcSUCgmZL811wB6ax5s&#xa;LMBbYgvBP0l9POtqRqrRMyvBinlY3Uus1BTX6P9UOjrrizRa46qi/XgDoM/3mnGq4bZKrd7ZIc&#xa;G4WEsnRS63eqrhrkqv3sUhwvgF5xryEKSqQlJjwatMWuqFB7G/A1Yqoc2gUnIH1LINZ8qPKf+n&#xa;/SOX3jrZBVOWKYQDYRHt3oQAhE5XsPssUSqWUa49ZytbZ7M6bZasqoHljmTw5NibxxxiP5SOGy&#xa;NdsdNVjDxB2bxbpZtNRvvLwc4rDYrTPK5BVeLe4h1EZr6Y5CBdollxO+nlLKjiS18R6OkG+L0/&#xa;15F1vDGQ3RzXHiKqHjEayL/HlIzbGO0UgN0Nec/R8M4EAb83zbGFRqnaMCmnVcJF3Pr8HAgDsw&#xa;RAtZxhGT2b0r9fJ+Zya6vqp69a0hZWDxpnZRvFi4VaMtqu38JxtUXAti061ZN16gQO2JCK2SA+&#xa;MRZ8258bzM5PEtKERtmii/Yi9d2TjNbhldPeTnTjeeh7QUFlcRJYylDNZXn0o3idgGRpGSnR6b&#xa;f6pkjU4wFdrCYl90Ff7wja5ulzb5wmMedChKKS9H4wDeOgq7f6JoSFqLYfRUWcJ4rSmFTlayIO&#xa;zlJ1ULlu3x/J9gzR31Dc0556mJHIdDlh+ef8MIbJNEbd2EBpKvakjLna6fm7dLeH3NYxLlu/bE&#xa;plaUmig5sxtvBjsttRLkmoJwX4x2A+3ldEJEmrpzyf8F3zB3k4pxk0Nkb7kQ6f9DuSRZHfcYoD&#xa;ebZDYUSCOYca0sMOv6Ea2YaV9ATzBFbCpcnYtd9Qq2DCLNsYp/oJLu0rSzLAmOsnwIOcJQ0Km8&#xa;UNKNvPJI9NOZPgNOQR/4pAfq8F9WaarYDhizBMPIMGdffk82fQ/s1+J6cgxI+IKM1UgzDaY1IC&#xa;iKIarTESpWLTpTE+R+XRfuTDJw30zb1ceO4mkRknyWywjPmQaoU6fSH6IjDOCIPy2GQbyEdHTY&#xa;bRfqdCDX9BLgmgk8+HPGFbKG4oNy7Q8d9arJCyWsDqmhB1IJQ/WvckmkVrStq6Rx20pJxvf2nW&#xa;8VeOmyrFwgSIE0GlKiEyJEGXl3IX5URAJhZQ6YvN2zJ6TM4m2s3O33i9d+8pJSf0Z1u6EVrOGz&#xa;Brpcs6UyRlM6Lsyjz6pHvGkAaZzXGrJFMPcKuEn/1emhl3n6xFYOXa5D1NF5z3MqfLzWBn91eX&#xa;I/dQbaMpoV4UfZQ/hDPvYNELWXO9nlY0D5fL7e9On5BFFmft9gNC2r81m3o98KQ/ikd2jc8Psk&#xa;iEHNGZpWh6YWg9U9x1/yZxcHbr0e3n1EmXAzigDvJS35vHzjBJME2pHcMWHqPsdg696P/z4eLb&#xa;PYRBTyIjYIay56W5621P0+thv67LiUZ+X7hUIx1/MjOOb+Kyv8uJ2jYpauU1zfUjxD934Ya1hN&#xa;t7pw29FRqe885/5nFcpLCPPoCZjg1W+UguX+fbGcsufyyz9rHr7d3zoUSS+p5GrL7rDWj7wfr1&#xa;LdzrwC89f3pfoklNwT1semIQcePw+BHrGZfCSS4d4SgPw/zF3+wiuSQIxL7ETuAs1iq+66JG92&#xa;JVSKcs8CA4EU9XphCuivY5km5fe3S+ntY4jmLKUMj4VHk56AV61RsHNvzcCoBDsQkjqIjqv/et&#xa;cs9LKcOnSyndCyhH4ejDmiS9dbBWgjFrR/wWoUdF07Ivuh/4gZFltRP2qB7i2sV7hSdbqA7cR1&#xa;uL+2FNPeLwWL9+jPtYT1KN4QV+nNR1tpQr9PQsWyFsvvju0gfukg97X0YwHnbSD0MoDHqMokCK&#xa;dshA1e/TH7wrbKUNmlycDQu34D5Q0DRp6LSx+GeaTdN6LOQIKKxpdwqkGRTSNHmFqIhZV7RxFc&#xa;6uR+HAWhUOvhO1ZHPvEz9EoGK5DjI+HFQ0/sTgKwGjYi9XNO9Ax0h77idZRK1bsw2SdoGkY68N&#xa;PDpG0LTrwa6Yyh3EkUFQ1cHJX2lAP6frrut3ZmDTZAgVn2yum3fm9SwPYhmBW2W5N8/4xijb58&#xa;fWqt4QV62kRG6kLg4vmA+3pDB3kUYmL0TuX24gZzigwTFD3qYbOPpZGfYrJjDbpJolB4ctsSZm&#xa;qFF8Uk5pgQJJSiq86t7Ez9B9T9POsihxU5yqPX1pUtLqpGB+rT00jfWQhKAkzwJZoyF8ySGYXE&#xa;SeE3Od1b6Mf0Po1+HLr+lAVLZCCqtRgeWbKIlbmsI/+EbT1xA2lxvgbb9ben7bpuO1lmUqp9Br&#xa;599soe00XSJncjylZXI4v5mRZnmx0PPQH/mrxpoL+g7x8ReHV8yHGx5jU4vRYceEt8gOpacVRn&#xa;HJ8YKBqtsw3rKd7FX/idyWZuj5rbtRHeKF2Mf+KY1Odv3jkP+ZIjjfH2QbXJNOfTRkdHPi9dCO&#xa;POU0rvX3aT77omSUclapzbyYjy2J7ox22xs3B4/aD0fQ7q1neJ1muh5rLd9lFt2yWm1kH9iBiA&#xa;0xEMUqfkiJ9r0XlGq0XT7Ywwv0yCeWmM8A1XeaYtFBVZfsMMf2LHdWzWzwNu8bf12VQ28Ai6cr&#xa;yEWGNcIezioxX2AoeLkWISZT1Np6SETTYLNcXJBT7eq6K/QKfog2QQSzbd+PbKEVDTZePdFGhV&#xa;yH6Jt2Yd6aL07w6u75M2fCkaRoJFTUAOrFDy08rEQi3mgdgFPFyutKDFrL715fpvSYv7B5SWYJ&#xa;MNp8ibWr+6CXS5J9kXpOicJ6V1mgfMMcv/LdyJidQXyyd+7ast/ZGap7F49i0l29szyyGHb+XI&#xa;6ymixa7K9Llcx26+V+E+ekmr5/pkVgDi3SOb2X1p/pSa32kLU8M3Sp5rrHB3MN0s2cqXzcWQRD&#xa;pI62yviqsfKWvhyi17/RJk3somb24FzjtW9+vU6mOa1SmPUKjPiDM8ixdOtiWZwwzhtnTCCDK5&#xa;SWy7fPB3Jych3ZgWUf9QkIn/DeqgtjQrsmgAeInBrPd4rmTeJ7QuVvI3zS59MO7f0G2yYp2qLx&#xa;boVpUsj7AsNHOmUIRIB1lczzh7omdW09xUc+JYAiIHLtBUdE8e4L/AohcN0zEkbkvoXOlxhqiO&#xa;O91RdWgH4smnugzj9pDNrn7r/tQvoK+skIO88IM88YtUMrfFwpvGZT8NJh6CmSxwnpLZPXCukt&#xa;kecB6a2Q9xJqRBi+EwbmRwb40Kx6idD8Usk/sRCenR1uMIAm70E7pTVaWx2oc4AYzIUcNAg5dY&#xa;B8r0T64iR+553/6Ix/QyS+zBVe62UzUqXnvvUf4cDfxH8lOnSF+o6tLzp04lF35RMrnV05K71/&#xa;FeD/JBiReDydmu/xXRS66JM4E9WXkDg5lLgdp+Cp/riz4td9C4hxe/ci0SV2EHQXgD2EJhg4IS&#xa;QCusUF8v1irOENmmVDvqB1BeO+GRCEgVH3hTdYJZ+aV+BPT/G2cJhG9q2NmMmO+7hb/BDL+QUj&#xa;OMfwi/GtAnIyAFRRBgrass2RtwYNBGSNAQRE8f/kni3/Lffk+Kf+/7mnqrORvYutkauDM5mB6/&#xa;/XmxmY2Dq4uDmbMf9HKvpb3UYDVQNtmxMGQVacQEjpvHBDHB4GR0mGXkAbYEgNqhOs2WTHI2s/&#xa;MMckYkFB1fz81fCF/xW7AVZdGafgVv1dVpPjYxEeL4pBZjO91f6S5ffsNfP5sXsTAHY6qAAoZW&#xa;3ccqPEn1lEbSn1KbGT4+k4SnGbdT/wYtR86FJq2Y4c/EBjAs4kmmxGyZw12P9ewP4rKpSWv+ou&#xa;bTXIcKvVfVACTl1q7HXMp2BwhOEBXam4bGl8WsPpM7FqwtWGzg05DaBXCwKcoK5z+ym9SOllph&#xa;8CPfL9S0v9ZYIjqURc5utPGptm6xg75/svusbw7bE/wUR8ttBFo2W1PLaVKi1ZyRrhs4+HWQJR&#xa;j1zVUh5/++YgjbACLjEGa6JKzLxTsRkcoj5cNJ9kmV2HZLYmT4+cZx5f8w5P0XpYI3I2Y9ohYZ&#xa;gld8jfHjtIQo0ZO1RD6uL2h54PuIvzUbdpSDyFBu2bWuKfhYDhnDYdQ8Sdi2CFRM3HV5Gj2UpR&#xa;xnIILEPnVyyiDwMhfyXz6dYG4ICH8Jackt5pPCAAH1ygar8TkEks2UihwGiYbK7wACIRQOmBZg&#xa;TZjYZbX72PVqCUJZpBbJpYTLWOCyOtODgZHsWXVWyOWj49XoF7ksNQGfEO9LT7o8+PIqYto9lf&#xa;qbpbIOx7NCMn/2aNoz/4K/KB6FdPte8Edmz7np7WfVs8Ft0pXDItZCqWe5T1Th/zMhN6jJaNJ7&#xa;5DWVu0ELydJaaaqFzimr0NNZb53Ar/I+6DcsHMeM7VSwWw0lNlGFrcb49GDd7kFBNKSyl4acbj&#xa;MVRJxpQpC6l6DYeT42U/H55tTJXHArPbYrty366LdKtbnrrDMvlIdI4p0IbkLydWxwFwsFyEw8&#xa;2jJw4BpZWT6IRvtEnaGYsNeVuoFntRtScmGfsddTZi6OFc/Xy8xCjzfLK1Yg/8H+lTY/hJzP41&#xa;k48+tSSLJ2gEz4+GWpo3ABIDBNcZUheSGqZLxLE/5O+3i8XpUZKTHmqIzy49PfOPlr/x9dzQtC&#xa;TWJlzkYoH44hqsFwVHPN8ytaxcV1bMbxWbd6d49KrZR+BDj2qbdHxN3wuhFwvzdBqq0Qw1GkWu&#xa;HVbAil36Nf/nifwax1doqT1IAVtVa7mmMtXzKgsu3PoVkFvZFsdoDdZKjW5Q3hZWa1VlRqVqrL&#xa;mJlkm9zfyUzpKLhunMaKPtW8AiOJhtKDG9jj66R1rCR9Ay9Ekpa92o1fmTntN6fjXIdFYPL/+P&#xa;mKXujXARP9kOy89OmmOIbcI8cOY32RhRSBzydvnL/IvWR1dwowWwjtW6AKJE2aeag77xwJLrEt&#xa;NvDbxz+443xR6onkKbRFmQDycsxshU8OrYParsiGWZJtjx30wEJXo4c4ERdPxRM2sKFCM+JqMz&#xa;RYm9e3Owyr37rliTtukzwgvCqUOnFdqnBXFMRvs+2jcFPiF4+c9CCr+2ZDzy56XH1kGWRh+wbR&#xa;KzMfZg5C8ypBZQMzKWTGm5NGpL372vkLuCvn/e2OZ5kLQHRdXPzVrK1+xP3JMCzFQU5incV29X&#xa;XJ+Zgcq0WJjxxpqLTbAgzwt6v1rj95mfsdrDFhbNZdXFNvb/ktikJZYm8+AQ9FuVRjPkkZmMGr&#xa;c6X4At9Qf2KWnBmFI/fxOOxSELfsFEn2lStUceOBPJ5zIHvraDMN5BtwfMCa2ipwUkDaypDK3c&#xa;zq+hTsknVYjpUg/Fxs0BMPV/OWYhicoam1pbcX9AvJSMvzBq3E0boLRHfL+cEYwgsizCEkDfzA&#xa;k7fSuNrM+SfH1D/YvJXkWMZ0yQICA+cP8Tk0n+L0z+D/4Wa3n46migf8eSyzR8olAqp2yYq0uZ&#xa;creY8MqjWuxzTUYYlyZEXBRVeyXk2BU3FAmM2yci5CUrSa/TQk7QmaGNWZoUn0EralsGNkzuHI&#xa;0yhIJBau9lveSYrifiQ33fdr9k+6zwX+TQCn7ffBCCzf00GiC3A9fm2S620faTYCk0Nx4XTa2h&#xa;WHBiT1rKJhqIFjmv0ybUQP16yoZCtEqIRuUY6PLnT8cTMB5oxb3Ysufu15iqnCEjaiusD7ct5w&#xa;nwFD5srzUx9Kb6LX2OTY9j/Bq/UVsMUxMynMhEq1rFljR9W2qGbxVVeebqU8AoBQ1M9A7wI8Ne&#xa;/rGU79pd3FjzNMwuEvbOx7DI6+OTPnjNAXZFqQqwxl5eo5iCR89x97APtqLx8WGtF6LPUoJSkW&#xa;1NUtQDObuys9XezJwDsvuFZUhbRQCPR0aOS45L2CszcDRQ8S5MIjTNSY288tYQhuPP/SB08rxz&#xa;g7jTToD4AgOyAb0pViqHd450hc3nHRPidgBVQiq/2/yQU3VCo0+2w9UT6FXqNqzUNiXgG0RtHQ&#xa;C3ZIvfGtwgzxuMlkozXEy4U7Nf1pPG060cDJPGtFk1cFOXvtVpKrBb55KPMgiiRLP/BJvfzYek&#xa;8MkGL8TtMtOIXaDI7Rn5GGKjUkRMsmpImq1NKU5c+AoyeztCLYQGtJUc9SxaAG3fkvwyK1FGmq&#xa;scq8iQnaFSlHUFCYdikR5v3qR86pgUW45Ju9CahvTEYb8oouxMVqPhQlKaVJej3bpEQ/q8ngB3&#xa;SzMsBpYmP1xFX7jO4ofx5S4keaI1mw/3EvVEQLRm+goL/puuLmvzGP0PKTZHt/qoffSmzB8b1O&#xa;eWYaxZ/uWvCbH5/cE4nQUNvYoHVT9h7GXj65PNwKcZAEvd2rklNhHQvO/OOzT5telKRpzPBTJL&#xa;NKR0tKHqEwVXpxjDtUg8mQB37Akzx7E9tOSroAUZTe70iK/uN9RH8YPxx/gadq58FA55ehSZnH&#xa;UenaGYYMO/y3IYfu1tSckLH0vhLSMw8m2Rmh0qcU+sS2UCH+gAomNxQQQn7QwfQFRmnRCkWhpx&#xa;wvDyKmZM8XKwE/3EMBmy2pNljzlV28qQxc1MDBmUSkWN3Sq7QMcOex5Fiz5v0UipLrqW9w8RlN&#xa;VBY6dUADpLm1lZslCCUQZg8Y3ibDEp2LkxmvGyUP1wIUsqg+oowVT3XMiLpkSMq+UyeNwox7b+&#xa;1KjGLMLJfmltTO2HOfEQKfWxhY3pZ/2Q4z3O9C4Tg8sANn/Kaa72cZ0Rhcuhe5LGhyHN9dDF6N&#xa;bucSyqw54NjWNe2kOgcczUq1chbuu+XEjKOIRFG1f9Q8FdWjziLSTDkXUYpNMBPcQwnQnFzYNF&#xa;enFwUOv+lX0X+o0hghJ99oFkBHAtIwT+hFccYUlfD6xiT8+zFWKGuUdDdtYxHIGsMDuihThbhH&#xa;hRKPxHpLWNZcGxhV79PflQCh3ZTb+PWNKLUwj5kpCdrY3p3QG/2s0Jji47jqJuDHlGigJ9Rltw&#xa;2iRaKM/NfBK13Kzjbp0HzctEaJZe0Alpm8zMk9IM0SECYaFvb/lnA8pEKuCz/Qv1zP/t70lxIs&#xa;Mb2TXysuAwuUgGXSPifWy7vzP+nIWjLk4DaojVwgL6oxw7uYlvgfw52jV6wgt1GvBMWVwCOrD8&#xa;uU4+ax9ivNzavQ838kqZ/+mfK6LFtzfy5TlnqqvYR5iSc+OfdRjTpO65FwWGmiUfpEA9xXKGPR&#xa;vTWf1wKs/nvUNxKVxREiRxOyzNB2RMhx+2PM0qDU2nE87pSw090piq+UdDbPxVc5BPo7xj339z&#xa;O3TaVzAoLdngLoBe/Eqot/v+BPN+1vfjWk/F7h5A84XbTYF+Rwi7eZfc8rSiei3pwpu45T/mlM&#xa;aXlvb7DoR4mRlwgd06rQr4M4J4Z3INeQBYtyhhfgHjRf9EE0zqzqVNi9EiuU492lrF7yq3rxQJ&#xa;XIX4ygi9S5Jf/IL372Ey8avqGtSles1+S37jN1DlzgJl558b2bcas7R4cgGBDBhgDfqyBXWnCM&#xa;iOvgI8sC/+HlS81eCj/BNwyDad4FL5e+5PRqpWv+AcNdbf5LoWphqV4U/3dLQuy4oPhxLoS1vM&#xa;gO6xbe5Lsm46nVmQNQjDk9GpNZXWkfby8rFadGecqTE1Q0I57dxHCD8aQRl8iiBhWDXYqyYwmc&#xa;dhFGs+d9UkjFFtGrbBZOZGEIemtOk7iegamynwhlYhfS1yH1CGnYuvhHmLxIDCqOO6TK5XPbbZ&#xa;iqQFxvZTkgebuEdhho4QH7Fywi3edstAttiIMve2xlmxqNdgHbpyfgbtAXOzJnX993XwjpRIF8&#xa;IO+pJS7IZofl1pg4HzPgh2uwLOXCELPqEKtAyxRm7yMiDhDObMkFTzIYNB45rckrRSd+a5Jfn+&#xa;gVTiqtRnZHM9MZr28J2k3FKV4q8KsenJV1Q9W8plvo8JOP9zFbjqSkPyFRc2MVEtjqeFh62+9l&#xa;3eipHArCFGSQsD5Zu9HLH86aZxueqlkdlxpaHYosAOsYvNFDxp0dZzb2WPBfWBAqepVzlTY7xY&#xa;S+pDD9CNmXGzLd6zpo1ZsA3uQKuwzxmWzuQRYKiI/YZ4Jzf+NM4BDPk69IcqP4VDAgP2K16+pj&#xa;DrbirGEL48whmKjRN8VLvlev9xYDIjZtwnVfIuc3R67kwfoHVrjm+XBpEgxyFlV4DIgbDGe4Rv&#xa;M21bOSzdHvQhM7j98/jqTy1vem/UCW0QaRtVFCR+/6LmgvHLenD3S/9No8dqU/LHxJFJem2Xj1&#xa;jU4El83K/Zeb2LcvvHJU9rOy227H5tXu0sgdJSiii5E0VSyWoBixeYQ+zOsFGxuvoqJo5COf3S&#xa;ro2BEyKTZrUZidTJxvD64/6I4iq1wvpe+E16vU6s1ZkHvPnGlcZCZk9GbRv1rH4G3tjFO+bEPg&#xa;sO8nEaU8fE5esusjDizsRRBFdtlIy3Stkdazpisi24dZofUbBJdqBwgTfj1FKzdQeXCBuqLhg+&#xa;Ly+xe8X4U7J05+sWVL4/+M2QCt1ZLQNAw+Vo88AhiTjKftXY/tmnwa5JkXsewu6aGqGf788xrH&#xa;OHyLg7c8FSiZo8OX9ealF9pTF1/tja1tJ1ATw0SOIFn5Ape/wcJ/GDwvMwaZwlv5486DCxNP4O&#xa;ExtDxo7FkL5vj7YKpc5b0Bi3pe28GSlx+rMKdwTPssXF3H6gkqabELy9dOryjifQuj+QYtVjVf&#xa;XUZG8glr/+wbUjhEvngFI9OnkHOzg4RDtY2/UhTSqCsQC2NVXpzKZMrj9MCzW68tAWqiGPN3xy&#xa;Z63fjvUB2gXUQPfEvx608XLHRbAL+bRVDCXPkprOkuDlSrL/w9cRSnrCMVOYlMWt8PBJZ/FiPF&#xa;WI8WqO9NC2HJk7OCVF4popWlZK54nR+rRGGNI9qo7KEIDU+rLG17xPwItI6umCccMXtmnXZVdQ&#xa;Bb1J6PiyZputtZUwnF0CX0ZU0PqH1BtuJw4Ra78NkjA5qRGDcCCMnv7HmvHWp2GzZf0AdDd1ee&#xa;LwdtYt5YiU3YzMv96RUbpywlFKunINJtFbjYalbRX017MBlRlm51oGxtqZZM5Bht4LbeUMLIm6&#xa;FJdsnjPqTrgaQ4zSuFxRDtUHrAqIjGER/nyVsZWsEYtQbs3psAcAg5kz94BurELAbGEd4Q3Cs+&#xa;P0oTVlPF7/CZe6LFgc+TxylVEW6so3qVfux9rhSC0P3QecELVEnAt3w1zOWKYFASkM7rAob3Dt&#xa;xr2mwrGextQl7mca6xxNkVnLnPkDcrTxUMuOWOltcuBA4Nc2n3R28XMiXc+speD6MF6AE6wCVK&#xa;fFvsYnfgVzT4DKYjbvgsNDEyv985Ev9Sdx65cEn4rxx+yL5mZAvwt5y98c3oOHNxydtq/arWc4&#xa;crO/lJQfkFLOJps226AzewNvpKockYaTnZPmmnPIulzCRysC3NJ3pZFbLZmVYgmtEpYdblwVNF&#xa;LX4wk+60nDG7lsiCcpPTMbBObLph+KcypXxe37eRZhqb58Vw8Lw3xXLwu+OQieVsQKGt5WzAoa&#xa;XmfKOTXPC8o5CJmLyC481vKrmYvwx66F3Nt/io/2UVMQtpq0eOiYeWBnOBghuek9IBubDuiWnx&#xa;wnYhWDixs/MUcGDMzO8LgiSgmGZQkUFs9dZOsumD0bmsxXtazPjRaa8YD9PlbB4/1iuFZJw0bp&#xa;6O8EGM1Hnqd0dhfl3HKd4mWHRouaVKX44uhrtGqEM3/B/uVVeiU00HUBICBYeP/ZqxxVdf4Xr0&#xa;L7X7zK/+lUzFxdrewtXMj+W2iUrRGlg7aK/nfbzCjFSRVLtHhkqEg0FVJrmK2+QCq5jJiohCGx&#xa;IMZ0rbuzioH14rIKRm6zKI5Mbne2aMNjcUkA3hpWxjLHzsTk3f8v4hfh+1MWLzjD5URY6A3vFn&#xa;etj/5L1uDy3557nF9Xr619V/wmDYpYrsXRs7koCw8N7iVzPIlT3KEFtK02SGBy2KtOM7JDLinZ&#xa;ES+vaPDsYPixmRGU2cl4jZGhnn1HGHaMvAyHUMX0epNJ5V4R2oFP6B5u78ZguClMkiKief47NI&#xa;HAlSALr3VThRkaNO+rJlKki1rrGNkT04VJHnffnFadn7jYxPBh3hBDzIEd21q8F9v0deQbAQs8&#xa;Jm85BAT8Uonbv9NaiANHVqIfvat0GRKe/uivNo8F11hu3p2LQxBLoQQEvh66BG3/wDE6h84f77&#xa;NmO4Uu1CK6jDGDM5X72+Asel2F4xSZ4+pjFxmZnQxmXrwMRiuuWftXSr4Uj0PE8OQ+q6akvr2L&#xa;JXasyZVcr3bfnERtfoNjSN9+wQnOHv1Ul0b1g4JvvEk/81NaR6pdZdCH2sG0N3Nacca6wG4UsB&#xa;U7zaNdP9wnXVVRytUC01TUAGnDRqkCAys+4awSVmRR/gfX8uWN1/oU+1egIRLKmreI1+JP9rbA&#xa;eSj00ptdoTP+Ux6vM29VQGblm0EESx24R9VPzB0JK4vQH9f3yLzjEhXMgezzFc6dc9OBW9NguF&#xa;q/zj12lfU9Ub0GNsvxfit8CqS3RHI7xDsG15hhLsTy2t+xzjvW/mI+5+K2Wpe4Ujqpv/iTWNCL&#xa;yM/zfCAQS9wcPGP2+2LLKAwYDEY7Ptz/VsE2N6kfeverb3uSZvK7Ah1LVbs39sNJ0vBD2UiKbN&#xa;t2J7OytZuaVgG9dJ9JjPgs+oRe41pQr8l50h4BLRVxLzwWKmGvLQRb8cSma2ScPXufl6AgSMDk&#xa;KPLeUdvQrqmVbxYUldwba9TVF2lUSwkfXG4v8AjSwgvdE1O8zZ/AaBv5xxPA9QctFhZAnUVz2J&#xa;A9+F8rQ7I/5AArTJbmdSn9PIGS/t/8VZ3yJRDqmJFvXYcLRVgHmmia7vxutP7w/GKpa6fIeBEM&#xa;8YwB7n97Dy1uqXjl0XeGrvjyxSd8W/PkhRlrP1e8ULS26zRzgXHxg3zovvslkLMrmKy3zHz5h4&#xa;WeiTS5FvLrZldquOJPF/C+YLl/UD6SA9GZ2u746ZH0rkGWbq0qrrlVvu7aKbWN7DbvKSsCZ/ca&#xa;eXKGT3yHzehf4DyzYAz+vImIvCjR7srEVv6Qd3FVs3HeR9rWNP+hh67AZXWj3Yz1StMzcu2fbd&#xa;zNm67istmXeodOULCbp7GU4Upuhw8n/jDm7q8/OslGyZfakZjxJ6HIxEd9hUH0lj4jsvQPxFMV&#xa;dI8INk7rvZDIrDRJQJy2K49NKckrKHNiqp8zSRAh7NKCF+P4Z3jsWwHPN1dQZpmbRqP43sypm7&#xa;BPt1fhn443oya6Mr5deHhMQNYgJzdEUhNwq80aPhXjibMXrAIYzXsxycNwmMoGniqZArTCJydQ&#xa;FBycXW/ReE36EVB9FGa0GeMgU3vQ7N3x5hYZkEhvWyzGoT08BqtQNk0nbPXK3myQ4QO+0sZ2q9&#xa;NVfMjpqbN3bBMNHmtcbOTVR71R/lVzobj5nd1XIjbxA2/2xJOO+uEbq5smrzJVkUoTu90zGgqI&#xa;88r/nXeo9+k0n6yHdCV44QkVkH9+ka9453yiaAuk45y0mSECd64VtJkMPHgtcwWPznGMtFcmGL&#xa;sPm7dZ5Kmx/Q1pW2AbIiQkCn+VtSRUli84SYvmCVVMOfKVe9qUiPKJ63eVb0c9BZ4fwg5e/xxr&#xa;VdU9doH6Le+YpF3sWjXovVN5uhT0ghSjgHuKVvAgt3ZaCcsuIsIfoW+bO0w/Kl7itAlCvY3OQO&#xa;yNcUw+NNNPZXTBvZQ9upxSt74uRjRjqKNh+8MDyBT8ElbnButj7qgAv7z03SiJ/PZTY5TumjB2&#xa;uGSu1Q0HPJJGGosvyifCN1kN4Oa2lHxLLKZs7b6M8mxEkQ3d1HiQsoGtacS3pMzrlVPCGcg/xD&#xa;xhOw4L7xYixyyVYlMGx7aUcItOUpJOOmhoa8XZINPplKiWVcEkTGobK3V4JG4ZiKzdjsvRyI2O&#xa;QxIyzXrm2g6UzCNmoabwUlOHiXOiD08NCoFzAmWA/RaQo/ztXeBN8/SX6NIuXJG+eR+Jfo/bdQ&#xa;/s4BXx6txmjsE9TwTtTOeWAFd1E2bBYNI5SjokmtZ9eK0mFls2ZH+TrGZdtBhrTbTSKVROVI2D&#xa;PeTOiI9gqznYFjC/S492E5eZj4kc8ft26Q853+KuP2Qlts7ASdgH42H6M7VvBKOoCH9c1k8h1i&#xa;+zoydT49y26BOGCgmk/ocHOvjbgLKRWRqabhbrNdAnyIZEdD5CVt5pB0pj861Phn674xcYAiYD&#xa;Is8l34S9eK+cvcFjBegcxSWlUAUaX+n94oHS3znRC6wlTFrFJ0UHgsWvLpEBukp2oR5oArW3pe&#xa;g9lt9szBZMbnd9ezpqD0Sz0wZdkanvVPqYFk5ea4DhEmZ27LpFwRbQD/zAgHkZz2s7NpSsgSlc&#xa;sjkPSHOYRr9GKvik01oq9/rUO2AtcRDnnXqeEavVHl666/Lv8W+tLlbZ9tdFtu/3jgVdmd6biv&#xa;PP0iCcb3TXOqRmHPxXwn/pg6XVQqlRKBCQd6T/rA/qIP9rlsn2/6oP/t2w/Xu6dPav6dLfbqQs&#xa;JkC4kKp1szYpECIir3mlejg8GcUxwlhok0tWf2CNKWlGVrFzfcVeu/Pma+emjH7Eu8O34uQx7v&#xa;zMj1UEQOYNMpPu9bCjF/CyszvZ+/frm/KXwOfUXGbWcYvfxgGfklZx++Gp+E6saVOQVSrdTmvd&#xa;Gmkgc9MJ/WJWdyJVmbhAwqM8GRvTY5q6QH66lkB1ymUIo9lvgETufgSxvaOMm2dLwfxYXf6IVW&#xa;3pSJ2fVoIUNHPVRIZUs6LhGqacnqqFGmPDoQpm+zFe2fZZzbYyUWE6sWrTFEkrnnOvgFr2EXXO&#xa;IQYnm/+vfHpj3opCm/Eg681B8RnT8OJz8xkXSJaaTPECEpl3ZQoRDPEkgG2isWAZbodL2v5tg3&#xa;GAqOr2IcCGxOsaGm+hYxCKTqaY7r1w++R89FhDjNQr8w8qXCSEGNTKOLQh/2Ds0T53TR5+NkuQ&#xa;p7AQnHam5IcUMI+1ehPQqUx7wRxUxm6SgmcPjxvCVjyKVPM0MZeFjNClAKzhqV8pdwV3ExgKxv&#xa;E6iYxPmBuuU7JFbE/M6Se+zrrNFBdC28yoB98G4LtdkBHPzP00M9bErd4E8s7TFkLBCCt4KltK&#xa;Z4aO+wN7RsUyV+i6T/HaDxyJmePVokJyQ/gB99HnloulnjkG+u5ClOiXw40sOf0C55VhJxKyjX&#xa;1qIgP+1odazYoHoy6Ai4Kk5fZX4eQpIbxEJ5ClLdBsZfsZDRNyk8zTBtIhygKnxWvZGGcJN4vQ&#xa;/CSQih/1zmTijlZjKLHzj5HfL8mbmPkX5dSeyIMswFsUkSisDhqLu45pld3uIDRxSA4TWPVCOb&#xa;YPGOCpM/bPAeofZsSqcYIIYjYFV/oCxVRcMawsC1gvAA1htVuWH8P9IVgYxtky1k5rSMWW4bAj&#xa;ljGWUWfGKmpYf2gSOFxmRBKVbmH10c/MoS+CtfvJGSBPHPXRnCNxiAu0sqj8kWHM3kXDsiobst&#xa;zpcPxSG3Got0ApIc4LUrCbTz3CZq6QSqzEz9dN1nD9ILjiMnQ1ZrM/+wp27sASmAqJ4BgS87Qf&#xa;a7eaQlZTo1M0Bjuk4GqazDTzWGx9AVso5ma6wsL9Yl0UxoVTvOfN5TZ3csQfGKAV3lhX2txXvc&#xa;GVcmgrna6UViSf0Nv98zzYS0Xjdd7jKSGI4UTOJewlM46QhPsZ0Yh3zIPHYUEmJbTeySex6eSk&#xa;vJZaFMgrbkB6meiY9FhKJ61Dsfl3FAFybRfc7ZZlPgPpEv88WIHBExb7gyjyPnqaYQ0W+z2bgk&#xa;0yIXIGnKQ6bA16vWya28UDobNi1+C43+YlbUc3Y1aNplafadcEiDgH1ySZbF6L5ikljmt5hLz2&#xa;j1sjGDT6SBC0QXagToJgdg15CN4Gozgh2w4Z9NZz5ok2o9re/jIGFqcl2mI3Mywcl4gjB/we9U&#xa;4n3yMzI5rHnLbntnw+Mrqmr7E5zM6gtn3mfOT2XNp2/eo8qJWlVuiOGgNe4Fcob+8MM4utadFU&#xa;7VhXMBLvPgObHyYvSHBEz7Qc0yar/Jf2P7uiTyY8/WOnI6id+Wtc7NzV+Nz3IVcPX5r0xW6IDh&#xa;7xftbelIftCBf+5iv23czhZwQfjlG/u4rAwmQzKaJkQ9dImibVqqT08bYTwhvOq23dXN1EzhyV&#xa;5LqFE65niZ3dHhlX/QRVj9pmmZEvut4z9SVIGijacyFh2/0J1R16R+HMN3C9N0DPuYi0FCmJ29&#xa;VriJ3hI11MxnKnwKvXFJiiyYUyU2qyf2XE300k7nIVZef2EfwZChfQh5VPFfViJBcCXt9JNf12&#xa;8Ng4hbl7qBOzMxIaUAfMeWj75KSO5vvZFs0pfn24AFHeI4eMOnfjhSHsSbjqC6dnKkSESqGRO1&#xa;V8fTgCQXx7pOf7kGrTnvDt0CGY7O94Qb8vkUCaAX2Vq9vUrb2w+/df/Geb/nuRAwkCIg/4n/j/&#xa;/+oPWf6N/QsNVAm0v3IoW3VVWBgGSxVlSiIoMeI29DToh4XJv6qV6DYyGCYhjAftO9bLHr8aqq&#xa;ubb15O/CXskC/ODlX4SwNUFW6mGJAlH0GyXCzcjwX8X7jfXnp3/0LU4Qqy2k5HP0gfNQ16VbRM&#xa;Oq3Sa5v8ttyhW/9dMbgIiyXykWaymUqhQj6II2PWhQspBCy6ii6W9UmOw12WnjhxrkjRydorR9&#xa;06iN2/n88QRR3c4NHh5WcGusWBFBFNzemKDPdRYK2YnhzwDMNt7aeMIzKJFqCvOkaZl5iq0vip&#xa;95uHW+AaH4WicG4X2BVbd5HV/nkoMiIScZ9hpuPVbIq0RxRRoPOZbzP1fJaP1SUbB4eXxyk8xz&#xa;G2jIp14jRJlm4vmPTBHyVqXayveYipf3Nii+gV/izX6gfH2ahXFgOpxGphhFVZjQdyVCkhD2jD&#xa;089lSL0zA+N59aviEy8LIgNJFjNaKxk83ulgmbyG81ZxTSzH4bp3KIcdljDmsFvY+zbUAtCKUE&#xa;KJZONBROoaO1mj7QC8KWiUkMz3c8klL4wMsk8SOAeSTXlwUqAUVJLhRmqDeLRrYobUwwBaE3i3&#xa;4nqJ4udN2iZ7DO0XpTqIAdllYnQyTy6OWn/5sa8FkJtRFWE3TpE8SRwRCMufgxS2GOQiZlsMFU&#xa;yUuKa/OoF0vkAEYb5V5yvpx0VhWthYphAxZp+Bq4etpyE2vGFmdGw8i7WvsqEj2VJN9zjZDl3H&#xa;x1gcswomyFkmOswYTiiTAiNQdvHqfa3HylMR9UHnpsggQtNwendYKs9YocynuUziMGM3eXd6/y&#xa;pLrtCsyBOnDRXd4Aoj6O6Dg6pTvAy+1BjnXHJlzOiI8nkc9pO46CcXw/hy1RmGNsQfMcAHT6W2&#xa;D5Ti0zytxEGZQaaZiM/eqToea56sHw9dQsm7cpj1Dy5sJ7phGwYz9MWyOq2moczST6oMarRGaF&#xa;gZY1H6nNFOP9RSkq+wTPiio1T/xtgyXUbxkxkiXhhRU1IKL3axPPZR17FH96HFdksXup5VoKti&#xa;TCky1sKDE5tbqoVGyTxq85NAwtaUpaHp6Q+E9D3zyEWLF9Oy91B77hZY4uhHu9N/cXtC3XCgVr&#xa;1YrmSA+SfnvGj+75UEzfo9yf6w5JugKwAOqu7gaFvFAamuydrtL6e5lCoJr/02vWbxOO5Yua93&#xa;apETMLPglgsnXWYvrabgoNkubew8CaC12X7eY6D1K55BWVsgIyaEvT5Nj7oT/q6ikDmV6gF5Az&#xa;WHCFCFTVz6s4noj36L5V3/+RC0xycqu4UGfhIhYyRi9WwBITUKbW1ekjI6GCRyvuTPrsSfouiD&#xa;wSs2moHhnyXXBc62xD0cp6K9hbWsj/r0hc0mPyo7Re5E7xF43F053diGH3qN9CQW1zMPuAdfRA&#xa;9NwTSjRuv1u1yaNn/FuFK6ZzfBjWUzERSpZGz0wGBG+qIhJkUEFvWQ4yucz7sq72bIn27eGEsg&#xa;SflR+pUu3BnU2+MobA0ngZL9iVEoiytZS/ZUIU9cXlBXgJdCRJAmE5zzx64mviT2llQOJJKqjL&#xa;ckh9DaDS+dfZBN0rfsEQj0U2eRdxZWTkq0xVFYnSzP0SULGTx9Onp+dd48XOTKh/IX4hIIDizX&#xa;4UqX2xqFdeIJZh1c3+RKTxuBEyYnmTZeeoNVn6dJ5kza93fHxbSXVhgcW9Ukuf0WZmX6Q1+cJh&#xa;4ZkBmvBcIx8kTPMzv8VCYg7lpZxPtEMp/8LW2vHv++jblFRhuBdLpCSPWCan9CsGXEj9QbPKki&#xa;wPsV/bD+8u5u3Oq4T9iEnD1iE5D086/fKatn4V8CijCpR7v7QOG/PaXE0YiOy6t1MWzhmmem50&#xa;nll/y6hCVpvm5Qu9/k7Jzzf+HTPwjJ1W6TojvGrFir/0Pgz69uEIT/A3j8/wL4mv+2rMD5fwO8&#xa;i5mrorODo5mzq9e/Yc/6b9hbaeCqYfnbY1DIltJJWfVLV2cIQzdRF6/ANsGeYcAoZjIIL3PJ2g&#xa;8YpkWwompXaXtcId7xtki7XDq9mc7eSXj53kzFCyc6U2Wxvsx039x3zXbKfn/dvAiCRh+ADlp6&#xa;p28+u0U9qPqlHsYW4pLz5rS2uyyz0G45rzxorzdVYhAm9WEZk0+yra6omC1TFS/sxIQQDYZb/V&#xa;bO0NqbtF6Wf1NWX3Z8VMvpmIK3L0dgXGIfAHTL+St4WgPCPEApiQfqHHB/AhsjLiM7SrzzjlPV&#xa;245l2XIB7ITU8fVxgdXMeBP2cZc4jM5RuDi5hqeRm7Hnp9odVRvuI1QZgHHbSUuvell1t0XJZT&#xa;Mpg4mT8QHbjE86lia5c+B1lgVXL+XcrBC7a1I+r/6BvDZ9qkvHYCmdDDmFPDnQvnXk2EL4XwJf&#xa;RSdySAgRYQJ6D2lwbye8q5wIKIBN3FVkKMizIfVhBoxvrNoEmKxjMtAbl5M6qOPbmwFIMklMwz&#xa;l4S7pOQhFvfrfRpZEAgIEYbTpFmfml5NkoscwQEXJA8IgUM5bwkGhQgNLu5Yi9fONjJGv39T/C&#xa;XU2RFi0xxOiHl5pb05FN19DNdfqxGOSok/AItHLylcXLYonWcQWxUXKkjRy9xptvwr6hsROvq0&#xa;F4Xdx+U7SKZzBxnkoIcWQSyivPAcmZg5JMFM9EO7nAJP4yvR5QgMSYV+uJdh45RpM8yyQ83Pkx&#xa;2YRX83EJrSvGwzRrFG3Qfx58Mwu+dcrA5gV2oY1Isr0sD1Wv4JmBlex5Ix6FBTCBoVqbPUueMY&#xa;dw1T2IPkVEe6g35Q28UESfMlHW1UUPlRHZi9UexyKB6g+x3Itta2n0+WjtJ9Ioz9JyzXnqCrpo&#xa;Ix4gXx4rUnc/CQ+yGYsQZVC8GmGPWky2S4OxQJmFOfYi7V/OhF5IBeN1znahszaCIZzP8nIKRh&#xa;GwL/ONO9tcF0f8/qWVmC9cGNfPUCS5xxKJpeyISwiNk1I+qoOeZOMkNuY/gKTOby7f81qlGzov&#xa;X1dmucEGKjjjSDdPElTChM2DG0umeCQjtpihotEeREOHjXCq4vonfS/rLFJ/b1jGfJlKt4ku6R&#xa;gmJr4QfuRYdjSprfIukkoRJnd+yWlyvmUZxQHPTkARMvcQDvvl1gzciVf57ne0m69cI6mcasS8&#xa;LQonp5qMRurEZ4enoqfW9p7L8jK5/Rul80yVNk5vUecqJjzz1TjF02iDVp7+ONZjZZ/YrB1e8Z&#xa;/Qsp0NpHPY8DjYOfKoH6VPoB3Ibrvl4GU0ZolR+yD8vcWtuNCJGHMaIjeeVNx891hhcXFhHwPj&#xa;nw6nN3C778P0f25O08kwfzLG7qErbTfxRmqcyV/qF+r1bcOcCPEUI591js3FnIYRODNnfqJ/ZU&#xa;oirDo2AFlxbYMZwGregmsCNbd9AQ4dx72lfrjVxNGLD3QoPevI2qHiUOnT7+b8PgS6w6Elr88Q&#xa;efTTZGcwcsPLpplYDitJ/N01SBRMZxcxb97B43KyEuCCpIlV+wsjIrrjCIJipVzVRvbEH9AaQM&#xa;67HCZqcbpprN2fiNUDnrzcOUZxe4lworf+ekVwOwZlQLGXlHvx7bPd506tHx2FhN+Bn1OoZXDz&#xa;P++ZYXF7qL5w7sQUOrVAUBCdLghdF11Qi3uljI6pC9hPi3R1iZZZ+omeaXJCoQVCj3SwiOBItq&#xa;jEvCxIPyAu4NBWvkZfjxlXndO+b+ZxhhDtUcg/qX4VZlN9jjM2/cKc/t/yOoMNgxP7H/rywf1P&#xa;4xfi/5m+/8HZZm0fX9Wn34KU6eNb6bpEshB4yGIAJIqQ+FtFAgFhFEkiWSbUcFDy7vQtMtKk9s&#xa;EpeKTK6srqaj/tZprIFutqPRsdJLLgO7XK19PBlk23zY1R+85N+5ftbbvWzqsN/9luD30mmMCv&#xa;S8GXl87eXa/cB95el+upzBuBDzDk5QcdWZdM4KNqBW35hdu6libntKUv0xGxeUWb0Gbp8nDTq6&#xa;GexC6899CjIvXiW7DU4Bqnda1Dw3G6Hqe7AmnzFNCiAuCw21Jd2FhZ3N7azdxk5XNYksKU1Pul&#xa;ynCR5jttJ6dnh58/MpMD1jX3XI2rzbMpnJlWclTNYU/zy/ocOlQ7o4OHJ73kRJ03I7PffqMuZS&#xa;2FDcX7f7H3Vs11rU2WrmWLtcTMzMzMzMzMS8zMtMRMFjMzWGRJFjMzMzOjJffeu77qru4+UX36&#xa;oiLOxYl4I2bM+QPymWPkyHznYs6o80skUGBIrc4+XqvQ1alVWYsSS7+nyfwYhAKUGv1MxKuOxv&#xa;p4S+BIqnSJSViAMkHith44b6xP2J5fh4PVzfruSZnsocXJbpNlpeDT/dpiwRGourVuIxH+WF8B&#xa;TxnYmmElvSXj4NAfxd7l5JeXa7uIAsNv8KtytzGVdrla+0en/6B1aePjrOdCZ5KVxuMppH5jSE&#xa;Wz9yhCKkM+nN9BoZccaxWkW5N09GCfsqqDHAW7Z3mB92jtnnXcgHhSB/SOamDdOFGt6qlJ5nUR&#xa;Sgc43cNLvki6yEfaixFdJo4KkFhDtagflt5Cpa+o30+CDkcZCJMGldQhwp7ga6oSL/lFN3qwIL&#xa;FNxI1J+1zKV0lWgr1ziXVRkUKNKymGYgK+qJQBKfZDp28hmUAHjCaxuDbjTQMesqZyS32A6Wku&#xa;Ajt2EQx2rbpwUUBHOr2iOGEZrmuJqf0ZUVg9bKd4Lg+/U7KAdiePHlY/rEC1QMLmdR428medcj&#xa;mEaJNIhPRWgVLWD586Ed2brZIZDQAu2ll92rXqCU6ngxqVbdd23Yx7Zzja2dBMMVJfni762iC4&#xa;V+1wbz27dXypXGmYpYp0T74qY5ek61y+tKFc9IUylYmTjxDxZiZf+Uw+O3ex0kImX/EMgc1dvU&#xa;g/zaut7g5W254EXulKtPZIJnFpmQNb0j097iTnXoNymET9uuX3m1P/Nn33y1bl1DE7mWuIAaVm&#xa;whdO0yXrya14beuRlbqZPGOMFovWiuI1LMIUfTssR8IkfRt3KAvooi5YP7RjKKdmj9XfAvQlz7&#xa;QPTqmlqxF5alYd/O9ojfJic8mRDwu0ErizkMJH9sVBG96+Zm2KihLkKYKxvonrQpnKJwKlQvYw&#xa;QcAnBNx3V1zpgpAbzS4RRJHLSrtYfX36nJtDUc91dcOfR2/nbyGwfpBi74VHn0AZxNMQR4r5Qh&#xa;PLpwfyVIICycHkeOacdFQSk4H9FY4k6jCCcE5nXokAwaVcpYo+jp48UWXuJ2PadrtJ8xKhxySY&#xa;uyQZw+KyA98A6RJtNt1y3xI0TmjmxVz10puZ+Zs0uirXGAL6sqKHGBlW296hUDL77LBkPWn1rs&#xa;TviTjSZ48E3mlWTshZ6OO+Sfe597Nc/NOurwuOUdqfWF1UJL/A8ScKqOQ46vxQtBOpPbGOoVow&#xa;JmWQvsC8ewunPZa4mlXh69iKpcvrVbC6ADixJOSW9wi8Ua1c83pcAUyTtVsZjKnfwBu6hbcfZp&#xa;dPdaEDmO3mpVBG0SoKfnX4Fdp0RAwd26Y6zHsM0GyLWzSYheWmOes+KCtPQqBezEoeIswQLxxR&#xa;ZwTIVDtNH54vVyCeOEcTjflTIeSdF3mcSJIE6xKYy+FSwGm4sAU9egYAuqtslqCaE7+vhv2oLc&#xa;ZQhMcaNZa390T8YE9es1z39+mc5mLqtfupWpI3O+33wPnQ2rdJigix/FrcCw9n/rWzVzRgutnP&#xa;eonGGhSZdrl/gyjwhv5BOh8TwZw9k+Q9wqT7FAdsoCakoXqZfmBMivxUd73vo0Ogjo6T+WN//Q&#xa;l1p+Y22+OV6k/K8FaT/37g+iG0d/Lr8IcegXVvATA66y1/4/QPrWQBfV5hkzl+mODbiT5ep6p1&#xa;dfaTVGfEHLB0TlRvKs3M0xuMCkWu35yYsquSMB2oztY9vVKkuZiXJNpXqoemCr86mDy4Q5Glse&#xa;5IcmRckv/S4sF3IQpA/3nnkcOQeAjU8Lswp2p0H+uN1+W0CvOvatrbxd7Tpzd3x+a4ZDXUjAPQ&#xa;TJv9iqdtQ0F7e1T7WiL7S79dz4mCnUXWTjaqupIv2pK02xOBD+gDibmUMLuN7IFiNDIWyC32zp&#xa;ClIuMamtfWSJNC1oMZQeZSwiIir7IyzdVcX0YO5WQ5MQKBFvdTbH6vQhz17Jm7ZySdG3MgJ5lw&#xa;rWkZv7cf7kVltqpS6ERY90RcPJQB58YFkjLpNfNPlkdUR2FmesSIsJ7I3NpKqry58KeTNY7B2A&#xa;9giCc2S3CzvFeqkvzsSm4+x96hHiMdrlqmtD8aS2dShXelX2H4bGsFtvIlw33U/GWj2Vls2Vj6&#xa;PQ6h4ZCNXZ+2srpBPA0C7oneQkpu3Q3EIiqQUrjsKI9BLShYsIqqLTxryrM3T75FrT1Rd6w9g7&#xa;OwOYimfYZbFJlTO7TZOStBzEY/d4yy/UjvcEjY6rhGhNWM/Ua94kOnEB45jKWTRmVFb3q8P/z5&#xa;rG8oMONnllo3iJc8eAaa5pyUuSpL0yvr4ZwcoCk3bdyKm5Rel7qzlV1XVj0uPsLrt9F/gt3FXH&#xa;1RD8f68CdLvTvXY9ygTgaMx3DFyh5tK3GYoZOxZg7PB6ZH4HyCUypN5fT94VuiMTRLsYRRQ+Vb&#xa;ZZuxBFS+aga/slf8o36QsoiamRGoeUEJtXDJJJZBa5SuPNtINP/5SDhrdb2k3mSkVIn8W8EddF&#xa;ZwN2IZZ0jcGDWCgr2NmpfaGBzmNtXsldDF8gAtA7Za9yrGs19P+dYGhX1nhkMi+imfsZrNLof2&#xa;yxfYRJEaXNOZuaycqt/EWSvh9xdFstih/eoWimqf5QshDJ9auUPfZrmiEnFLLKbk1D+L5c+n+N&#xa;r0GLL0zT3+QBjaeZ+XUNDofO2J12iyJCuZNHdtYtCPBlDHUCzF5kio7v5V/whR8sPZfgD5Sm6I&#xa;pWIz8cMq+hBlA/Bjn2l/a1d//ebW1Rf/lZfZxDgA4YqGAm3+7AzmbknsoyCsVYGm7pRme/JZaq&#xa;TA0I7Lh4Tgc48asypnhoIuuftgv+xlXM6FkjufQOBin/RBN1VwWjHCVvLwUZIpzIK283f1r+xb&#xa;J4L7YBecltiIUPU7acs7tbRXLa79FHJEwXB/5BoZaPGIMcabtvi8Y8wMhjEwEAAO7WNSwpRsaz&#xa;tJDkcaMSDV6pN6YAZxBQmKxLvvzPfFxp3OTnw9WEvlVR1P2D9MMXcODP37oxvhrwkHotALuh0H&#xa;TqNQ/DvlOsZSj9Fv3s2S+94jb5571S99Q1IshQ4xQ64doTIjYcHdMaX7FQnLb1c7LkPOlmo5Tp&#xa;msCq1DKK8tRrHoLBovB1FDnlDqc15YDqnT2FhdSU/VzEaxAtIDPT/BU2akUO6XZ0e24Gtphhwd&#xa;Yxhk5oNr0MfuD86oHzXDfPQ+xXcJWn/xbKgeIYJ8+D5LdgkGf9FtqCofGcaVDW8jKcwfFqwZXb&#xa;M2t7Ssm5rWQlmIZ7BPI1VhmGjCNtAQu7ulrYD4TDThmHsnJa2nSOwmSH4cEdu1JG5ASF1qF8Nr&#xa;FysRzHHgVlR/qWCNbqaPXkgNXzAn9YJNcDdLrJ0kuZwQ7ZiSUPnr1TLx73NMfNmSMLdA6fhBYo&#xa;lsg5AdzR4+NZjJ+dfT9Nhk8uVPHTtzrRuEHkpNZGDVekOlILWaXEGjQfkFKg1U6FgsBoh3ByMm&#xa;6+uVXOAvRSR75FBdiN1vGFra+XI99ogp5j0CdEaEyPXxMCuUdEyKPaRGHpB8ySqqX6MCN9GVOm&#xa;jVcK8IeiDiZ3WCOjETvm+TFW4hKjP/2lR5BVNeJfaVgiZEuQkPu7Gcf+Be90eP+nPv6R3kRimR&#xa;9wfOM23/kiG6lXMHfUsRsnOzd//h8Ed3oOIWIpTvpuyHJI61wswtio4uAVX6oms+XhUlTuDHAV&#xa;fsM3iipAGXsCF9yRXpElSfww637lwOrRjj/PLBPrZFHZEbcwCqgz9ZH5LXC9KkI32xeK2bWiz4&#xa;Iw2/NSWVdZFK0rhLGllZyWdyH7W+qRPXRDicFhJL/qSIRZ25dkpQfrTG3itP10nCpoJ9NfIk2K&#xa;pSzZ9YkNGkimbmFo9wwC4DEd/2US453ziF7WS3pIrGkVZ13z0jpcltSz0Vvy5GgBts9OIMqlvV&#xa;ZDBpG6/vyvvtnJO3peU11odnTRUHr1tIw0DJH0p4z98Ld4mHfOu+Vm8/Q1yReH8lXBrqrD9NcX&#xa;3AxgHavl4xv1HaiO+18O7ssn2sC3cg7Pyyh/ak0/kMn3/Ig7IS7nHL/oRz0j36k3NZGOgc/Dks&#xa;vgm9SwlEXgrIExYOTX39syPkhU/FmN+JHiDHSpg2+pOFOlUyt0BnNOSYV1u0ax8r6jT8gZ+hoX&#xa;qyRdOxoku8znSSnnBzx5MxZkPSpw2NNd58Rvz7ZMm4FX0NMf40V02RrhU/v4hmsD2pX1bmqd0a&#xa;tOrPE844xbqvhyiUOOs2NKs5rNbd+ZWH/JQ4953LOr16QwThK2DQRCQOKV9u08GHV9f3G6fs5V&#xa;c++NL3AdctrBtYior3XoxOXtQtdgklxssu3blzc3FseXlHcHZX2ZiKk9qs7Pd83SNJ5RmMGPtC&#xa;Ua++kaSDSCRSMc06xVo0MM7WhcVexEkniapttWPO+qmHHWPuMG0Me4MIyzb04Uj06ab86iD2V5&#xa;01Sn/ttG2WLMMwWf8Vp7Zqx40fXJ7Z57/J45NR5O6j+hXvK58yl4Gg6lIvfcV3ZQN1l+w6tD1w&#xa;5mVLGD1YV2VjhA3ftmOydgQPKJ8EtEQEc/IQR3TDS6IX/DjzXpwePKcn3CYBxJ79JU2tm63AUM&#xa;dgznYq0VJ2m9x7MDIzNdwLcAfqSZEflvoePA0ImKt8XXPGvEZN1aQiB2E1rTfKV41CUruX2gnm&#xa;cStwcxuX8vduukK3/JLtjCt+BJI3WwamXYgLrpZqOBNkxGg5DLQx6FJKvEOzMdmcZhXTruCOUM&#xa;OeXKJEUxKJlweqU+5RkyTr76wDiGbxZp9PPqzrnOiHH5+A66wXDMufc8hbqJ2eW1jbmd/a6M+V&#xa;3j+p4Qz4hggnLrYNUj7xMy7jZ6YV48OZPz0l2hXRxP+oQX4w1NI36lvSHidTzK0qCLGtXiG+xa&#xa;vdde3m/xEj347fNSMXDNyNlfFH6l9/ukmW8YfuV6R9ZcXyVx6NN3opgX89l/EH9F/TvDoBfrVu&#xa;fxp1EY/DDCGH866Jhb9/rQrvla4+YNwZse9d9XbOzjvrdSLYr+OaG9umwntJjWteVHRZls6MPH&#xa;byfyMnsvWK/W0l0GKeHf/w5RE7FHiDlVdPTfWbLp4XDYN7uA9RgxHfnvA43Qfpe13sbRbjmgUJ&#xa;5y8T8wgHaQaK6bwvf7sCL9sQB8OIX75gkv1nTTfG/xee7P+DF7uugdQ1DccS1WcSTsZGLq8L1Z&#xa;nApTuPJqXjyIH5jZ6iWEhXc2RaoiKxnCx5xnX7XvQth4L+1kohXXGS+0OZP4eSGmGFIryHey55&#xa;a8LPw+Iq5vd1wK8/MDtsV8xkTbQbLcd0U6yx6kG8cfZqF56zRwrKVZnuk3uW5EwgrUGWycdYOX&#xa;V2mozqVlLiESZbndQYi7SXKJ0m1u5UdVY8v1TLWqcQ3cp+Wfh4pv7dtHsFb3uAZK6wjEgosdQA&#xa;FgPZXeuC2yIpa5NvtM0U8DzL7JwWguWJud4NJPp6iTx5x9LaVnCrDMptuyyPqzWvqrQ7jmkcTR&#xa;hrjU1KrwqtzJIoNZb9VGmQglbV5rFMLDCV43Q9Rukv4U/cClN3zi3gNNhV0KjRgOvoH6aXLQnN&#xa;kSZLX3O5p81P7JJ/yqCMSwkRwEtB7iEGFXSROxsIAz5YRDyFe/1d3ZKeowHEluKt2HOv/LKRjf&#xa;PqbDYIrc6Q5BkkphEtBCP1dVT1XZJjxqNoD9iQ6zd2qhag7harFMdsMjVkFJ4EIG08MZkZgGTU&#xa;8U1bmx6Y1n0kZ8ulpxWTvsAOKy2SKWygjm9nnqb5ksNf5qHcC5OdwhwDUH89/Qy10mi3luKSL9&#xa;TRrGIXULXg+q61obDJSXJl6aQwhN05hDRD3Yc0KB3mg+6kfMFZHhbmD1vbXNZW1JFkflImZquo&#xa;YSrrKsKqCYOJTSICynWxlcTg54Rw2KPHTmeaqjcEBqwbn7Y82gR0BtMxRBfrKc/EEhS02wAiuz&#xa;gKQ/FC7kIrl4cwUeltk32ubSGSR8Y9cVUJHEMqg7FjImM9Qh0rXh2qbLhFF4i+I8Wuoy+7u1/2&#xa;cOC4qpUapeWUddUaIXCKtR3gYM9XXv1WYooOpjr4asVZq51daj1Px5W3Qv59UyLonBOnmPGr+0&#xa;LHjtZCB4pA8evd70AUAWuV7vTTEt97mE8j7bQCkaLdPzF/m7BjUjRafe8k8LQL+5cDByRbKC2E&#xa;rKHqjKxluQEStX0nZDpkmQjyM/GseIrNkfnkcqCrUk0UqVeV1ebSRfXafEhZ0Lc3cHw/ay67jt&#xa;J0r9dKbVYZTbrxYi8R0gMt1JXmU08MD7ZuCnCaXdVMnlo8O92am6PZI1T1G2yBdCdMQzZye0nq&#xa;7qSGoDordzNqdRO2rJQsr8W5xUOaPFRMWMY6XN+Olo4J+j+xekw2aUN1Z1dP6KJyPn3Fn1rMsg&#xa;u03CH+EG0X7bGmap1IpzXfCnIDX75/4W8EOnZsizIWXrG6falQofiJhTDzqOvdEUTkBfbhhkcA&#xa;UzLXj+h0MCDVJphN8wkK+ryZNNQjDpBcRsMHwxtS7iRbkK8y9cx4GjhD14HYSOXik3KwEnuTPA&#xa;BKPogS4jOnvqF/05UqOedSH36Vb5HGBcP8zIdDsukZvumA+8Nfw3tC0Aetz0i0248wr+/pimy7&#xa;Ff54w9cRJSt/ewteQJlLfYeaG3U+2sI0d0bp489PHGMy8cx7/g5f0sKEDP87Rqoyrirr2Yk/zz&#xa;/G/rYl7jTs9zc9RYddfbB/PFjC/Pirr53JCLlmiDsUmBE7XSBpxM5fSvjRVwyLsR3z2/iOVYAH&#xa;CcGXb4OjkkqYhUELoikcfqpv6HtZuS5VX8iu9o8ET0rOMWgCkvsPTMXOZ0bbO4Vq1QuFV3XvkU&#xa;hewNPimaSg//FgfVj/QOPCoS2lI95OGjL87cHO8UcQbpDIvCgjSVKW3FAaAsEYM//8s0MBW1sN&#xa;HAXiyxey/9SE/b/OuLH+hw0Kklj+FOCcdLQiNxI1UewmUoHQOjbidsQkJWLNA7K9LaeNGaHAFX&#xa;kPzvKaru1mTpvrZ/8zjwUMU/6uv0Nuko8POZvkkBG5SAhNTazX753LXhZ//umAPexZgnJf2Fqr&#xa;USmOG+7oRu14yyxrlGTGcTVmD7rgkjdRsERtlthiVqMbOistTZ08JEXwRdONLUwzE4/mrWejvF&#xa;QslFtdWPk4JtzsKzkU09nPsDkYWNf2K5kvykdZYcBA6laktUf3gPe+yKaz6jNvd9szuuWLz0Pa&#xa;nPF0tBGgGTSaXFGPfNaEg5SaBPcU68ZBx9A7dqZoWs0aN32uJr2N2DQWIFFsccSLQnGHWzQ+1V&#xa;zaUKYEeheYHSSfdA3l7D0lMOBYTrF9va9+TA1KU0pbJ0EczZ6EklMtoXrry7GsfD9SFyf1ij4w&#xa;hYtKiXLTYuwPhwfw2owfU0PUAJN3h0VhNYoqgpoJLW7W57mjjTVNzPklqK1lsMWzskh5zDP7TK&#xa;EZWsdmvqNAbizzWAMjgt6afMTBZFd666XpEHmTGLaYWuPTfQqKZHAqOWYVQnFngxRAburnZMRj&#xa;SpJ/Z9xqo/6qetj6EcpPobKwOXMSYKvDM+/59UmZGbQrIZh2DGSQc9ZBd5TGiCF8RWtrD1zTd3&#xa;DsmK4qvQZ8FPvKF0XdHa2CQCyv2jOUJ1Xc6cpXEsE0Yy3C3OqYQdRCI4Sd/Bh/JZcmlwdB2rP9&#xa;oo7IkT3xZBWRSCxExrPTMRK18z9rsMjDxok/iFnSaqrNqrhIpY9fCA5bzvBkQRyV4iWIh/ROa+&#xa;mFsp6ZESJ47JrtbsrE+uwQMHipzFHMoMU9X02saA270rMjdLxh1kLAPuxSvnZ2FSpgV2dU4uts&#xa;cONOpaw6VP9452V1ThcaXzQMdhnz6dd0ffUbPImBofs9PZTeHE04UjSuHz5aCaqqUroTclm0G0&#xa;SqDcWJDde3GV/RVUn0Yp39hMZ58SqIwjAhWCNz4awoytbNkLdLvMVZcyuEFNYoGmJE4x8PrgLx&#xa;e7RpRmN0brxJhmu+3IGNuJJUCbNcwG9TCj6ToknWGT54bxY+OfklGtF8l1AYEF491eVuDl0lh1&#xa;qlN11sg2A1THAiQBsthTLT66NlYSAu7RESfnnCcdL6oeCGtI3U6KCioM4p+VPDf7Qz1gNnpMbj&#xa;FHIh9J2447ZfnUQLg6I/k1wWpRYJ3xzgIpezCyswYI5NuEMKon8GHwZIPjBN4zFHeXuPsMEXDi&#xa;tiraUHxmK30DoJ70PMfqAIkKO4eW82LtAZymzmFv0TgKvdjSaP1FWLqjPTG1wWu3KSSW1bAoxN&#xa;Ui9OVKh6+YsA0AxIyu4b9ibQOLvQua3Q5GMJR7nXRTvaqGGSEbabE0tDuArny1L3+VtnFAbvQ+&#xa;ZgA5oUN4aEmuhWQnI1Z4Lz7xWGo3GaEw90GtKGHE4vyfTzq05WNfqGPj6lms8xONyu6xyq4ov9&#xa;+49a3uaXBz+iroExCTBGpC1GVW2eVktxds2UFvEzE8cTobc8Oqn4on1ioK0wi+9yMW5Qrc9uUK&#xa;J+iesRL0iv6FnHDecc7svEOn375HzMw0cDsbtath72z3GNgwh8p9oXPYGmtz6ZdYXogoVsT2l2&#xa;CLNR9atna3gXRSP2+xGEDHxVgQ7U/a0pu7p8niDjB88E/Qc0Yg5ksz6XThR5JzZ0zJrV+DKmPa&#xa;srCv6CdlaWeFPhbUZoMRmpqc2eUbEHhqWIRZQpOTL7PTNXAkZoqd53MV+CHh5v2BtIFv4xexK/&#xa;zVvOLwYYVqD3+/QEN/eKrQGurSuNMrKUOClHnxs9FhQAhCUQD3A2CmFc+EXRM2texoz9ZY6wXm&#xa;J0eQ8/Ow/6jaT15i6bUmE7OveFAJHX99tpwIzIPp/BRxaaxDWJVt95kYejVbDaNskvarvrdmiw&#xa;zvhxAhEo4ojf4KMLwy6RvG08wl4vdxjdr+PCtWW/bKbKthAVbKRelMWiIMeeFNmSu8ZmrgP+Zs&#xa;Yt/cbj3F/MOAb8Z8z4v/lF/1c2ruRfkWh+aDksybQdiRqMdWjtHmidqnw78sIScFsYk9mWUyYv&#xa;mNm/9+1EbD5bc9p4/PQ/O9VcwJj/D5loUwAS1y0b3lGX1/XWtv5W1y/OP7/f1wm/eN98E+USmK&#xa;S32Tjg08gkb7c7fqhGl9PeULDy6qf53qn51RQ4mQli9hBI03y0pbu6kio3P2GZsJVjnfPVoddi&#xa;VhyjO3G3Bw3HOeVkVU7Ok8fygOhpLy6dF7FaandTwAVF6bmHbjypnCRyVPUt4xRzdjM3DSdlPA&#xa;+TvmKfY50dLfgGsdoqpAxzD/0LFmaNfI7+feg2CDot1sfNngY/qon5TZnEUNBRe1m9WJJZH7Sk&#xa;03qK1aKQJPYAF2iiH73ZuU2EFlzK+nqp+nrm3Hy9MygTzrx/MeovbiBmlcpUXMGHKWq6r/Lyxh&#xa;7QJ8VvahTr2fVZYLOv9M1op1btwkDgOsYDCFtotOKHIOe2SvNHczaHd5rKXDBE2ZTduFXecFQl&#xa;eo+OEhTKhJhZwDUyLbTSUVauaMm57SKEsJ40j73IB2LRVemIxcIy0MPaidUaBkgixqCLoo2Nam&#xa;LWjy2t9BWPqU9WkHOV4bx8speG5NVbWUDcRVEiSfXRwhksMXyaj6hvKcyKceoR1L4yvfYPIxEF&#xa;6QWW9P3SkxOTKm7relJ4ClVNKfowPhVno6Uc/ENNvt1nrJQ/328SYqAa8mSupz4DzxtDBay/lG&#xa;3HWWJxhCmkHk+gFhbjDxBjf+S3GFmeBsRZi6eY0SNjYXVcV7qS4xV4I43fBkuHS0iyY+jMMQ1n&#xa;v/45TCriakEI8YzpVXzcSRz0zqQYHylSdzWd241Htq9CYGRqVj5N4VVbK+ywMbCX6Su36VO111&#xa;fxqM0MprwpjtnHIsUE703BjtaoTFefoMUahnHKXBifBCL7vaOJluu0JAsByjbcFw/HRAvQt0BV&#xa;ZYoQivvY2GW31XB6zuq9LljIuJVAf5MVl7MLJAiFTWwUthWshTTnnRYWzhE1OiuzC96JikBS0r&#xa;5JlVpEa6/wYnSgFBwCn2gJ7oKcQus6ioX8Y0SmgD4ou1neGrgnIsgTQUJDzXwBV5MUtCizNnuO&#xa;udmThhZhIx9cQRSPvUs9uO3zPINylObW6aOETopKJ8i4jzeA3y2hQN5JtU/uSs3EROvrY45+5Y&#xa;xkiNpYN39Y3cG95veMuZTlWRW04Z31Yoh6BYXtDqIRqyeRA5Way6IwoDggw8dXsur1vrcR7fP7&#xa;9tR/xO2U70ageBCyw3p7z7DB783G/wWSoFicFlrmulvt9EVBiha3ytW/OeKf7hlH8wKeN9YWM5&#xa;1Gbj+q7Eu8j9JN1hejWjlwCVSyp1BjLVM4fG3zVPKMzJ6ShGNV3XjQOChWZmL3Zzu2RTzb6yOX&#xa;s66zIpWv4SieH87+hyPhx6QEtZL6LrFtq2A4WdnKGHzC++LgM2edqqTKBTRkv8BwT73CtiyU4A&#xa;Rjc8SbHxfFC/U5HR08DP10/cge4VpaF/Ns7x+l7ZI8bRySFQzcgH9svK/E8fl56789R/8MtEAk&#xa;kvIxaUm2YJ+Sa1M7nwhV7VtEcPUunY+7b5YslSQVNH0n6bAClhVE8GsSuX2AGzZHfBPna+zBkG&#xa;ocati4IoKUTQvxXGjCGzAevuNkqytDJ0SYcck3c0rQCB3UMG7gRbou8QwYTEBk4KMNcaDubU3Z&#xa;+Qsqbw/iCyEXhcqha1IJMIwRzmyDs2p8bKBddfb15TnbJ+IgZEUXxFOYyakRkqSgTMLdeDQn51&#xa;0cCtRZXSBKlXgxBeoyM7b+QEqgmEtIvhyiEF73Fwei+f4LntI6nsS3RNpItv6P1yiu8wuVD6Rk&#xa;r581KaRgROJfbwNzO+mFXPdgLhynMukgcv/gLzG9arZFuiQHZY7Ad9bvRM57VFN2L/fD6fc/bA&#xa;MLjkkMPqPRQA7ESgNV/Zy3c2QV3cLdKpVbTsi/PTEx+UIRRJC4YRIqEDFROJ2kBz5f4X0fy0L0&#xa;JAPSraoHWxWIpV8UxMIhx26e/yLKfP72P0QBnzoCPP5FlHz4/0gU+0gF+f9IFK7/mSgO9vbmpq&#xa;4OzhpW5h5khm6OZsau5v/9o8v/tsvt9W+0fBpAK2BJDAgrW2+u5ROLkQIXYVXIv5aAN4NKgOuu&#xa;3zuFbL9HJkfK2GD+XF+qXVq6Or8upxfh1/f/7+M2ZjAEgS4WW50e6ddbHtce9/8YQPkwgqxsw0&#xa;OeAtsOTgSxGaBet/VmSNbfvkzaIyVsWZic99L8NkdwGA5JPVjWEvTzfJzIk9ZDQLajXCkq04jv&#xa;S0A1TlVfOdqDotwUdaaLCa54d6cQXTN29QUqSy3O6Vt7zTDjfpQRMnCsSsxC0xXkqLzZKSuGwn&#xa;1SS+CvEuPbtK/YqQAV4mleev+03wPHIOeksvZB+JzWhGSjraWLGIJx61ff1kQO7L7bpN1b1zRb&#xa;SzlSnRRyP+oMMrguZkj3KGN1m6GRFTuAHXlg2gp1bKVxgrGdY8o6M32WvJmt/0Ij25iGS/muq5&#xa;WtwZlb0nSyr6tGIksDwQ8W35Weehft7ziQ6Av5CiBCRCqt2ErYOf+EXod48xPIp0FNA7mU0spi&#xa;7fr2RTulFmoxSLcGS9BYseOevwqLamlEUcwY1p4weruN+OzfskTC1sPpPdT8qM1ckQq6oBGFd1&#xa;aIOfIMOj9RQyRqd+dORa1yz924tR7HHPiLUMqHRPJdgiaL+NCUrwa90V3w8lE3M1Exa6mNQkZO&#xa;BDWExSRTuxb721CEV5CxX8WaYIkR49MocIiURFwAhVZbFQWBJUVZWpkWJLMnGIqBHV+Yai98QK&#xa;JRL5U4oAg6UrdKbzLoKExPr+bgo0hyEzOiEOBuJCGU1YqBiR7GGvshMMYfIjeLMIEiFAssC50/&#xa;7dpYykawKC9Sm3DT40MZqJ+JDKXE+lpIq3+Y6eXluog28PeokB9A/pk2JNTe3Nn9PXQybGA2Ja&#xa;3oKsEx2PiHUQI3Fq6sioHVAqwCCfG+9AOtVoj1bLsYecHhXEZoWfmZBanr6I0jUDkBfvxYEqLM&#xa;UWeIKdcdHrOAxhNjc4+IuiOX6qEz7by0p0JKNPizMvjN92qdDwqyPYpiotkvnhn9RCrS8XTrW4&#xa;33krExBI4E+HMs8wKkWzSce6YNu7S8Bi4P/7BzX0s5I/7X2gX5/iUWie5wRXChDSIbjpw4pNjD&#xa;b0wn64c/4xaoEIkkH3f8o/donY2+YLDrUW8D3kVlyZypeVwedMTGX45Ty+B0+rwgLG86obUmol&#xa;Kz0m72gol3tzxGwSOJb5Nioj0zjOf9aiX6qlgYCtSDYoN7nt5Q5I60fFVHusm9VyZnc1Onf3o4&#xa;tgcbdcnei2LehAAeC1CQ6WCTJQaD6WEIZwIpVa7mh9qD4x3Fh8JfvhuP8/cKzCOTU1yzwUlU9j&#xa;fKne0rYrfQMy1ZrtUOQOQc68X9mSCvMMgsW6MyHJkg+LfQ4LKjn/Dekf6gJkvtnk2mKXP4+0Kb&#xa;dDv2QnUMR9Lhx57w7iAr5DVtTLzj+HoiqkXvnJflEPcV00APRdZCialFFE9L1tiK88w9X8vs4a&#xa;uwVdivNUp/rC+LjfnY3oZDOuVTnI/E6OVyzuxaktMOpzaBQ8803svypvvEAW3MzrhZ7vg0dbSI&#xa;lAH9Rx13BbgmHfu83qBRiHpk3Xr1GD8du353HtSqcOChi0afF/alQIzM9KD4HGqOU6jeg8SCkY&#xa;tYjYN9tvAKFDtLCL/596HP8/LYcqjM/thdwwYv2HBLx4X4gog1BV3WE6p+siw00QVhlfMXa1oS&#xa;K9GykAMfHbhrf1hPWohVOU+sjpk94sgZXaAGclLb8ciPc4lyrlmq2k1rQQLJ1rL29IfQo6kbtL&#xa;iqbkMkaEVTozsK0F6sR4PEhcJ+xu4LPYBdYZfbWMWRLzHb0oi/K+wW1nmz357Yr1+YoAeoXIxz&#xa;lReAg32cUhsj1c9b49Eog4muEXLmSVK9VEXBj1huebpae4TaRLMwnjvmXkYx0up9hah3QjzAuN&#xa;E7aLyI2R2rScHv9AZ/Fnl9zxdqT/KBuDTnAlv3IQ/L71GgsB+by9vGJlfpgOots+VTG/Zlaxh9&#xa;ug+hkaixOKlKkWLfw9Hte+PtoZ3vfbppe/ZnHfcvrADHK5W+eBIDNaWpgDuZ+WOK3X9QYz5vqQ&#xa;UB+eUL2X+KGt7/M2oUHMz+B27+FyGTo/nvtJH7N9r80FEWFSJt29cQb075okGHYZuFMAoXA8/q&#xa;xCJ8aVBl9+PdoqrmR9aPc+5y+qG1yzJvhT/luVvPFkJpO72g/qz096u3zUP5z9fnZcEvbDuUoM&#xa;fJb3xZ/DuOBHYt9NGUeuunHK+zmZ4MyWx6W8aUryvCfIktTdzhnDRGgNSPODtE/PhS+CrBtYsc&#xa;KiqT8tacT2AwOFSMHseZCzf3ODuUlytja5toVLIpyiDAhXLF4DKSaSJviBuCmMWwRxiEvrtibD&#xa;pyk312wSt3QP9DVRpHLYUZDVckGzA4NNyYV9bWXwO+3aeknOwGvyzHVhZr27IoswpI1Op98aSR&#xa;z5Rfj4q7TepEiU8GPVlALo0rNS42y3nw9j99tcfIR3uqbMkyVpAX9MiKde0Yd31VGGaGrh1yvC&#xa;zo635doYwQlP09qyzcZ0xQqQbOlGd8GONbebmkFGmNLrxRZIwxJiv9ZgDK5zWywOYY+tQURlY5&#xa;dOI9di5bJOmhloH0q3QCNbbV7/uR8yW3QIcZP+b0bbltHO5VL5J8UJP2clKXFywkEAxflDWjhd&#xa;n4sFf3yKCPIy8xQXVE0PQp5bA1SRhmUv4cqSjeJVtvtxn5bV3+/KKJrswoTLeAWnUF6w8BD55N&#xa;ZKMV3cjCZoLfbyu8Mr7pF5ezG+ej1w95bVvEhIIEx77aGfyjIJCJpnAuPxcWs/rdbqXWhNadiW&#xa;1jdLk21NRiQ/nAnSIWYFxmRBmSVg/FCurXjTuIeYipAt3YDdmj/5wRGfR59023K2s3pl6RhcFm&#xa;mePeyjAph32O89iyJLnWvU2IgpqlEIKOKtGiIzdRxvpKMYhfeGKua6MFYlFe12ejE/vpOqpAME&#xa;5knk6Eg7i/kgj8PcpMxXVC/RxGS7lzHml1IlwXJekUYZwGfHQaOoNVKO07YueLowTXcoJvUiaO&#xa;mjWCnna9opJSypXQfyxdarlBc7CxFBhhcyxWI5u9piZYhqToGOw1ns1iO4/DydCQPQjKjDpS85&#xa;I32UvQYZuCZ0G/bFS9upwt7Q2m75tEWtJFteJmYC9mpkKRptJYJMNTMDXrO4nmjEjiZlNwST//&#xa;rvErOwWMFbtPGaSiDOY+JX2DNBKPotyfhtvHukATlsJiC60YMuP6QXfYEmECkKcimsaFYLQeMZ&#xa;YScw4ufdys0nB0Vun3iqTDasearyvnCtPExtgCc4EoU8/uRYCf3vXaXcdl04NdrFx4Sdvx093I&#xa;JpCwufoc8sK8Tk3SvVZFQOnzwxkc74cg+Y5CETskTQZBOLsitaoQziz14Y9gqe4bcw+IdmB1X0&#xa;ly41S8bHDRaBx0ssUxy2Ohyyiu7nfnjzOFyUV+rNthhVTX8OGwebgfZV30UOs/fhEZFPflhmmD&#xa;qXjRGYTQK3Taptvmevguv+KKG0ddm/7NpODGpHSQ1znEb+OWulKzwUfOa8Mk8j3JVeUdfkXael&#xa;CjQwr/lH/aBIacEToYvTcqsC0zCFZ9AtE7FyM987cCvASEjoRv6nfZc/O3J+hNQ/KH6ilTYVUm&#xa;Fc0AfDhNdnRNTMm9X0bKbre9tHve/a3NEiPg9V+infLanoGt4LKnchdXZfpCV6G3JIUMyaDQyG&#xa;0pBdchaZbZXMlL7hNNZQ8CHYKq6aIDFo7l89khbz950034asQdSA4IpToHChVV0wNLOpzeb0kU&#xa;6XxPB8i43THwj968Da5yKWdkc91WJSv1bZLmbOpz26ims9k9/SyZ18A6GS6bWek/gPeGzfji3F&#xa;yRymySyFcOvhwCkUwx0Xs3WIAEOSkZJRk79aiEo1Fl9tmoOjg19Wb3ho6hvbkZePxpkCy0+J2n&#xa;8wvNm4lbK5Ou0j3WSaS+qOEmdC4KzWCJsOq8JlN8rogXNba96bLjQVQMB7hlTMnXLcrv4bSKFW&#xa;pArdeydTOOU05Rsfiz4Q6SN5wPKx3Ocb/kT7qaS+dt4tMc51/xJ0WVwJaXyrQxHPK8B0z/YVk7&#xa;tNFxTqdKSUSx2v0fxnk5WzJ+T27dhzfqeK+4LkD83vOARKF1+hOvzlV3VEtvqQf8qKik26Ay4l&#xa;BEp6Xl+mA26AdXlsdRxwsKhgckGUP9Yc4AmcnBBw/l7j4/xnORXsSvUCkqEv4p2Ld38nl//umA&#xa;32iD2XH/RSie/xJC/aszk6Nh5YH692QSynd3HqHMRmhoDPiE4jAl99VmeIh1UGCxmu4CV8ZGcc&#xa;ipXHYG2hlDbcRed48HoiGcJ9GY0yvZ8UsRX7eHBc4cxyU1R5kL5fNmrse04J/PJ6hAAj3LlXSc&#xa;4xZ+W6dcub+0EPtws4SrP3NmlQZsZT+rRdAyDHeN7Zp69HViDxaPTJqVggL5eKWyTClfVCiRaK&#xa;tVahIOTFyVOu+pi7Z6/yyl5x0ZZ5t4FJxbpDmgynJ16zSSqVr3S3YoBss2OFF/i9ZbME+Fd77C&#xa;MePM4+7Lb1oIljWsPuV1ZXx92VT1dQKmKApRkk00fsY0aQXOWLOcZ6aQlPFEkCo1JMdQ/e8I+5&#xa;MpZtClvBBbEHvfDAG9E2VJ2rj25m5XWknS8k/T2/tJ4RfihYhtis+DGKL2+aBFlq9aRfn4yNjE&#xa;1abQ3Psdk45EH7+c5a5qJjLUw3W/QYqPznCJmnVjAuy4jYffZYSpvn/F6O8tgSjIGMqJ9trmPH&#xa;QUxmWC1lFefBGGyUmBDTY6JZcRZcIgVL0hy01qgFCGqEKyL5mxNdUynLFjNzwKo3tVVarpo74q&#xa;txdAH+D75BLdNlnKqYDdxA1rVAiMvy/Uoeftd+W0rQDps9XAqKNFhjJAkjtkmtfiHMd0ekUayz&#xa;eNkeXz1qtKcCapARBP/XLLQwnubFXoNV9PSfrXVrRMO30pxj4JLlIbcN/LEdTfplWvxBPBK8Z7&#xa;6/cTo6SDRyraFNTpo3FT5psaXE3r8ly3MeVOUXBvqOJ+7ELnFihgyCe44TbkIslo0AmMW+eI3f&#xa;S5PErnE9gidx3AeAzg2HmbwL45iQw5ZZudaNORaU/O0U7J5TxiLMCqZ4aCgdALe3GZ3NlzOCaV&#xa;abFEdIaIFKi1glILyRRZB9J47Mj4FMnZ9ws4q+KGjrixDd9eVBIG62OauI6p7YEgzBlKaMaoo1&#xa;IYD+UaQMK+vc3sjA72ooVitTw804gaiw1GTlPnSIU3G3O2Qd9436YmlbhkcyMvGXrMbud3LbU6&#xa;m6LMQSuEycyQdgLl62NcNkv86My4IQs4jvkxIMVAvWCLEDgGjYfmVf0JGkdVLZ8NiisEDuzXUx&#xa;u2TEL9H6GR3HC9smqq0wMPHOZY5Uy2emSlKMBFCGpLtHCt+StnpVRjUxVhZPIg/wKYgzVf0Zvu&#xa;0Xq5x8K281nMmXXPstTAX7K4QqgIEtgtQ5kvXIxIgKojPemXwFIC+PkYnl5039BxFoGBYUAWIY&#xa;uFXHoqxQ1MkzXaG/14McZHSoFLXGPMqSdeOpvBrcW9JaBR97qlJu1lA+lNCN03jtFMb/AHd1BW&#xa;anWdmV7vMpu9KhpNA6F81GSE9anJJCAaqj19CT63QuGg/XB7RLvJ2up36FXSO3yDszQl+06bdr&#xa;4FXr6+bftJe6yCjEFE6YszeH/jdzyhlygta9exwh/lruaF81tlx60Pl1TBZGDNi/UcySdn3eHD&#xa;9u3RO7ze7iQnsNXDkA34J3akBJSZnutiDmDe2zGUvurLJ2iVcyLq8Lp1pM646w5CFcRO38YdTF&#xa;Q14X/aC12V7vMUz8iHBrNf5HVHwsMprbCdwrEZYVebYg+AEY4TIXRodXs4RX4ZsBodjHxyxdcV&#xa;3IS1xf+6HjdSsHlwVufJAT4tVvTz0g3175Mb6QjddXKvfkWsCsbTSnm11y61Y9lMZj0itz2U4b&#xa;r8rRqllT0mpvR6R25ZPwaWdW8YIpbFsBeHJ+xOo49t4IrIY/zHWrDmOZ2xZ0ABzh1DaqMU6lCZ&#xa;O5JBgZCMGIK4pzsoKHPFcmUP45t2VMyfODjR0DpfwiEgWUJb+HKZn/sb+0nT9ePjoD3pM+faqR&#xa;cm5h+SoAKoiAUmdlfCJ6rIbnEt1F87/IqicFvD5ob9HHNEJijEqnlyZdf7Y1Svn4f8vvdlVV7Y&#xa;frVz2AOI9ibkv6k6RWnRfh8sW/S4vAr+I1vy+oerIb588QL8V0CB7f9LsqVOtQeL5h1/nYCHQB&#xa;5XI6B5lVdZaUDJgfdjFhwGAavdduHY2TnNBuHuxMDeKRyNcpgsCvtIob5rDdX4u2CsC6yIWXdg&#xa;CIC2r6F/KGGXe3HV4/uIrnVZEls5lSkVRygXdlRsvLmgolO4Lkx3WEEhxTlObQZQAXfVtiq1EZ&#xa;ukIfj2Vi2TLasFHX+f3IucgBL+chJQnV5gVmWVceUOuoTYoBOivlC34+zPzvS/4sA9dU0/vcuJ&#xa;M0XSi91dEw3zu29QRApIeykqCg7t51OrgDYS6B/DflVbrylAWaQJbpPsp0tJT3roAgh79Eyw2M&#xa;Z81AWTFI/tu08dKlSJB6qmAN7U9gHmTn/Tw5PCDhm2/4w3rOu8bXxQu0r8TVUi2EFFSbSCmD9u&#xa;VdGKGnb5yfqvkkmTRlptjOCKrB5awGNlEdvNpuieqCrdL93ispzwuqh0fVtHU2gQrFVOqbGJ/h&#xa;sWB5pLeKkew9wcOMADWg2uT//5jsfbj//cBoLfWpUwJiPCsG70grARBTNWEysR5kdn0Hper9cf&#xa;1LgwArYl1+nDDE+0FY1cyuFg9yn0KkDSGyNaAMJb8UaxT7E14XfXYzZp3AvCop6fXhnWFVz6Ve&#xa;rTUVjMil06WQeV0K/wrzunxbZa94jREQvlA5HQZBu0ZAYKmcDlonjFZsdbluoB5oUtP4FaEe6n&#xa;STl8acJjDMJsBEMNpLMvyaZKjjOqV3CaCj3LqPMzIQbo8XtI/XSzZ/sxi+jZcmGTNp54itD1ez&#xa;gWRSJoRb1Iuacbygn5fLEdZ/I1drvUW0tTvglWO1IVUoXbqny18HKu0SH9hZxWS/jsLDVpI9/Y&#xa;0Scr7jIHBoh/ALNxzWjWzMs21ovkQyB0Q7OIq1sp5pz1rKVMlciSlKorpbmyh0ZCZzEdkMhdgN&#xa;lHDMvMNf7c1N8sWEKLACWFXy+yk3eIEwjJC0H0nKGW5eqw1OYrSLmQBadv2mN2yINYmUpCuZyw&#xa;BgsJ/QkRB+Dy5z81a3YOikH3KNpMzsylhspOsHUsdJ3fjmAVqrhC8HFy++/7WjmBbWiV6hW39L&#xa;3vLW3c/DFLGx+x9wxbtOStW2V4ZKHvbFHp4XBiTORyOLHJUrAChQ2JjTkIpglvH3hTlS9Yx9gY&#xa;2xYX9eTn9rlrpsfVZtH7K2wjAuZaLNLa4ZfeeMMofKRnhr2WgMrqJ9ulk+Nky8rrctD0bVhU9I&#xa;sziiOqyu2PKLg2sf1u7W6nE+as+lMOPFU9RqgBkd1BuWiPA8j3tn1VtTqT5+93bYMoz+SnxU+4&#xa;9ckLUTWuiTxzPrmDKDL/LLtBB3Ni/4Ze+Z3wgY+egf01BycGtjnmhYY5fWn84RK545fMiXbOcH&#xa;CpUXHtJw9GrTVNLUPcQEBv4dleiObAI8jBKjYBxggMY1/A6XrWHiZtLmNlU/Fn4AbMvriYPgU8&#xa;DOqvxOyTmGSzQv74NZeZusIrvmY+jTzJUXPb2uWi2Me3zKEOXC3CHnhb2HyDbbni0qGRaS22YC&#xa;gyeQavi1FSDl9s3LNHd5PT71SL0sV+8zINxk7xY8DK4l+UQ4XcQeHmbNuzBqmOEv+/bPk/yRZK&#xa;31S0/zrZwv7vsuVfhELBw5JII6L6oVOtnPwF0uN8yeSLLMwKziCJ3bzxHcoQCJuHVbjmh7uD3Z&#xa;+4z7i1r/Rl44qP2Z/K/F3Xk0jakIhs3JZpz1cfVx7L/8oGxO1KglRXra46lvGnWLXXG9t2V6fa&#xa;Rq/JYBdXC69umX+O2OBCFJn8VA/PU+nBWhuLs5veHFdzrcoefeOFLQTwt6hOYRVz1WhuyhEdqt&#xa;FPZ+9m0G7sIYBh2uC4AX4urQicVTFdbIVmB3uzEIok7DqyeOjmzfupaJbZz9+9LgyRw9PgYJ+5&#xa;FiiAnKv82odkN3bTeqdZm8n0FJ/lSHVn9T1WaFYBp3rlAZ1qxGbzLSzs2nOasBAiWJMs9boAXo&#xa;bvaaf6Jm1oIqxm5Nnq1tkF7MpHBhp1anelw+/4kmWO+IqlFP3tEA2cf1/IMxFFMliAj09DsjLp&#xa;aCabrbKPszZTQQJKZ7sQU/1m9WsC6b5UPn1X7ioAHU28ssJIk/8KoIvmeJdE3D3LJWoqvHJrSJ&#xa;0rrtuGUmINKerzV2nCM4lQaS6fSCoocQSXRg9PNDnZ1HhAc03eNsnYvVgKxrToxpTEnQ0BiA6Q&#xa;JT2KqaeVgEKAaO3cwoMMcznpqVwy6419WDyjeYsCyy1iu7WtxTsxiARUrTUwoLrSXfZsVScMcM&#xa;cL8YYR3Djuc/3uYyfiWcMFS2o3WAaWCzT07ihTD6AoqGnphmdLyQnmAydzloQmGoeyfdFdlWkk&#xa;v8bzhPN88ACSUlX32hBe86Y0ihjw3sNeiSPhqGN7ICatEr09axlOn9gNVGm2VO3TWs9615glUs&#xa;3o1L/L9WgGtd7GOT7jlJwEKyeqivRj1Ub93jY6kcJCKLvSnr8NM21OzNYLy37Gm6cZB5u9uMH2&#xa;ufKqWjQNxiECgHZdnZO/22q8qlx3AnlbSud832EFZhxRr2GvCOe01gSagyvc7kcU9cvrTAjQ1b&#xa;HyMxqeIZQ1lDSYY1NA0p2UbZulicgaOSgNJGaWA8i7w+UO70WLQ7bfZt++H6UQn1BiIZCL8q3s&#xa;UJg7bCYF0+SQk69jz1sCmTaCykwQPLCfBDHxmkpOvjDCr6pXcZ1wcfw4oATon/cM2U6nt9ncaC&#xa;vfwgqYK5n7/aw1ODqnNBdS67f0LN8DEzDEbGOveFEZ9PMVD2GmjV/ynCpdiTmPq1BUf3FzIn52&#xa;Lh0crmRV3YDRWOjUdwMImI1dCsviAUKl4TntMCteQRUx+KO5P08KDwaBO9dC1eQkU0T54uioIV&#xa;fxM1FtvmVphV/tyNo5LgrPOR/cvynPfeVJrz/Wo9vcbIro6jo+4zmfCzOsr2u6OjL1SvKVXWbL&#xa;+PJkJGiAPAzH77b75TKyTPOUmiQv9JaqhiAFFBqJ1xU9tSJKIeGzF7l/mtfgAHZ6ZTiLOciXVd&#xa;YV0TxDzMxjjcFzkiyn9RKX6zHDDxLoIJBkEboq+DkDJDnQCzzbf41hH1WAuwEvQ59kO4WRl7du&#xa;hMjeKC9786Znzu47FboWy/cg6wqEux1RLFdk3L37jQo46Mgr0K5m2K2J3FAFuDIaqQlFNci70H&#xa;4Blv384kDUT3pBfRdfUvbYZoBqFfQnmt5Y70rlDOgJ/tOOpSMwKY5yr/WO9p87ecD+vpPn8/Oa&#xa;KgZJ0A97SIwvyUDMSgCpLD5b6LdZYLpv8O9tYMn514lfUsYH2HuyL0Az7HnUYmtkTdiGfdKF/j&#xa;BMIjwKcORkrowOzjzdoQ+Yu49ocd+PMrHaoj/fOiRvuyaagyX7eNmUsgMSnJ6apH79W2XOXZ4n&#xa;ZP5LO0TC/VdUZo7/xVBS+dtQwsoPhA6GlJoXAWr/CBQBErPBy9SvFQ6dHlDgy1n2TRTTXeEG4+&#xa;5tdfjd3fwILBPjZsg7wAtIGX6ekpOdg0RYyZ0ie+4ev7efXg/4/LhE/KL/Emls6ZzCOwWTdS82&#xa;xyJf+zONH3jDOqtXkr2sl9tw5/tEUpZOV2Zyr4+C1d9YaKe9f4xCPklHkfQZG8okWmaOicpDHW&#xa;eNTokstYo+zz7kucfE2S4Pum/CgcNKW37d+qs6V3fCccFMHnSDCYHkGx6o7fTuhfFxucWH+S/v&#xa;49FGgOYRYviaLvD82nN4lOYYdCDPDmJvA6rEXOOMSO1VAkjqdFK4b9KQHBP1jnXGOFf+oEl4Ib&#xa;ZA9pF6Np0DexXa1EbQOOJKi4Syx/CaIgckcrESpVf4ASprFNoUC106ch8shGzBGLBPBkThseCI&#xa;5V72RzOWunOQu2rPmddcJU0uh7X8vsgIOAkj+KkpI7KFUo/VskUbGnKsx3ClQrHKCOTZJt1FBm&#xa;E0muKK85hDD6+Fo9v2FLEs7TOP/QiQtMT9aJKHTSOaE1EextI4hpfEpb71Tcs/YucV7NGfpE0N&#xa;bmPcRi4thepPgxqrCa1JkXaqNsLV0U0Uwly8VCAQgxa3l11RwBr+oRJGSMvUPKjyww4TWrnA3S&#xa;Q9Bn9lcsaNEU97k2PsSi4T4eBHI60v31S9WOvQWKa8uouPombznF8rrnktlI85X5CfGxheczXK&#xa;shyMIuxK/4/6EFrEJzBsxd38EeJJ/5F8WPp49uxqNyB6jed3CTVXj6Ws+lVnpQqpmjQei7rydB&#xa;KXS+kTSyCG6B4tY9X9aRU1lpCEBM4wFkYkcrXT0mwCIs5PzRtAXPRvM3S6PpNZ7WmWgat0RDK+&#xa;4fwJocdVM0NbgrWnd0osCFGstFs+hTeQjfebOB46JmPkLSkCT1GqaumuIvzs2F65wTS1jY1RQp&#xa;XYEk3bsFfQevZR5u8YIczdI+pln8ckSVNYAxAFrHZxS8QZB2VpuWmlXvpJejJ7WlOt3Xfx+BW1&#xa;YJ+Bxtj7tFPrkotyZcesW9hHOVJZwE8TD+nxzaG5+XPkTazKcxzC4NDGr9/KwH11YDcR7XWCeS&#xa;3rf5+xAzQTrtpiYKeYqtslC8mVyo3HYoI1Zyn3+QxUmSBVe3xDjMWLDB5jfpGbbVto5b+erj3t&#xa;wO3pdy6LQG9TgpbEyZRBsQ2QvRPR37EspxJDZcXcIMangKZ6vZJtVPuivhP1V3FGQ3diiLciee&#xa;rM910tdsh+fmP1/nHMhcyGe9VT44V/yH2HiHw2r7h0EqcPM76UB/8lA2JoX5wV9s4q737EjL+A&#xa;oPmkK1Dexws3ANYtxO6DMLf5N3OgUdbUBmR7KErnpcoVnmvWznMD1WqxRul9TuvZCCrqtdSW8F&#xa;zeZi2RZnvqGmhJs15coYOkFbmHtEEj5fgxV0WfjFzUBzvCvmKwZo3ZtEgP162BSpsti8ziY+9Q&#xa;/rBFT6lq2rdmSMT5nJfmNIGwE1ZmW6Ozr36Yd9gs7Erirl+rKlf4wB551igL1Ga5I8M0G0pVN+&#xa;c2b2k7pDui+NUv6ki43dCreBZF76dXU7BoEeVxu4QneEIoYg0QJz0ICJBfjC9KBYMqGHvQylwK&#xa;xLfW55w4Ykm7xQUFyCMGm7CsRGAlv3VdBm0dvbDlaogKFnEbDEZWnGPJeWwMoTjpDMKJ/jfa3j&#xa;FIs3Br06xkJd60bdustG3brrRt237Ttm3btp2VZs3BNzPdJ6J7YiL6i9h/9v8d61rPtZ59r3Mc&#xa;zKt0Mbl01Ms8DWrGusCdAXdYrhtzjr5aj/QsxXS0iL6/lhVGS53FyEjy4K2VVGkDfQVtHaJ0po&#xa;cXRJ4z4fPZkEY4XZ5J/MvveKUf0MVOsClEbKi9EY3KAZxfwujht1BVIzVBf2OKH7NH/tGvC/21&#xa;LVPtWveDPQ2TeMITwv0LgeENO/36AwMMNmsscCxaqoYvQ2p34Jhook+d4/46L/cY4tErZMfQ+1&#xa;ZVbgCBWKxJocUPsMFw9PP73+Fn/ll+1f+gwud/CxU4/osKqtbqOKr/XKEJkCkhCxavbqZbRhUS&#xa;yhIiUAmglgVJiLcKUpFig0/KMmGcmsuAbur5OkO457HV9W/w9m6wfivUyeVhEUEWUmfStMZ/yW&#xa;285Tu9cjq59fP9wutj9DVoy6V32tSr45Qvlh3cyzTWiuLejT6uvIRY3tds7LPG8ag22lCNipMy&#xa;AOiSTbJy5BZRVyhKFXfjQQuGEi1SF7M60laq8hxr/3POsOpuFYqzRbwnNF0YAuy8uZrMhR0sJx&#xa;mTtCg8zEI0OYszV1uGWyZxcTNNSR2FRGCgikcyCx+yEXdxptNVtPVaocwERMgoP3dpEPFvsyqx&#xa;bTJBUuVRBL+xgnn1zXHX4HQ4RRnmQ0eQN6FjcRuT3RQtS5GV8ngvNKhEepLytW1lB+cJxVzZNs&#xa;hf8yhx6p6lIgnEBcqJmAbbRxIdJbtkGbI+9FrJ7OdMZamGaTdCmv5zyvBojwrY7+Ic9SomRZUR&#xa;pJEABRssNh4mAsZpRJlC/CbGHYHoGkacg27h2WmKPEVEN0SIxxUhd7JjO20v7FA14pS1+2mqtU&#xa;m8kyDGCy0Zyq6IONteeSMzK9tPppPKFIw6eDcZOGmZ2nOz5Xtgb8ikqbBKlYQciiUHlYK7l25D&#xa;vX5ShaYzzIZF0lazBy7XonxVCLhXT6kKbsVK/oL61S8/hADB9XrxK98AcMi80x/8U6ewYk+XdG&#xa;jES4hoiTzr4r2KSAorGvY4L9ryqYHfyx8SL2UiQ/QUn8ExKunxLJsnHXlfTjlipDly0xLGjoTu&#xa;gn9yDmeRVs6oxrqEt7iTo8f7B9epRoeioxeDkDNGu2igIk17g57zBqO8kHXooD2Jr4hS7ELDJQ&#xa;f5hv+y5DQJ4X5uIJcJ+BuE1duhsLSGDSar3nUmJE3JAAXzjXHE/pT0Aq1hxoWwh+Id1bsp75A5&#xa;zM2BsOCDU2iumZRLv3pw9chcged5h+Mn9IiiDUUoGTZRZjjpiD3TDmm6MBKLMyut5GugmdN8U8&#xa;MFtnpdqCoWGibg9JtlKrPmHE8vm71SzHCiQcZq1iW0B7Ku6twdPY6th36JIaCHpaHSZVNNusuB&#xa;800EjbNsoq5+Pr6to4I39R4quU4hU4kMskqyXVOFTle3/A7CAXjH3NHfuNyMZvdG8688s7yV7W&#xa;sq4SmbgaITmiwIqyFN7JPUydzNs8KDEAv0VmLMhOGlH8T8BWBIHZMF1RKFzNeLYUE1+vOb4IFH&#xa;IMFu81mypGGudxvKbtl+sqt84Lphi+66U+6e3EEcFvK8OcWlP34tajwDS85019yQlz4VHj8l/m&#xa;AMga4ZaTdh2oN4ncMfNCKsBUTR73E8bkm9IJrpjPkSMAs+DwgTjckE2pLcAD0eUfMio9ChDeOv&#xa;fvVW9uwKGOGoFwTkzaWuDcdUm7dlSPYIhGlsD1cXTzltydgZKwkQL9CLRSPMCbuB7Mj9nK0/Tf&#xa;e4+GM7+MGWBNWlb4FB0NaZbGjl5NcapUT0o0jk0Zs1a5MjH/IBjr4tpCCpgOArdAv3/sMd4SWt&#xa;IGAIHt/m7eSx/GW69s393jz9DTbHeVvsW94x3SvgjH6p/RevDvEqqIPsZ3RD2BwkXiWfED9ReL&#xa;bIOaUTTWOYuDTqxwl8z+egqB2wV/aFsMflkmyfBwlvg2p296MD2p3oL+w/K+ePGTnNefAfP9Rg&#xa;/jsqJ+f/eRdPftrl0X5bs6u7c5Tn5/cFJgDma6Sxy9vXuA4GfzpvttngPtCcY5dEUB1xyiw5eI&#xa;znmhiHN4RiyZPl9EoOEQ1s2K2/Bh7ONxk+iWd1o0CIAp5aFglk4/f8EybFfOgpzNtPCONujtHd&#xa;JBwcZQrSDW/ANyt/IYW+LXKWEoqcwHKO1RHj8tgAsHKVc3zCIrqKXaklgyKZQ42Ew5OAa68azw&#xa;+obm0pe9qY1FYNNfuZESdNCdMtWlRZRMg0mATyxZKNltrzTHqJ6gcOC3M7U32eWFItmannduZr&#xa;en3ToMkDesuuLFPl56d2jQlybhn0u+eckP3LmDW/VNY4CD7A780j+LmpJTinhFMif5ywVGUnyD&#xa;dvY1MrVhOHe7FOCXlQSe5OIjr/nKIdHFn7S00pVMFrd6pz06QFzik6ni/PNqOAjuHalRdsvoAO&#xa;ZKzqUV7rjO3UyW7WKuI3JRX5WlGwkogzflbWihxo7sZWMyiOPIayTgfTFUEzLJPL1CxkmE7SPV&#xa;JZsE+83mIz8WVb8vqsjCxLI0S/iFB1g+gNhASVi2erEtXEwq6PNWwhvDq+4RudsR/9VWMY5Nai&#xa;iAkdHpJpo9e/oSCAiaZoqSAfArvyxW6jXo/Gg4l9c2StPsDEckPpyJMkFlqnXJckKL0WhDW4Ty&#xa;fuKOY5oir8ym7cGqlrATzo9umZbFncqkO9Kg4GYJ3j3sowqYR4jfLcsiS8VLtLDAdZoBCCDyvR&#xa;piLXUwJAkg7gFR8bqtlohTPKrumx0Qt0O0wo4kzjG6QRY8IcriRYv48wUXEfkz8GUlDunoZYH/&#xa;PVhws5hxilm945jV0gKJQNH7DxR1FAq9pC18sQhy0Yg8253VBJKeULazyVrbXdI1ubWQhMsDmV&#xa;qBPPXlDjrMFQtg/26s5kM13EY2Qqyf4IyIo6VXSRMzlI0GGfQmZEuq5TvTxbLBr0o++bQV1WRz&#xa;ThpmEvYKJGkKJWWiHDlzIxGz4O44iM42KXtk+6yFTqy034ZwD2KYXLy37wnJK6Qx2JR5QZTsLt&#xa;Y1mlCElhsQeXClp0+KY6aoswhZKjxp/GBGKwHTGSEnMJLr7fqNJwcpXvd4mgR+tEn6urZA9UAm&#xa;Bv/dsDF6lnDMJCT++67q7hsOlDrFStvKXveujs5BAK2dz8DruiXqTGq1+ofkLv88UcHO+DIslA&#xa;J4kdkiYGxlnYFNmUDmIW+fKHNVLzjXiEDrdi8diMd2SVPq9x0awfcLLDNchjpcoorRh24o/Wg8&#xa;+Gv6vfYQVRV/7KYnt/O8q44KnYd/IGHhD3ZINvBat4Vx+A0s+3/U79jes5RW7TATeKujoJUq/g&#xa;zrR4gNfez3fzirpcufarhNeufshHkrv8C/KKtNmIRrco9jHXvD44EQO8P9JAVEBnWiCE+uTnL/&#xa;koadnvEshCUDqSHqmp4ifmL8/gm1pkT7XT+nwqzPLK3tiQyszIyiiSe/26so7XPTSH7n1tLRIT&#xa;UA3/4Tb5La8m7cBiZ3LXl0V6QrcBdyTFNEnhgaHfpBTch6QZFrOFz7iPlWU8CHRxy6eKjlhZl0&#xa;8Wxt09JfU3kCs/7cGyQMtWOVDKy5n+sKDH7IFIJknje/0Jh9MfCfXsztHgJpdyQbbcbVKy0dgq&#xa;ZM6kPr+NqLeQ2zPEmnZrUifLzvkzWUew+SVxcU5VNEGVmP57cPGcqEiSlVW/tM9AhVno3yHG4D&#xa;9LJspzdUTjExeuJ6ufjtXExO7S8duCFUjjKMJqCxjU3GAbIdjiAnLX2B6XY/aogEo62KxsPhAP&#xa;Z1TJaYn77K5w4jVjFsL2IxrUez6BHm1/kqVCQlP8OmTNkr5ZRB7LfKtoCmrn80pcGrc4zmcXNu&#xa;hf8BJ3qF4+wvkqIs2iaq3KqxT/SPrtu3UtiSV0eaOUej4KHHHr4Tyvn1cvmeufasPrDyf0MoWt&#xa;IHV9Y0A3bQfmjmbZcjiUhInsAssosQjcsYVeEc194GgkggTkKZTzAKN2B0IIwMdlF++H0iUdmd&#xa;2oP2g3XpoYML6InPnJzH8Kp8LTfr9//msHM7f8dAvHf5uJ5/pPE4+JKdaXD/VvEy+mY186nJ+K&#xa;XMcWLrpRMnhEBoBjcTYL1LJ+mX6+Pbsto5vz7PhUmT0nWF782AEkmD4KJDmZedzu3Pq6+TzM9v&#xa;Z+geQj8DNnT8zYr+K5cc6a2E4ehJrzoJD35lCqnEZ1jI5eEdfaokZHXqvh+aqBGFvQ8LR023Mo&#xa;z1c7kl/eUoYzP67JcRnHH0TrubAEJCs38zrFmtc4RvGA61RZLjFdaZl/lNUO1J1yHaGyxr8hBg&#xa;LCkto1fQRfJHWzcouPH8qnpbFVWJmWzoVyAMcr7445aW2DdEF55haybbk3GWItBZ03daoNWAvt&#xa;Cn/dy4XGSmxNrRqKalFhghkzTQ1aMS8Y0lPP4RgBwXMATWjzlEyDtQxKJ4ZKdWqPxcOg2ELltl&#xa;gKZeX9rcA1HNLbRG8z1YSDOpxrauK1wX+JeJT/R8QLOJH8S8SbyaTtO/9bxLf/jyJ+nVNY+X8S&#xa;8YM3c/ZUnEOIxRaKGWTC0vtQidTwJMNzndVnVGfkvcPMgxnVEAxT3gyx7MCfWKHhkqQ44RW00n&#xa;A/50kdnQIjdYt4GGgckltMQ5icE/mtfWpsIwa2LST7LQl4Fey0MQD6soOa2coOkOBzLwUaR3Cj&#xa;2S/0209t8Zi0Fw/J3BAYWK7hMPqD9TxNRIOa1u5wtZWYffmh6E2REwUjknbN26g6ZnNqvx6zno&#xa;wck5LKq19qQyvdhYfR/kvEzzGwOxaQlg//vnwYTJXQZ6XaaOQyrLqd9rG2iC+X2aH3mOXWGtR2&#xa;127zylFy7i8bowIaAlZFvn8zNlEAwpRfqi5fhQhsSUtXCE9/jTZNOAo0cXrP6LmvWMGlF0FCBR&#xa;meyfNRkM9Wepe76TXhaatb9vhA3Fq3RbiBvyBY0NoSaPU/hnocldIvqTPFRVID5qbWPgIpaSgr&#xa;0wWlBlF30LbMLE2CVUtFqqDWuRxEXpm4W77mrYx7Eix8RJwmEB9RAGGJRPg2jkkNrYaSgikziY&#xa;nX0edOrJh2g8r1/jyAjzzo2HUl5/C0mjXVSvd1Bxur8TisDnb/mPVcBofRvYeCAzTvgfyJd1fd&#xa;7imOf3CrLFT+PiPy49VbeG+l+EAa7eUODW6kilfrkCvLiAXIU8Knu394IHRzLBMVp3pa0o5SVe&#xa;bReYH5GUnVyqB9YEAoY9WG1SkxzSFjeiXxvCWKQcYgBtaLX78Szhnkr6YqA+jg75MbOuZpRkWz&#xa;QBlvNsTQ7QW24oQnos+1B8Y61Tu7zTI/P+dWXlZJY/j298x0ZCEcS/6h0100AT3r8+0ijsXwvB&#xa;gA2UCRr11QFuGDPlTU+kUJB43C5YmRMy/4/4p46PMbfQfaSNEWCS8kS6CuUdMqbdMiRUbdHd6v&#xa;1cVfYvQKH4RYhC9zuhasKI70Ak/33iOZJqUQ7oGLFWaZj8El5GzryHJ2K8o+3SuYckD+OR6kMz&#xa;xJhn0h3j8o2As0bU2vUMLtN6UWSJU07k7ML5jC29KYaPFGNotbMD9cF3X9ORL3kZ4x38IWFiGj&#xa;V0W09v8a0aTHdyZzY+P322VF0+cXHUa8Vn9W/HCxJ7QXUAPVjOx94YEhGZL3AzVmxpdkKGzCDF&#xa;8UlyP0Ze6T5hP6/n1VdIn8LxFPdUDzan8EbUYuuUxcg2o0Km7hD8sgwCkDRUzuwOzixvQC/kI+&#xa;/sKQev+Uh9we+/1yjj/8wrwIgw91Oyfh8C04sj5L/PUN9s/C/D7Iscn4/yni8f7Xhfnfpbea29&#xa;JAe3ieRT7xqaprKDY355XMIRs8aa3hWFjyaq39kMT1AIwY5VCBMfLJhmYskWQcHliMS0cnfssD&#xa;nEOXUoYpphK/2lOKbcmmo7O1DPDtvg1KFZKXArJ0yjdcjY0E345mrRu7mrm6urqZFY/qd79U/l&#xa;CovhLR2GK0GDnUZVqssgkXIzbTJ8bexGFG4AJBckQAFwNL2RcwyW9w+gty4RQIBzQgRI+JxU+9&#xa;5hHlWr8UGMsaKBFaIC673py9trO9shK0b5U170QStL5vbWJ3e2ppbml1JTLJqNdgRRfXWFnq7A&#xa;YCx29vbX9fWJ3bXG2vLy3Prc/PL80tt//s7yltTBpbPuixIM2lrBHSIG1HgEAOSuERAosx07eg&#xa;RCSHbh++FyFEurCG+nlwvyLhh9q/iB4Dp/IsGnRiYECqZzlNY/YcJlmuwKqUUVB8P7OjdzC34+&#xa;//gdgQNiUi4JwEt7lAt5B7lc/04OmFAiRazIMCwC226UIVW9J1d/c0u3QjOS1FN4OHhk1LPL03&#xa;u1z6uOCwL6m+rSQisYcQA4fQgz8TlWXVOjD61ZQ61MHAUjv64CcR0dER0iNCBTivEMimrus1/A&#xa;G3NFS/GB5YxYmrJE0J5kcjepi57AshJ4FjEDBVhKlJgdok0E590VyGaFjGrIj4TDwf4ztk1cW2&#xa;pYhIcUacixDmfVZwKmMz5HZk2G0m40EKv7Kkvns0LDjrD+0HTCKv+/vsA49TSdrejcwIDVtCDq&#xa;CDWaRnJg0w1lkToUJoMqJZy/2lMNyBUkEeSj3yYLKpK0RnNqy99jHP42xsUlLmGqpwVvmp1Y2C&#xa;Qbxj5vRP7Bty/ns+wq6uA2bBuHY7luQzkaJh0xqB6DYuJcN8zZJB1XW2+DYB19hTaUlEq00UkM&#xa;JVPpuAzUzvBXZUQv0pPCz4RCLlHFZKfp8erylfFjOxd4lJNdd6Mvo1iE6P3DEBIsWqdsgcpajG&#xa;sUWzeM0tHl213/qc2AQRGcty+b+6yAaDWZpMluwKt37o0t8NckHhnAxRF7LxALNOHejfniW2bG&#xa;Izfpb+vpIEHoU5Ssn2g6D0O1CiygAq7PliwrMiHkkcHDVfpmoyH6tbMmJXnJX8iNEjAeEZLwMh&#xa;V+sgwZHrOgztSe5OI+9gPieQFI/zIsL3MxoWBnmcEs+WBkK9sIGM+QE4zq5liB5KjKgIVwhZgh&#xa;tECf/4tmVsweHoEx8Ng/EaJeVx8UueJRhltNTZM78CEuwLojY6jAIkuvixCwszZ7QoRM7Q1whi&#xa;QqcFjrLHvs+GWbK9is4YcZ0FUY2uIth3hOeB+wJTV+HkmfCx4BJ5bE4PYEZsoIU2/cJTEzN9/Y&#xa;RRAUkBUrEzM/kDm+d2k87NnPuOjgEXFRWR1Gg12SXOG1pYd3IYOiDqTKs2kPSQD5gWgBMWjT7C&#xa;MEH6oBDAFpT0MFXCCYIlRSgkQbL2nXCRWH4QesAM63mujuQ1t1kxy5hxvHyU3Cn+dDnpoSsnqL&#xa;jHqH5c3bdLyxMq0XjOtdMAHH1bwovJBlyDcE0NCt/0y0iPc79aWhuHnWO/+d7JYnLXCnTr1DrI&#xa;UAOuU//p3gNU54kr/PQT5xto7bitzaUoAJ2F0sBgbnr4oziPnF2mcGrCt2NR4sm9WPJUkoyA+n&#xa;tonxGvW7+EzpCr9c4G7ibx25ODRWvAgCrIFACDRVuaX+gVb5eGJjyvyFIzAN6KrngZa59/W2By&#xa;qd7uAhGUAlCTtStgZ+eyVYfrIRf1yYGeMVCY2pOBrJR3cljh2nfA4O23c9A6XOXZ16Z3R54xJF&#xa;thpDRUkFq05jQXtxb+Pcjl9cxefvfL7omR0lhhpm8yP1CQDAwG7RdLFSieCoYs9bJc5Bz5X354&#xa;PtB7EfXkWfrgjfbsUyzdQ4o75ZbLWY0oK0g+SGusKuO63Ofbo7qSqI8pQw+B71Qva8wl5rW+/N&#xa;iAcH525rUhA5YgOkAL85pr5kiNw8Cuzp3bDnYpW88K9F/n/t69h6ohV0geTFZGiyMaVuRwPDsE&#xa;UbEzag+0lnpZvcMecshpgKujgPCK2rwcDa58XKKeeaPW6rkNaZI4ixkwqahwglkbs4l5bVggmN&#xa;cWsIHlzHhmYo8e1Ih1ZbhnPjcs8HqiB7kNmDGdGzQgCHrA7ArpfwPQG8xN7glBgkB+YD0yQTEz&#xa;Yj2yYBowjhEO7f0IisIMxgIwhTOGM2PyTatu7g010+u4bWg3zUSw0VelmHGOCWzxOkBCQ5I4Py&#xa;NAHpQHTNefzWk634mcMWvJ4NEBDeai74jSd1jyPDferpApSLapVW4Zf1I6Y7JpfwYBv8HFi4aS&#xa;lFjEjFaJk1unfeKUNcKGuKyXjErHhcz9/LIZpDjCVoZR4ckihRPmz0TNHJ6a/Bf/lHFtIzqLTq&#xa;OzXCd3aYWFDsrJ4TiVSjsY4Tg6LwhSmZawnnVhBSLyToZ03tsEv3OF2Xz3W8iA29CpRaF8eTNE&#xa;DCr88f2qGl4QHHSyr4XtrMviBJ9+ZSx2EsyYtvXttiTN0pJmabJaC/pwR8kTvyFbDSNe7reoY1&#xa;lgRDYmIJaGkN5RGfrl1MKlmvRwD7pSlMbLjIzJXNrjrtFVxoCIk19FY75QPTa9VroyNV1K+dct&#xa;nNYbJg5k3NilhJA1CYMeP53KkOtjGoum0FTI3Z/OCSlwggGNeXmlVCRfLTFGGNMhAK+w6ekNjZ&#xa;SOjWHyzIqF9NId0Zg28SZdR0NCEm7hTZl51ZyAAp+YX7aCmiCGPc8qbaG9l8TSHZPBYX/4VW3c&#xa;nTlnQBqYykM5O3dg9h6cljzFyPMMQre9rsva2yo/eaR8JOd9ermT9fsIavFOynuVtwtmVzbtQe&#xa;D9+JPb8tUG3xFOb5K2VriMR1d2OORb7+QP3z2oOi4/KqYdGYGQhsIWx5NLFaMtb7V6Mf9GXvrU&#xa;A9snoW+4z8kgNq0/Lr1Pso6bsr4G75TlK4ivp/IdypBHorx2ctxY4dVa58Lp2HX27h6FrvuvHQ&#xa;EM1XSt5wk6GaxXejj+kLyTnlkLhR9RmlvT8D+u4mo/v62xaRNlR8/+oHxsq/O+QQH7tfOzVN9A&#xa;2yeTd6jSmiAJjgWk+xkSR+6RtGoOLg4kWJEuKLRNxgNDR4eDiJX+JGQVATdd6wSLUossaNYJ1/&#xa;P3f7lzKOdJFMoV1YSUr5teXCknoWLvRFF4vIJfPxzZR5ISf1YR14XqH6ssxb489NRRwkO4s11H&#xa;s3pLVHywYSs2VKak/SX6hGzllSFtAi/YV7Rzj5bhcFnZHEQlNSmdwPZVZv5Qy/SRmek6+CSng8&#xa;H2DcsjuHpV2Yj+EE4Q4HSGtqwmj8L21f/jyR1j92dJW4U2j7mUd/VZzcko+/6mpH2uRK7sFTdl&#xa;SmA3PzI5kZbUUlCpK8ExuP9EgVYOnJ9INUx0rehg1sI1ouyJsvKAweIrEKiI5icaCR8TjALcvz&#xa;NE8wvakxHJGpz/AfeGt56wtCU3zI+Ihie6feAB+3cocHxV5ZMlYYgLXvkeAhk98m5E+V7UaBED&#xa;Lkz0+Dexi2zPa7OYyufPdWC5g3lSb2VpdXlrcXN9fbnwsJ+k+R9pV4ZFU8kB7YL6ObJ5CWJEdK&#xa;L0yFpEa+sK6h6pKBQoSGW9bTRVtPiK959gyfSUkVVsIoPz6RVr62kmTFHbMrwvI8gm92dEqoqm&#xa;VvMiU6ZBk9x/kq5URZOuWsLCfoJVNPg7pv2DroxELsqO4/SD+wltFW2WoayODDmBwJ6iGyl83T&#xa;nvhTDiLoxiphTRJuT7BCJVKsIdnyCgfTy6jGpq3W5GxAoUAdOB7j9eEt6Fs8nLYUxfPDI+IYEl&#xa;JqHSFiWr5kxyR9GF2HxBswvl+dkBe16HMtkTGYuB6B4806iB1NY6E1bF4IbntOa1yvdtycxtes&#xa;pqlDSaHAzqbg8oadn2yzjfqsLlShWNkg1xOi1xbLQneYhmvWmJ/EdHMtaO1GxXCfMaPyHcMxsE&#xa;NW+VrFK4g4+TgvEUBTcsnjnExYn7yb9FJ8sRG9EW011EUBKJUy5ossZHRZwR436eOau3LFCV2y&#xa;i2tCfL2qO9ZfFGbdsqZp7uCNAOyTfpAiSWWxSGrjCxNn6PVKGn8XMjX7JkCRuiqAWCum7QavbV&#xa;dlGbPICR/KUfjHv//Agvs1bz4TvcIvN+Q3J1gBJ9xfYlIPcm+/styJlVSx4AC+563zx+K0066k&#xa;/mLwW2bEfmO/WUbw6AGTU09bKbQR+w5u1+EbA0dLtJUqlpxXGtScN6ttv0MSAIu/AM298raQ4t&#xa;3NRLSskzhdPMy1u+5gJxeZIbHH+KCW3s3OoeV3dFdqVUqMWmbmXHtnpJ86CWIuEfihgPA0Jnvr&#xa;WnSfFIkqlkvrKlvq/4ozzPHyFpGWQVuyZvXH0qKbODdD4/xQpq81Dt7ru0fnTdwOed2lnwQpvT&#xa;MIJ848eVegOec4+c/3JuF0jW0wh0cWsaIVFLjHmQxk5+KMGYKNqCaGrsV+rAjNJItiXZo0U1La&#xa;89jBNbb0WO+vRzXs22usUN7iHZ70L/jA1khxcWJ7rEHJoYJfIFh+m6CTYF4IZFxfkv+gKuWkjm&#xa;zl0IyJcZgLfVj90xPdI+pjeTwRtG1KylSopZ/jSeW7eYQW6yz/eOpGj5aFyQ88ltbrOkN1bIDn&#xa;A+qwtueD63HmAHDdFVyW1VdrUf3azfPo/du8jk/qtfIHmnpN7plRk2cWip1+2PSC1tlPXXaIYf&#xa;ZCY+PLQUt3SB7NhOv/ahNQLkNEQv7+eLWNo8LYeopTp/Z9wACEhS+OR2KbyPKfaShMqh2xS5h0&#xa;qDlVocXq/AvWMzR/ZWkuw78dbWO+t3EiyRWj239Uld3eZeiiVTz1n4bpx2qSIP7eO20POq3eZy&#xa;OSGzum5QWO2ie+6njOVL4lxOeI41KKgKzZTMOld9ag2OviPTYeheFfXuPkwOv8ZHjgpWTU7NWa&#xa;TZ+LOW1g9c+OMtH4NYYlyPO48sMKhYGZKEKrtvwqoyJP9S4YT9XrJ4w47LSqtNWGLpugmTJ8vI&#xa;49dPnJptcknejPYQSsAVllU+g1LBhgc2VxFAbNeVLsfJjE6E6L2QmHyJn3vRbhPlxsPfy05u5i&#xa;Uv/46ifnt2C/8ul/TUzK95hxgBvfiumdXY+/ZNfLWs8NjmzyfiL7rNkIHNIfVJlVj/Snw6LVmq&#xa;5xsdA64QKFZuObWL1XyMHt49/NwbXUrbtD0ao+uevvwOmR277/CTRPYT3a01T3rHIdaFqp0PIN&#xa;OOFXT9EuIU+7jHLHuyG/TpXf3yMvrz8/2bs11F7yWvbP/NecZcW+ZaUu+pA5gUzI+yr3/mFdDT&#xa;u/BC7MMgC99ENl798HZrdPs1yPzdK3K9aykum5uwans0r3LLBUqP7w3AFdPz6UmQ130jvTVtiA&#xa;+yK8bHeXn3utJ78fMOtTuCJvftqDKpXf2KZHhRJZZ8Zjz2i3DMvhmUNHKAcvZyGTpyrdI3oRWy&#xa;UvAGt1mMriw0xm2MEd0eTR79zvt8hEE+NNL8R1/v5KaKd/oQDpGR7VJfnw7t6D1ykNx6kS6tKg&#xa;TrkZ4VwBd1e5YufmRJX2n8nQxZxcAI0+aBxDa5zAIgOW6CCJ23RZUotSWuGOYr9FcAmWTDpM1Q&#xa;fVUizrtpl1bK7VzS8ORHojPmCwGklnLVxopuNRm5vuia0Rpz0WQ4owWxYKKycCb1Xyy6HQgV1m&#xa;1SZp8MhTxNxhwvNWcX1xAlyT4Z4Ul7jzAX2nfgXGpYvTkYTsS5PCLS8Tjul8fqpDoeEReG47Vn&#xa;mx9OX42JYhWmaYdYy3dcOWMwNOh459pfK+tgB2r0Dmj0N9BouJqardNobFKTl5ntST9461Do4K&#xa;1KoxhXV9nFJ0BookB730xbty9ojGut1H++T2nVmNBxMPeTQ2btpqeigptSya9b2bDd8QS0giBW&#xa;GV+1TdwHHkK85vQxKH9BjEpHV+efu8I/LGclgVR6okDIjvurhspPX7y1hUi5Wih3OtCk4N5VPT&#xa;hsiZGhIXBe2vOknFApmvLd5C+AHkt2geHUITna4Pyoj9hA36APU6/LkOq4tuQMxY065UqlKjYa&#xa;MhpNeWVjKui7L2AzklxRm0ImSTXFC9kcChdC6vsFWEblTVO6OwnAOfNCn6jL7gFTiOWYf0FUoR&#xa;RVKH81rEYOepo4VijcgmyeALdRyPX3PKZak9glP/ZYq/oEa1lTG1DTRmFd3wHhsZ0ViLoms2i+&#xa;DdR9nswf+IZS2dAPaY4l1rgt88cefVO4DO+DHDVFxdWHwDnfPGqDZuexC6KLPTWoPGSzmNgA4W&#xa;m080ePXNDK4b5yZBfMeqB05iQIlkMbC93MF8bzn9EZQrdpZo6TDvYB0eIcKiJ0B3V7WRueoX3g&#xa;uRl8xs+KzWmiwIrdz3XgfQGxOa2SRE75uNZ3mCe/xR1tjT4MYaYcaQou4sJCFWaBtOf/OaxycZ&#xa;if/ghVYHnu4O9I8vPvzpRnstMSt7opp0Vr1CeNrp2t1D8fumdtx5/2c4mT++2vHtlJw1xRQ/bv&#xa;MhjQtdVSklWJyE7XnxR80jNaBYYVbLkonFdqdiDLLLERh24HFtrrJPGD1YevLbktnfZNV+B6I1&#xa;MBqN2sw3sAhSFSdOX09vpTwzqC2+dHBSspSapW0p86seoaYFupQ7TyWPPe6xe9zM1/IKs7X6UR&#xa;x33DSqs+SfVsw0izrJUgqQmJzQolG5Je8bUjqWmavUuZvXrxiqZsfPtaxmaa0rFMrrfdMXxJU2&#xa;KaU7ZDCGhQJsd6OX152YoGMkcqHHgTf8Vy3JBDc2yH5D05n+7TqfymQXma1TaWrNROyqA7I41t&#xa;dkwUM3bXVrreVPZwy4wZuYs1+ZumNICROL5+Bj+LuZNx5IexkwP0unKt9MKVNzv7lkp887FnFX&#xa;4BG7/5yTLx7an0HPQas7R1ZXTI/Us0xPh1jLS/sLx9fNzcI3Lk7t7kLwrWG3/G1Tc77pRJ5i05&#xa;xUt39KBfPO63cLTJGX5qktM9bP5VS0y81ZItrMdWlvNnwu6h3er9aDC38ycVMDiWn8JZY1QfuU&#xa;NkVB/FszK2l+yRHc9P/kwJ76/E2XbiHytJj5iiLjUlPQqqXRKq3crDh+Cd0kN9qG790V7kd/8P&#xa;0ECCxXsyIYLV+9tgPuAhP7RPgp2EkJvEO4Pk+yH3d9Yc9DoH+ceI6a7kultt7F8i5zwRBInHfB&#xa;GE81d9IQTpx/Dsh0LuHrEzJqpnno7A4NzEh/eamjWoX9U0tLc/Ow5IH4WpnrGonjV1x8kfs2um&#xa;SB5JdDPkzzAcG3pRFz9Siv42F/2NqTlCfO+uoSV9/Kk7D/2lqP4H+ktSHR3FU0/pW1MdIOSXYO&#xa;YhWPGm3i7EIFXYU0QjDd1dRRMS/F1IIxqsl3Dyt7ZM8YLoSggrTCEoEb4/pwGUyUcKAG48ARcM&#xa;QnmFgZ4/pp/uX+BtCAZzG4JE2YOhlo+4e1Cq/fknmIgyGiM1v003PZDYyRAWZnodEzVbezBVYz&#xa;AVxkuhjg4gdN9SBxWyNUCKagObpdBlO1+LqgbM10oPObCS/jIyxIysCTGl7EMvAWporIUe6E/i&#xa;Fg9wox5qPTFP8h6n6ulJy4Wo1jZdqKa2V9B58E3quKDrdou2zhdsmszbmnG3C+t+ztlez6keRK&#xa;TaMehqimJs2822KfECq26A0vYyVM0ttH8ldwv0KVppk7ciCDww0ZF5gcn8AmCu/KA3DsVGL8FK&#xa;K8LCNOcaL1vVVSm4KqY5DTsHdRvcX9ukFd/um8EN5aVXwQ0+MusOvbw0fUAbpFbq3UIYzr//mj&#xa;hypv3wjEX/8UOE+X8U287/IbaJ/yexLW9i4vTvYeN/JrV9uKGIon6T2647dwpoSKGBQNDFl4TM&#xa;/VkK1IJJnmsSVaqks1q3Iz836sBhzwLtQSPY+4gIJO5B1A9T7lMOxCXgH+f6JvtGu8jZtpXcUJ&#xa;D2cnRzPZnx8Xa65fhY5e/9hMzH4meitSU4adepnfZoosiYesL6tP/Kz6139MjikDYAwC62mMbg&#xa;x5ixsuDZvqiRqjCyarpyV2hL8lUdOynqT85kxTINFOJtHbWc3B0dxVKHvqHQr3huAC6cX5ADAc&#xa;tJTIzBF06xJ5ieXmKTx0ZmE0bhQ5PvJ+WAVbxB5sKkjmrAwh6h5pmVuQEYwKkFu2R/a7aOG5e/&#xa;LMZKT++X8E9L88vHjFC+UIgny5sm6wyZAXv3LFtrVHfpNkO/N0LvH84Lswm+zkbGlYEQCqbgdQ&#xa;r93sEmKkZIwsUsNkeYN9GzzojJw12CNLf2PGbImCUz0B3n/cxLABinHZrjzKZgt1BVU0dbyla/&#xa;axkqW/4L+3p0Fqr45JIHOuQbUu9xoG0R9Gak/aB/4LEG0SH9VrUB/Ymqcs8TICpJTA5n4s4ksE&#xa;DeyrUhiifTSwJGzeO9EvoMBwmawNJO2oLwZ6EW+ayXEsBlX8NhrQeZaDOcHAupytAilyoo2A5H&#xa;05w4rqUo1SU4jjKlxC7GhC3LTXtmRtiDjuXyPT84a57YGG9FXUFZEIpcxN9wmg4tPJgOID3kHF&#xa;Z57nG2N6O3OeG4yVWxx0db2d9tgXYP033QbLuDreoaY+dk1e2DSr48fqJ5zLR3mOkWLcNqd4QL&#xa;+iTYFNHVopxwYYdlm4FHuliKetUnh7RNHyATgpgipALNJA4lGZ6PuAwACYpsZddZmVOiRfn1iI&#xa;iUZDEZLA2XtCySIrYZiWXtGCEAK9tMsW8Ymn9m9/thADlvhx0ibk8Ry+fMPJ2mrXBM03i9h/pW&#xa;r9+Xl/zOW0cQDnUeMwiwv46cAR4jmAG1XNhvu285zz6Vi4V2JjGBCfoCwGg2we42MtRAhEk4Na&#xa;TDYRnOUAhCIZipXJUet9dUxDyizqxTmuHLPWCnKCHmx4oOd5Yd8KzMdXhT7xfkpYL/g+ji0q1e&#xa;R4bKs0a74eOXcBxsjGO2YXpEDdM6DU0sX2xpRcIbPiiCQqLFbmpyFiJUQWeeZKj8Sv5ju4pq26&#xa;e6gP448f0+MOEuOxAXN2EM1plqq8MSmkEWiH2LO0lOfxOTZoo7SCOCyiJAv8/GTTMg0Q99leKA&#xa;W0vjjj0bzrhroqFSY6V7+Bt22w1KfzrIert61+F2/8sq8g6sw8c5ATrh74R9hkmJqUw2u6nUwK&#xa;hzBdXkTQmJmj0Mhal34KKz5o7CVYvOMh5v8+RE1nhOiy0S0G+kzjuSidhV/jB8prEAhdR7hrDT&#xa;JW/SMpBKGmsUQaUf41VpRNObDaItUflNbAQru9DKhqJsaNsGid0n0zZculYdSorBLr2Lh595yN&#xa;ZPTE7DQ/u0E3BfMCTzbuJofMzVIQL26CNAWBDYgxrO4D8H7QAU8uZSEI6ILHJ5jyf0yN1pmV9W&#xa;lpzNBLXqJImRVVdwU9wSfY09cnzRS3TAscNIQ41BP4TXQikkY4WZS09f5njiqND5YmJeVu37VZ&#xa;qvNzCxqAADlTeS/XBmCfjS7tsAZc8WUk7qqC+W3BbpnaZLqFzD7lPlRRSAoGKtwIG16I2MhWnQ&#xa;Xi26IS/WqF9Y8xiStr0mSpF7H/47q4ZB5ZK2ZmR8sOHyUF1IYW/IvAt75vDwtTOtIYAD6gbUju&#xa;z2XUHKxOiknNxwD44xzjOfF1a4n3ekC6VOEKjt/d3d+9vFBBfMag83MAE0F7MzGOx+5DKdwQxW&#xa;4mmU4VDgkBNgiAy06vfrCRB9RB2pHHeg6ARcFuA4Ia5LpiB29U6A2rilRPq7j+rHzFtCg20SX4&#xa;i5sCIpcpSLS9ip5RG3b+KNbt3juzUv5kR0sujetGWNoJhFUHg30mzBFL0umfsNP+QkL0et2lfp&#xa;w4nU7C0z6ef0WPo8wfmi7kvXfQ+BJh66HyJszHngWYH8dtEbvPfdeKc3xXzDIvBED3yFovCBrR&#xa;wLFFAiU8+LHa7dl+Enen5C8/7otG6P/J7tMP8MoiH7PGsV/LH8OPSv/LZhCSMgDuSPHxuA/x1q&#xa;GP4XqPmvlFALQ0dnp//IbEtRs/4HdzB9yeFsOnQJbYBaCZUQC0WIWojzjrYW9ey2CUtWUditWZ&#xa;Id6Teh27KW3ftoohBdNGUEv7zp9qgUY9PkHWP5Jw55OjcTWwKUMxfXx2d4ZnlvH/TI/36/fOT9&#xa;2LhnEba2yuaZiZ/2cGRMcwqF860h06Y/Zk0rHWHbdGnwnHecYL+N78PEhm0xlZWjiMrUlCj5RI&#xa;N2Adim6kpcqMXGWZtSYGmsmy6ykbv/Aedolw1vf8OjwVyZymndbDVTSHNMQDRUqHhjvAovnrVI&#xa;ypw1tL8CrG7PrBTXoo5ZGIS3cNacYHtWlHHJ1Wa0Yh6cZ5p49Eh8ACZlZjZdmSXWaYkeSzHXKA&#xa;cngkIt28KwXFcIFYNWGAc3UkHdlLXq05l0fKda2P40kax4drBHCDDlXOE1yM/Ykrph18uJQV2i&#xa;VYVQk0SLYw7ctAkmki5MwpO0N3Fbp+javWQWRZc7IftSOYWGVvU99yYeckkrGK59EW7oLtJjWH&#xa;eT75+y5RDE12WwkuJuUsb7utSvKEJo18uOoPMCDeAKno4WXUNPsvctjEVzJxHLs81O39srPQIU&#xa;6hZb45YVV4QAyRGd+FJ80LbJDgdP0De5TdXIrduWEJ3zc/66Eomt28pkf/RR7uPyc4Bfgq9Y2+&#xa;xSN9mto45aEZ8pderZhrLJrFkIGnYv6w1qOq4l8bTyRr3RPu6Rjic7nmmmaO1mUu6ZztlLkaZ8&#xa;6eYWkTFqpd4GIpILEUHMuf1EQCUJgEoWURBoG71aoxg7UJAUrditcGwxWp3mYUFZw0LbZXqWQT&#xa;FUBONQkrMfEen85redjn1Jr6wgQ27SPe07plqEUQU3rWJjgzVBbT4BmFCNIERlnZbJ/AOg/lit&#xa;JRjAlspV4avPiao90OLyVi3UD4uZyhSM4bNX8YknGKeBiSYqun2UrXbBJipThl0mWGU3j+EaFq&#xa;PKelZmMjLRWeqeu5ldkTLjgaa5f2Nd9CTYfcZGCsFwiIYkkeNYKNraTvlptWTTKZG5qDqGtco+&#xa;FbhaMFDC3k9CyVhlv3VOLAsnla7FCPgwfpk/8i0+vb5ELcfUi2f+fkOWgcD16O8WibnfB5KtRU&#xa;VOIejK6oveOptyUrLYuPtPIM8oulNGwpTMkxnD/KZ0xxMVfKALfWpGXgbzE1/LpSBi06/5hbB7&#xa;ujv48TR0B2bV0XFXFGLoVRXKIs1bctN4lhIcV259ROflD1q1R0w/9gqex2zTYc5p4FEy6tEzSp&#xa;3VbrfZUpbiM1NnioTZzLprJHVKlvCJTM8yplfBE6u2F5UlI/BvZKB5N0u0QSj+Axlk3tLt6cTl&#xa;QykmCeyD/0SGoQTgSG+D8U3Awyh6sx+HyzjFNucFc8exlcqOa6BoA6fVUSWsm/zrz92aU5hdPO&#xa;J2JinNRUGDBbbAY0Fb4BlVVEUBboplTo06dm/p77CzFujFRmBgSYB7wTU7fjdRDcGnwCH6LXXi&#xa;fPToULdII5x79sqQDcm0EGvpM7aALrm1Ib+Mwhdak06IJwpPjWB5/hO2mt5oCzvbznwJOTdyr6&#xa;E81E6+q4p9fuAgy2p9u+wvoUlxa/pGrPmbX2qyj+BsWVxqwpwn9R0X98igrIc/vmDtdEFaObsx&#xa;OsOllblnzBy2xB+/VEDzeIcsMLfPoJ+v4Z6vo2eJq0N9BUn1+sczsjhT5LaGse9bAtPEFlrtqZ&#xa;miFkGVtl6WKkD9nx5R956c7Qk6Ia5DR7kC6z2SKD977SG4fqcIiX4Ra2zLZcL4n7Rhq4+yOLAB&#xa;c4H34Rz8Ug/tdCqd/anVevBz6xdDBHXv4ffrPPZiSwqf7OTmoE7v1Wjpt7By4dvBzwgrC5xRHH&#xa;9L4HzcgGp3rrt4MjFzK24RPp/q3mckIndI9OBQPFCCZUULinnTRbd7C1Dl90+23i9pYV2BfOpd&#xa;BOyrXZRSr4qvUZ5K36WEZMI9UH//dZumEtBc+s8fmDpg/0+R4P/ORlP3cFdRR/u7bZLIIYOPqK&#xa;fBXawy9yNpPDg5AB07H10IlIiIENrAn71nqksSP2cqq8cDDNpK11q0utkupUPVergbREsCu7MN&#xa;rVrtUumluqZZ6+UagZ/f76VHUmKgDyOYwfyG58XmJXuX57SH4vtjjuSH2sEuKFuMjxr96rmW2l&#xa;esCXPraAu8uttpo+RiI/aHzOqkC8WCHP2tViUrVECF3qoDPNxK6bTMb5/C3kKgCuFJW/cTNIXl&#xa;U8abjo/gxLQ5b+duxa6RKW0aetIhtilo4+hn9V0xRPSD8Twi6hzFCEkd7YLrHK/JO9PVGZcFWZ&#xa;cL22mjc7ACEeLYE1cYBHqTbLR3WkqDDk1S3Qq0itop72IjSowlS5r1eBFugIX2/KJGOSvcplyJ&#xa;r07qu5YbB53Nb1TED/CJ1U2szU65vQ5iRfR91LgKs7i+7Au9SWvWxXP4zUb2jppxwDAJ20fUqN&#xa;qYc+AfronVOCpmuAdG/mBkWkQNvup0q+ezMiHO4B/0q0wojWYKHzBmC5eNGd8bLZbCoesZy9dH&#xa;vyZtxxnHebGivHuEAyLtLDf9TOCTYgG9yZghpEO622R4WoPMB9INrRo7cqvjWjUcZSSBkTC04n&#xa;BxxGAIBak0VGR1rp4ZVKEN3FXxapcQ7Lq0Er8ZpX3JM1rKu9alMt6aViX1Sq3NHKlGrznIGlir&#xa;SHe8cClsMzK2M/DNBQz0mLpuF+thKoXDD60yCpAlpcigJQZWaeragIYOiJdHxu3RSjk5fVXxFH&#xa;ZTnSLYTj4+JsjgrWVPxWR7njbJJRyS8pmkgpJmiNWLkBNrRs2hdKAs0J8z0O7pOFQXrRCbpGLa&#xa;wmuRk38JfqtbWyAYhqnATxQ5p1NJj0p/et4khkFJDpAzn2Z/pEabP2nVQPYUbBCx5LS6FoGfiG&#xa;uRj2ggGsUziKpDedXLYy+QZVDV/THiPJdoc13ZZD3TVDIyXpjyXNiMQZ6T81txrnYdte7g+l1S&#xa;+sWHQsMQhCXE4WkC3kiaQVdn64ln1fFbUMqsWn2jJtkklhTSweIksZxwaVOHbFxHqM6SUNol5J&#xa;WwIZHnt1IixxuDf2i2zHVPBD6sNnXzGyIvbuLFA5km4bipt2EkuyocAwYlWZNzlxLxKVqbaP6U&#xa;jXkqNFdYvCLjfR7YnwyIEvewTALVBhy3MsH67T8ybD/AB0RORMwPtR1rZKYTQzkQLRrKPyZUkw&#xa;yuK8/dSWJD7XF2htKPSDP2qlrOtmhu9Ea17TurXrVdpsSKr/Z+o4TLuFVZuvNszmmUfStsIXIx&#xa;bGSez0ri3Q51Crn/3LnGwUdQHfWyr9ziJB/9IX5uyLI5ENSohsQFaa5KQT7bJ4oykF/5Dk9xnJ&#xa;OVzb0ThzB26BvfrpcnUWlZddjtnpcdQECeXYFSQ+Y1IFK5TUM28yxft7XfbrNkhahOmh1tvpGh&#xa;U8mGOSQOIVQyuo0/wzYTH4dEpjnhaSn0hiIix55D8aEMSubKHD6LCMV7Y8YjPoSgNS5n3QdrFC&#xa;5FxZO0lS7300GpJY+PJ+cIOtBdQE/zikQNsRRavsKu6JMxbb1Li28I6cKNbf3YdcPXCfagkVnh&#xa;r8mCGmLcnPjMn41p3w3PaEjHHYPMydmPTzP2CcKeMfAHw8qcJvZGYtdMIP9MrDatJOiqCL3CPS&#xa;ycUXGpmIL7Auy+ufqguos3+Mv4BO84pO95CZu3sRTGY4BmU+IftYdpxNyBVnB0PXBh7B6UgcU2&#xa;0dG0ezSszRd6xqCUYQKJdYIJuYPTswrp3vwvTP6M/jrfiSx5oVB9ujpWpSPwU7wkFkMY6UEG0i&#xa;Zc9VTd0do7GajeoVqIGl6KtRtKxR3BzBxv8vWjDvifU78h0OWZRgQPpQGkVVV+PG9487U7Ozoz&#xa;V80lsSdC+dy+cfzBd7i5eYltksWvylCzB7MiXoUXbWJZg1tXTLqbV5LaOYl37rauI1azLy8adg&#xa;EoF/Z/7AasWpZdlcViHTdMeM6dEm3o6LB8rcrOqnHRG91BGKuhVFLHsmjNlSWehb/xh3ExLzLg&#xa;hGM9J1QN6c/135qyMGYdoTcNdVYQw1dGZgwMdYU122g3vgjRQyafc+NflD5jWKUwcHnakBniMd&#xa;Rq0I2hX44uQnRSylKc9aRuohT2Oykz4OBYLI7gO9bwWSoOmYwtu1zB55Ex65F0VCMNdZxkOJmM&#xa;ZXmxWVYc/2p9s0WPV6kzMxkHmXS1gV84gMcUr+GwsCs3RPhNQ5wr2lxHiskXXgNaaPoVrzCNr3&#xa;AFxak2LstWsGqVDxZYlJiM3bpqnDE/UsSECXEtEH5SuhDqqYczmm0h1uLFsTsAnphIuGYsKaOw&#xa;UpPh0mLyGfy7p7Sn6g7nufmnDvf24XNRGBDSnP6SM7/7hKKvbAxie2DhD1MNmW1VsY+7HLoEGO&#xa;I+Ewwew/WnM+VvQcDeBKJi47phsMQOXRYgGMxbdkX+7MLR2uOsnTRGD4192OAlDT2yfdcxHL42&#xa;Djm+WK6oa733OmLTSYlEtBuybqce3aWyx0tA6xOS0g/QXeKeWGYK3Pcd2JNE//ZQOeTXoDcjJk&#xa;69ozGBKyjI2CX8iYjioyE4WTvYAvpt9JnSlyFq34Rm9Gz8IFhK43/ua5MC0oXfis6qrihvRW/u&#xa;sGuTvBVm4IzpBsgZyrFtNmfSdgxzUFffpNrS9MJ2k07649sHosnIGNe78ArosEMrtZ+Fhrgk5G&#xa;OlV4L+S9DoV7txrD3Ep7fWrQ6C10ZjpYIzylMwonR4WGQdLZ9Yw8Yn61ldADfyVYQTjVKUFaNc&#xa;JBvJjoOQ6IptLuGGQ1L0E7VbcL6oIJVJygoHIQlfJTsrWlySZeRUAu8QtqjmnmwBhIyrjDQO05&#xa;xnBNTMiQG8S4QNOnfL/cDQuzrl7f2dMveCWarA/O4aGMjZWwB7UAl7GpU99CvOGP7c0vuFibop&#xa;N4Qp+rY19uCcvuI7vN343PdEG+rg1L3EwBCLbgwby/kpC9iiyLs5rPV5D/j+U9agM/J3tjxu14&#xa;+S1eq1dIp9MyTWD81TNUI/8N87/l732ximoH78mEL63zVKnP9/GqX/CA5MUbtUR1FH/LuNuF1X&#xa;ha1e3LxirpjkLxavpe2NSqIl9cOakm6NXdf198BGHY4bB6UP/9Wg1vUH8GvrUH0JX+by/FD5V6&#xa;mfivzpDT0moecPeDcGL/OTb7MTDpaPf+/XwONncTYZab+E58ou/Qk3iMf+9pbqXWxjgT8bbR17&#xa;evKUeK2G2+PnukgVwFRFw93yiyuF3lKNKQdajpSVsWldjql6E5JgldqOO9mROtVc7u5R0s4hTA&#xa;bHCfufx2e9Lo54Mwl6rORgzEGpwRmLYuTBGpHnKvZyiHzI0RnH7Uspet9iATEU4a7hJ9bZJRay&#xa;aRev6sDp+IkV0VlYsgUWW5pfFJvDhMcPJkD+wT4x6CGiReZuEkDnpX8ZmHW6oa10gheox8yje+&#xa;uhxZGnOLFHCV84YzD3eCdpXq4qqduKYXc0FDulBqyqGGoco0i3w6Lp2RQ9f//R5kWX7n3borVi&#xa;OG0OS1mUroHFRJR0oB/WMx/guZ4qLqpRL2oKnTWHILkuxEjiIlaz6JWNNLEQpsWwM7p67R9n54&#xa;OYI2XYQbFB5+Z6ZA7H4OE53MI8r8w8KIhO0LdtuCHz8JCydnPN/aQ5KVTUWnnH22TjtPZDWaq1&#xa;oBLyJkMGrnUnoIydNfFfpitjC7/0r+ybdNPfK5t2wjRJvcjcmKjbuZTW8Ldc6vNS0iXQw0Uo8h&#xa;NrcWAi6R+nozadQ2zSA4IwB0VqFXf9oMJORk2pt0BEpiMs53F37DCRcGIjoFRMenLTUwQ3BPFY&#xa;kUIMrO/JJ3YGLFdxEKtVlN9NOBSSvoWUEIKwzByvgh7HbYeAbL8kL8UhuCeWWgRxRXtVs53oaq&#xa;+eIEEDsdIXjJphs8EsobBRORrdPoTUAu1SPgGuHK1Qlo5nlEL8YHz0ojsTo87gZpq9Dm4XrVV4&#xa;x5hH9ZZ1hLMCmoKxxnbB7C1MlrXBnOp5tu6d3AOoGycaxfYDjB7aTY9YPV9R2qdYkQGquQgxW4&#xa;Fo1I294l2z2sN1IIO5Fe0p72hTpK91pNYGeFwAjF/IpWyKhTZpzRLLoD3hvX86b9mRdzd9/8AZ&#xa;7wT4izQl1Zwh1BU629BxVqqCnoK+4MXFO7VnCckhbrhtFj6yKTSaFIKpYr+H82T6EAQE+QxM+m&#xa;9mmzJxld3XTaFnPJgi9GDr3T8fH17uvQmIvgLKYhi5CspbGWWHU8Rx5Y107mT7xlaYEJtY+eA0&#xa;r6gYpt6Bs5gtWxi4dT7zh132AzUaYnGHa0sDfOZrLX1r/tcQyBjOeuhHaXcQQVfK2y7NxPpr+k&#xa;L5MDUH0ljqd8uBfdOTExzM9IfaB0ahQmTk8bL1WCu4yoAgovp4L83FA7CUCKab4N9H2boOzr4D&#xa;j3FetExLY+TLO222CnjPWo/QB4Wn9DFZULLSMDTYB/88Nn8mYv56TBZVRRI35S6tl7p8edw1zG&#xa;RW9GRXneeNt7LtDBL/HVkfRGCxfRJHiIVzn54u3rQZPHouc8W+SC/k9f4IJav7f5V2lnFxJVkb&#xa;R0OQ4K7BggR3d6eRBJfg7m7BnWAhjTYeHIK7BQnu7hIsQHAn0ISX7KwAs+/M7s7t/nC7Pzz/03&#xa;X7V3VvVZ3zUJqTCgJyr4rcVvEntGbciWSwwnbU3aF55yaMJJNB381unm0/BYtbl64W0CIrLLdO&#xa;cZw9JSIpfjuQK5538Yp9HAMXJMoeaOqlLHhVJwZR8/X5DbzVImkNZjOOZmDOr9waLmx1JLCySL&#xa;pn+BE1Cxfx9z2UM5c8k8Mm/B+w5cpY0ON3T8rzHiiWHfO0wZIVtfaFzk/I27MTTyYKRaAJtmgi&#xa;OMc6vXY5jjm9BpibBKjQJQ8xig0GBHOUX7U8VXB9DQjyi6RhL8B2oGHPiRr36Fgmybn5hDBpk1&#xa;+xuAmxWPz5CO7F1dNyL5xNiQmp78hN24opn8tFjoYOgzvo12/bNDVNmc44aU4XAzQ7tbxcmblF&#xa;Cg/QryZKL5nKUL9I1uFqzohji8UqN3wfczpnYIhWZPv8OeDg5zF9acbyy59wgwre2JTaGD8/xp&#xa;D58GcbUTxtv/01GqxJvOXLv3tsHvjDx+b/aTRg/6fTttK8Kib/MFcMGhkumlkl2hiPHlIYNIW5&#xa;Zga9ve/riEzmHMoq+yCwVSx+b4xRvJP0xUbIKa80j1Cf04+JgVNJZ490CupwIGRiDLHHRZrrvs&#xa;P+WrqPzzW0EIq3wZYcvV13Ug23gvy3k6GItgTDehnu0nq+6ozZEuC4bLxSufvy+SoIpmtEuYre&#xa;0pxdY2zAgGXjQCpff6tm1+B17bGncBFXb2tfSWJJeQ8wa2GdQ3jTlS+Kmc2KxHO21mSLj40GHi&#xa;14zf1lTpwM0t7RKb+19Im03NDyWsP8svshEArPGWk0cc2iJDNPBrQWkQQbThpT0peGI7Nuqm7i&#xa;0F2TLty38VSfrLN1HzUM8gvbAiceT+H7fBHL4Exm1fUSvTR2bQGjefygJYKDlCJ5MqlM+XPkWa&#xa;paIpqUFymxaCKV/hL5LO1uYaS7DLjIXyZPRxEB5ak9GlgJ84YvcnomuAM8mGCCG1K4Om4rg3kQ&#xa;VoUH7belIKXMsl6gpkvW8xprGds0FiHoCL8hYviqgiCOGv2VrNipdIgTOWHVIu5ASDvDhSUQKW&#xa;HFqOldXE+OCD1DH/BM08i/EaTmEay0Xt544VpDTTJ6o4hewiQmFue1mcvf/cMGwWOUCohfynLa&#xa;RG3/t0pPgyoJiOGZTaq5CNJ1Q4qMmrY43SWFPPlDmm3PmhjW2JsyM4ipLGjOIYMv9Z2f+2nqzE&#xa;aNqI3qgYXep4bgxPvXMlOs0S+c+rnm09YFZc/gYqdKzmlN9Rnm5hvIafdsiwGWi3IcG81GXvV+&#xa;UrGzPYGq5a5mS2UNdhWvW1P+CNm83qvWRr2EdjbMVNXhlIyYtCsxeDYi4WmD4zBV/axyC75Bvh&#xa;agxgowTSmVsEsWntKeS6WieXUrr9SoEmBUR+wj751GhTdcqptPX5W348mAboIFWOFH6yaMjM0S&#xa;lb10W35+0q/ObsPs7MCyv4oRzMrYUxfoTouloixMvMjiZAfLeik0QsfCpmapibKAWnOBG2Xu3V&#xa;BC6CUSX6YuiyQHGm/4W2UQHcpEaLRxo7kLaX+5yha9WTzrGCg7e93gAATRndtgvH7W5k5EctXO&#xa;AZT5GnGZNyZm83Dx5drLBuKbxqQw8JgZu9XNa2bin33EYMWwPIOHjflaca7Ra/NoUYw/fX2Jn0&#xa;wjE5e4gr1hIlH5zPpzR15nQLsswYthZezNeiLPmErVzqkfoSvWKMmrms8BYyv+cVRyUUlOYW93&#xa;6wM4aHVwY1UnxIyZhXy3hs2EYpcqFHHP8gHXTsyjJwRXlu9twpiadzhGP0g7Odt+3ZBcnWutPb&#xa;U6KUHFy7PTXKCq4gmorKJS3TTD+sj+ZglyAlMD8boShn20uObcpWjzbWMaGbb/3E/MMPxP5eyk&#xa;6CiNQUvPF6x3x7eOy1qyzuw9Qka/Z7rCbcFX4BAjZOZhWBEleLKlF6CXHY981NeWYDncQQTzoO&#xa;/U5f6aqywP+1ndjQtw5RcNuGwIm7C6gn/SOMVM9hytGCuACsIstxaiNCegexYjm8Tdkzxxhjms&#xa;/Rbe1mBsPscIuBqwqBSLBamYrqg1acWRmaa2PGyTHLMKVYmos7HFd/Zl2d40Rd27Kqix0oK6HN&#xa;Kaninvlh7qpAjSAsw85pMVk7ZDDRZHXhvOsDHQ90S8oqv3lonAaGk/RiOjXvP2HZF/SsZKS1Rd&#xa;Fb/U3kdn/LX/medNXohnhDeJ262E54GK3K8iSxOva3yQ8Gn+UWRJSo1bDO6us+1A+KPOFvffdr&#xa;Z/90TVgHcjnIwp+SABmqqznuX/3IVrFVGWM6pOHkm/JvtEqyLSmqjGSKuHUMZy4sMTifEvgGg6&#xa;DCAMlDRXewwB+nMcVHRkggBKwxKKJ7Z6pIEwH8oQ+ysaZ8nfGnM2Ji8aAW+KGk3Z4iVqmvC8br&#xa;6fFRWqnX1XmSya9ti4GOZTEHMGcwCnuPSyxxuVgtFsdvbkDiLxrps7AKylUyGndtoKpyHzHiUc&#xa;H+MT3iV9u8gDOG75sn6e3DctpwRszOJZELK8oNQ/xx8sr4IVHlwz1e5eN7e1nB9cJ5oAepXXtb&#xa;EN7u1NFPuV16p6oXLpWpX5GCrMCffKNqK56sS+y0+S0sKqBjgSMQfgoti+O+PEG53JINbllFAK&#xa;qVbJpl98J06w5sHTTD9qygKbPKjsw4VgDXcK4NllYDU+7cw0GwAEOlYl9s0vRuJp4ie5kSjNZu&#xa;hvc4DMdRw/+2lWPD0E7OzXGARIhOSgvGirTS2gtc1u5K0wkHNtx2V5nfC9Nzsmv0i3PFegwkTO&#xa;+s0ewqdCJy86tEoOpsGCFLOuwmZAZ5zKWxVNqc0fPaLhiSYqpwSqWcTRrh10hoa0OYasZHEqCT&#xa;g6Ji9IQYFZGQoBAinG2nljP6o6JMWdIIG6ubtlz6ZZalaFjCcpLFW3RTRpm/qVQZIn/SNFtMHz&#xa;aOPHlWPtsqSX8Ui27J9SaVjNs+noTM1JlQCErwuC28fNuCcL17NYXpGTWZTJjKdMe7jTf3hCPK&#xa;RGXfXk+af3l3lSxnM6QhPKEgiF40IEYqnhKq+JfhCIV0mC0M1lSJslMukBRXkULuikCe/eWwMQ&#xa;qZ64ibuy2eSy0mQNyfImxsvJRezp0gtY5KrG5fIWHmAGNY9RAyj1O4xqRRpVQCsZFwi5SPtaax&#xa;8blGldFRMQ+7qz5/wNTNwQVxdk1ep5F6nLQX1i9Kw5YyEpnVvtLHJTJgemjOO54z9inJ+HHYnZ&#xa;8gWLs+F5ebyw2eua2Y9Nk7pIosl+ClOTcJUhFm3e9Yy/nGrUEFkB3ehaGT8jMfpq22JUNMhRHZ&#xa;pZrHX3Wxh28A4muWvmXmQOk8+L2SItiTXftIpWZipBvblIAXJjio/qnjJ0niXRY0ZhodtjA+9z&#xa;CWc/jnB8U0heHA9NQL7c4rHgR0zD0uHpqdK30NFRdJ/mF1jN2tnOYpLzaF0QFCCKQltjs5tArX&#xa;bpIrQ2ymTNSYL1FqY+hQ8UkcpU6M1/EakLmsXlzx/JyxGUBNWPDYiOESi5aLWzXEXGJggEOPFn&#xa;d7NKEJy722zUgM3sw1AZ0rOGr7cqT2FzG8brlSXZsGQ1k5HVgxWtdieB8T2X6GNv2Yz1+PcSsa&#xa;kmxZUq1gXUEiKwwkM23geSXYwleDmheImrsumCIMYjmIewCS11rmijWgAiCkRmYZQs5nGf5fX1&#xa;r4JHGH1FsXkgm09Rm8prcnUybSNPDpFfBqHaux7OC3gkfiZnTSUfFDEfEreanpyamqB1kloaBp&#xa;rEsIXncOuCKMe0n8vBjn+A7JfJnQ7+8mp2BuQ9vivpRmm4Dcrn3kKidUIicLF3er6oiFNAVFL6&#xa;Bp+oDP8DApGkCM8isZXzxCJHYgcojTdH0Z5JxwPybdS2B8GnagSvhJiUrevQ4L5+qv22DeDsCi&#xa;UJvwKj4Uoi9VLGSDoTvRCnBcfEfEtA9fmBHvBGaQsrhA1+TLCzfYRogsBC9HxZmA+hmaGrHrWX&#xa;yaq9PgbJB0awVPrFFdZVeUa8TCUAJGO+W8lCLefMIfsC6WVTXvOsrM+LL6Tm8az0moJ6z7o4Px&#xa;0wv0WxOqR38dmJscPJUxoNpkS4gY3apnTPL5NrELA6oTlNAIyLU/IiaOm7bFEeUFvvFluM0b/h&#xa;074a9IhGgzNpuJmy0XRBF3c2bhHlRkUoNXKcsHC3pZ5iKlXaMP/A/dJj5RirvOO9eySpyux3KA&#xa;HunPEo873YYb8oSFbjdKiEBnKdK9NEzsK84sVc8tOBuKCiFJlbmZbj0ZaRFv1gHfJUMYQt53eL&#xa;waw/NF3MtFT8XsV5y92Sot2kS2lE+SmqPktstg7rAiDQTIg4HAyqjRXUgaiKhqbllD/7zvgHdd&#xa;hutYgDb9uWKHdptZO5cOw8CkmS3wjUlJp/YahOkLNWetU2BC35ecgwSOd6u3J7tpQIbWhAXB0n&#xa;a/VleXSIUuyBa6yuJrUs9nGL+w1w+/NO9HyOiFY7QkLYd+o0TJrjVJ4FXQ124Q99tArdQb6mz/&#xa;U2oGLUatVwTo+kad3TeivFsnM/pJtkeRqmtMUpNTO7uzNAURQVOi5bJJolFBbotimnDUOSDK/B&#xa;DnVwq6johPLCoXJVTFTFtHyFjQN+kk9RGIxmWdAI9JEXdmDUteu6bp2lYIwb3kTMs4dlFC/ZHW&#xa;5ZTsm8EkwNUXaIA+B1xG6DaabBPmcSrYFu9QMahrrGL8euz9Y53DALge+2CqYHHE8uy9+uIFcO&#xa;47+8US5ZC3UbQYgzGaPbnizK5m4O/zq2k2V/XVLkULxgEu62R4OlWBmWMrjTuVK7WfqmK+f92j&#xa;MBm6/h9i6dzBXT8NYLUbVFTTGc8CWvchzN/ELntf0t9XQ9pI8YlRG4ROuYBqVM9UreNbwLNO+8&#xa;Kst4nZflUOnV/A0bk0gDBMnPP2JGkvQe0oSSN+OYYYlmYs99QnU/NOmNxlchyLfxIhvNTZIzvG&#xa;gNGi7KO/CGfLYM8HEzZnGMm17tbkFivv11ugmpx08V6+c1OkNaX9V7JVtZc170SGFSMBXy6/VA&#xa;0H7TyMM3zFoI7nfwijMcMlLbTBqs48iSDVP87qRMHGsJDMFwD94Kpzx12+Whk+h1Ufk8lfQyTp&#xa;IzfvmbKhfWOc0yW8NOdi6j+hd9+qe6sis3CDfoZ3p9Ul1n+ZmHziN0Bf2khYfCzDID+IqX5HaW&#xa;TytqKD0iV2oEggRzRw585bpYzYMEo8b1m09ueuqBqlaKlyYaq0xRiKie6F2ETU9c+YNsIRMyJZ&#xa;k3rVHDJ8/aFRF88GucdEER2exllPEyogG8bYnyXYZbS5EMU41oi8MGUUWD6iIrw/OFKHgFbMq3&#xa;ZAPsoVpWdHiCGYf8AHHeWhqw8XU8d/ahV0b1AL29UjcmCgTBjsqlpSK//q5tv3pvBOwO7lVG+/&#xa;L7Q6arT1F+6iRmJB1eUDRkMeKCu1zAUE8Y6uz3L7Jb1AkRb5AXSkfkmYoLUyj8FM41ur9pUYlb&#xa;RfbhEX9QF+zA5L6WbgKv18l86d0FYl2AY6OjD8cBmykvlNzdYYI7g/M9kdA6s8ARfdFHax+/Vb&#xa;pRiimH7X9qPv/UUnSECDbAi23dy2aj7VudclrB64vczes4thfV8ZbmGwT0mr6OUziGJ2kZqCtL&#xa;4ZSYsZjLlpNYxmYFbi2myCTRMK6NVbgtGBXnbigiSa7kHvsF2qcfzYZY8RRfiLbu9ADA+Lcj3a&#xa;Xo4La1dcHi2Q6ei+8FiUsYnC6y0CrJhvBZ7KwzhtkLaLohSdLiz+rRRn4oixH7w+YT8gf1rfOm&#xa;eGZXrrDhFDKk7LfjMdDhcDn6pZBxTFhtARFgD7FBoo6QtrG20b7GH1as3aKeeTkg9y5iH+PI9N&#xa;uuMuEGM4xD4MBImh1Rq1TBRL823jnWuxjH1F7CGyskn+zOLwmd8oAixtNGO9RzMnapolAkyyqC&#xa;osRtpkYfU5X0VxilJSgonpwiyZLlq6phU6RVTobKybCAUcFIG3SP1YoePTfgkR98I7w1atJSfP&#xa;akqb365VdYNV4unkBDYE23RFZjf6YS1LsR5yeYI2+wR88jM/ugjP0byBSfTMShFRPkDxlOQMcy&#xa;fv2izoZ+SESeFSqxDXrbu+OeyNd5oeguFW6KlhrSeQ42rL9WYq44I8TPDvRsERvuiGK6eUdLE5&#xa;YW7UNWq3n6Te+gsNyWoNz0Zqb0ukyJUb9lqVvnBmRy4qTI9EZW3xRn68lxO2MoflG0kofuxVNj&#xa;zTKc4v7qzB4Ha8E0fY0rBK3MNadU6xyURo5GYttMtKvEG49QlNSPDMKwkm9yZZ9/k6iLObVF7b&#xa;R2lj3igC5pPz36xNOJyAyVRz1Hj4w2ZuO/ZxulbJleJW5WO5Oh0rSmqmcTTld75tDd+cq3nv/j&#xa;ItrYPsxPBj7XRra0V1cG8MTWG9SLmwMuIc8Ip9DnI/fhvkCj7VnWWEaMcYrOBcSsndolnPc85c&#xa;cfI4a+sr+7P4/vV2ZotMYdIXwyOBMxVJVTs8wPn0bultZ+wpaW5SZxGCFRZVpl+sZQYHnDPYrv&#xa;TSekgmSv46mBWvl5cxRDtMtHw0D5KCqa3g/gr8roe5NHsTkafdNdr36OQFI5IC/TaFNyJNTR9o&#xa;jOEdiUOcfyAFPeSy/tbtGOepOxht2m97kEDZ5P4c307Wa4EWBf0kCRZ8zo6xOMRUamk8KIzA0L&#xa;H8qLXZ/4uka0quJgHnzzp8huxikY0rLXcOk8CJ9AcXg5dDEsQCFAa+F6o+ThYxwy3v5R5XR6C0&#xa;vJa7T+lHPLnbqXZIRx5GUm0JPght4jx8r/58HIybHoKfUNvwdCiyzeFdxp3yVnVbR3EmLf3lMB&#xa;lOLcEzP6ubPY3GenCGSrWHMypeMmHkDQlrVFtqsZRnNI4g9fhhXMva+S+UnLedg/6atFEmo+0s&#xa;6xA7dJttMXWolqqsnnyFYKsWC7AYqp1a1hC2nRYy0tUozY0HvvA3n4hq8a3oXPS2y3SGzXRllz&#xa;MbokV9QIH7ietpRFnnqjJImPrKIASrChyyho32pSagZSQOXl9lHLlhETU1UL/O2dJktYoN2no/&#xa;bd+JwYbVImPrGw1fxHUYqlaRYopQlfcgkQDSYfjKuAYhOppnOL7a/+CCcNH1VxOwLky6u/oojr&#xa;36JOH5/0DNxUJtk4MXLwByE6YmhDuGi084lJlO0YHxN+R3JZef8FkopcI1i8acZ4RDssp81ihN&#xa;DlaHPznM+XqPZWC3JW1n8y07BpQHTWnNbxWxIKWZKEc0+UvbN9FG3sfEMYMIh/vYcOeJ0hq4pC&#xa;dk1AY9UMrTLRpy1iVSLQXlTI69hbSukUqBayKxd3+6q4V+7VGoNlL3XpS4INWRchg3G0JfTdlE&#xa;GtoyVt6xbb0v0BBnfJKFdsOmoOOvgoO0vsxS5exAxeYufRRncFyFNjDQyno89QWy8rt4oQ+qYq&#xa;K0pXiXH2QiApoZrbxDej7A5w/WLm5budctrEyRfSO1EwU25BdDzy5WFLTO0mLva9/rvbdI1BGN&#xa;5kDQsaKQoWPrVgiwCLVcRI4eK54S9EwtY56SgQ2uubKNCfzk/OICK9f1ILAdNtIWZ2Nwkg5248&#xa;MYRCoBkcW+O8f8IITQynQ4Ve/1D1JRVcRi5bHnaFQLr+weCbDAbj+SbfgLl9tW7AsL7zYDCl73&#xa;xq777TkwMHqX0Xu4vrHzq+cGAwli8cUV832FOwdc37J20rBvIXIPJ+KHSaQ+s4Mtd3XzS4CJ6v&#xa;zwR9iL7SwzXtbdpCgSc0RofBYNTW4Rswva9rSpvrDdja9wIMNuvWn66rK6+r0TWYnpNi9faG+m&#xa;EGh969suaZjVhvERjdkEx6e+C6rcaTLHw30PQlmGPPZXmCxZl2uaTnqAVr17iiXfzO3Dt0D2l+&#xa;prEGtC9vYuwjyS4mTj//DhcCij4pehNayClxKcnIpSNECQal/lz6gBHd9Fv6hv0z7QI9VAiIJL&#xa;JfsxSQUJgQv81TVEL7Aczq7HhLMCEgZhh+zVPAQDw8/jVrIW/rpO9kbmvz26zFz76HSjV3Su7Z&#xa;jNu/qh+9RYSA4Higcon575SUHfRtHK30nWwdKHSd/n5u/ChZ5DGjRVINSxvpLlLC39JN/nVE4P&#xa;8x4/d6G58aARPTWdLdcBAQV3et8/KBHhfVgypN/zhTMnZyMrcxdXyc1XJfuAzWD8A2eLuTdtcY&#xa;8nfBsj0QVmf8D4UfrcE+JoxOzxGH3hGIkB6Hrs7+nxFYfi9cctfGIDZsTrw7Yb6768j5QJib90&#xa;+EHY2dFB1s7YwdnNwf7bl73PCXy7Dr3SgQEDgUEBCkDyC1Qn8I+feNgaehDIN+FzMF4m87Av91&#xa;DCr+ecx/EusR/cLZ2J345u+uJZ/qf3kt/x8CzNA3pLM7Qsazx+Hbaf/n4f+b6/mr9th9R3SuB+&#xa;LtBn9aIvKfXzr+wR/+F+W+qy3vAwq9+V/yWv/dz7nnlPgQNGz7lyxzH4PuG149BK07/yUbxseg&#xa;+/4tD0HBnn/JTesx6L4lwEPQc/+/ZA7zGHS/gvZDEEfoX/IbeAy6Xwr1Icgu8i+V534Mul/a7y&#xa;EINfYv1Vl9DLqfakn0AFSQ9Cd1A+9L/VqCuJ9K83Cw9C/7TzI1H+vd35D9sJfaq/mv03Eei9/f&#xa;xPRQ/KLpv97h/Vj8/pr4wy7wedf/vivqMeX+YtBDCsPA/77a/phy/2YO9wElefT/X2ZSlP01BE&#xa;BAENy9LuAhIIRXf336P1BLBwgYZmOt7NsAAE7sAABQSwECFAAUAAgICAB1iU5NGGZjrezbAABO&#xa;7AAAEQAAAAAAAAAAAAAAAAAAAAAAbGliL0NoZXNzVHJlZS5qYXJQSwUGAAAAAAEAAQA/AAAAK9&#xa;wAAAAA" ID="ID_882586830" CREATED="1540216117617" MODIFIED="1540216117631"/>
</node>
</node>
<node TEXT="images" POSITION="right" ID="ID_209340361" CREATED="1521562135195" MODIFIED="1540216035600">
<edge COLOR="#7c7c00"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      An add-on may define any number of images as child nodes of the images node. The actual image data has to be placed as base64 encoded binary data into the text of a subnode.
    </p>
    <p>
      The images are saved to the <i>${installationbase}/resources/images</i>&#160;directory.
    </p>
    <p>
      
    </p>
    <p>
      The following images should be present:
    </p>
    <ul>
      <li>
        <i>${name}-icon.png</i>, like <i>oldicons-theme-icon.png</i>. This will be used in the app-on overview.
      </li>
      <li>
        <i>${name}-screenshot-1.png</i>, like <i>oldicons-theme-screenshot-1.png</i>. This will be used in the app-on details dialog. Further images can be included but they are not used yet.
      </li>
    </ul>
    <p>
      Images can be added automatically by releaseAddOn.groovy or must be uploaded into the map via the script <i>Tools-&gt;Scripts-&gt;Insert Binary</i>&#160;since they have to be (base64) encoded as simple strings.
    </p>
  </body>
</html>
</richcontent>
</node>
</node>
</map>
