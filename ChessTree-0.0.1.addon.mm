<map version="freeplane 1.7.0">
<!--To view this file, download free mind mapping software Freeplane from http://freeplane.sourceforge.net -->
<node TEXT="ChessTree" FOLDED="false" ID="ID_1869326925" CREATED="1521562113754" MODIFIED="1549009837144" LINK="http://noUpdateURL.com" BACKGROUND_COLOR="#97c7dc" STYLE="oval">
<font SIZE="16" BOLD="true" ITALIC="true"/>
<hook NAME="MapStyle">
    <properties fit_to_viewport="false" show_icon_for_attributes="true" show_note_icons="true" edgeColorConfiguration="#808080ff,#ff0000ff,#0000ffff,#00ff00ff,#ff00ffff,#00ffffff,#7c0000ff,#00007cff,#007c00ff,#7c007cff,#007c7cff,#7c7c00ff"/>

<map_styles>
<stylenode LOCALIZED_TEXT="styles.root_node" STYLE="oval" UNIFORM_SHAPE="true" VGAP_QUANTITY="24.0 pt">
<font SIZE="24"/>
<stylenode LOCALIZED_TEXT="styles.predefined" POSITION="right" STYLE="bubble">
<stylenode LOCALIZED_TEXT="default" ICON_SIZE="12.0 pt" COLOR="#000000" STYLE="fork">
<font NAME="SansSerif" SIZE="10" BOLD="false" ITALIC="false"/>
</stylenode>
<stylenode LOCALIZED_TEXT="defaultstyle.details"/>
<stylenode LOCALIZED_TEXT="defaultstyle.attributes">
<font SIZE="9"/>
</stylenode>
<stylenode LOCALIZED_TEXT="defaultstyle.note" COLOR="#000000" BACKGROUND_COLOR="#ffffff" TEXT_ALIGN="LEFT"/>
<stylenode LOCALIZED_TEXT="defaultstyle.floating">
<edge STYLE="hide_edge"/>
<cloud COLOR="#f0f0f0" SHAPE="ROUND_RECT"/>
</stylenode>
</stylenode>
<stylenode LOCALIZED_TEXT="styles.user-defined" POSITION="right" STYLE="bubble">
<stylenode LOCALIZED_TEXT="styles.topic" COLOR="#18898b" STYLE="fork">
<font NAME="Liberation Sans" SIZE="10" BOLD="true"/>
</stylenode>
<stylenode LOCALIZED_TEXT="styles.subtopic" COLOR="#cc3300" STYLE="fork">
<font NAME="Liberation Sans" SIZE="10" BOLD="true"/>
</stylenode>
<stylenode LOCALIZED_TEXT="styles.subsubtopic" COLOR="#669900">
<font NAME="Liberation Sans" SIZE="10" BOLD="true"/>
</stylenode>
<stylenode LOCALIZED_TEXT="styles.important">
<icon BUILTIN="yes"/>
</stylenode>
</stylenode>
<stylenode LOCALIZED_TEXT="styles.AutomaticLayout" POSITION="right" STYLE="bubble">
<stylenode LOCALIZED_TEXT="AutomaticLayout.level.root" COLOR="#000000" STYLE="oval" SHAPE_HORIZONTAL_MARGIN="10.0 pt" SHAPE_VERTICAL_MARGIN="10.0 pt">
<font SIZE="18"/>
</stylenode>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,1" COLOR="#0033ff">
<font SIZE="16"/>
</stylenode>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,2" COLOR="#00b439">
<font SIZE="14"/>
</stylenode>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,3" COLOR="#990000">
<font SIZE="12"/>
</stylenode>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,4" COLOR="#111111">
<font SIZE="10"/>
</stylenode>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,5"/>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,6"/>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,7"/>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,8"/>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,9"/>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,10"/>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,11"/>
</stylenode>
</stylenode>
</map_styles>
</hook>
<hook NAME="AutomaticEdgeColor" COUNTER="11" RULE="ON_BRANCH_CREATION"/>
<attribute_layout NAME_WIDTH="107.99999678134928 pt" VALUE_WIDTH="134.9999959766866 pt"/>
<attribute NAME="name" VALUE="chessTree"/>
<attribute NAME="version" VALUE="0.0.1"/>
<attribute NAME="author" VALUE="Gergely Kiss"/>
<attribute NAME="freeplaneVersionFrom" VALUE="1.7.4"/>
<attribute NAME="freeplaneVersionTo" VALUE=""/>
<attribute NAME="updateUrl" VALUE="http://noUpdateURL.com" OBJECT="java.net.URI|http://noUpdateURL.com"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      The homepage of this add-on should be set as the link of the root node.
    </p>
    <p>
      The basic properties of this add-on. They can be used in script names and other attributes, e.g. &quot;${name}.groovy&quot;.
    </p>
    <ul>
      <li>
        name: The name of the add-on, normally a technically one (no spaces, no special characters except _.-).
      </li>
      <li>
        author: Author's name(s) and (optionally) email adresses.
      </li>
      <li>
        version: Since it's difficult to protect numbers like 1.0 from Freeplane's number parser it's advised to prepend a 'v' to the number, e.g. 'v1.0'.
      </li>
      <li>
        freeplane-version-from: The oldest compatible Freeplane version. The add-on will not be installed if the Freeplane version is too old.
      </li>
      <li>
        freeplane-version-to: Normally empty: The newest compatible Freeplane version. The add-on will not be installed if the Freeplane version is too new.
      </li>
      <li>
        updateUrl: URL of the file containing information (version, download url) on the latest version of this add-on. By default: &quot;${homepage}/version.properties&quot;
      </li>
    </ul>
  </body>
</html>
</richcontent>
<node TEXT="description" POSITION="left" ID="ID_752418840" CREATED="1521562135104" MODIFIED="1540216035317">
<edge COLOR="#ff0000"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      Description would be awkward to edit as an attribute.
    </p>
    <p>
      So you have to put the add-on description as a child of the <i>'description'</i>&#160;node.
    </p>
    <p>
      To translate the description you have to define a translation for the key 'addons.${name}.description'.
    </p>
  </body>
</html>
</richcontent>
<node ID="ID_281132702" CREATED="1521563587956" MODIFIED="1521563734014"><richcontent TYPE="NODE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      This addon is intended to ease the creation and maintenance of mindmaps containing trees for chess movements.
    </p>
    <p>
      
    </p>
    <p>
      0.) Template is available after addon installation from <i><b>File</b></i>&#160; --&gt; <i><b>New map from template...</b></i>&#160;choosing <i><b>template.ChessTree.mm</b></i>. Any additional information can be found in the template.
    </p>
    <p>
      
    </p>
  </body>
</html>
</richcontent>
<attribute_layout VALUE_WIDTH="134.9999959766866 pt"/>
</node>
</node>
<node TEXT="changes" POSITION="left" ID="ID_845634758" CREATED="1521562135109" MODIFIED="1540216035330">
<edge COLOR="#0000ff"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      Change log of this add-on: append one node for each noteworthy version and put the details for each version into a child node.
    </p>
  </body>
</html>
</richcontent>
</node>
<node TEXT="license" FOLDED="true" POSITION="left" ID="ID_1331637895" CREATED="1521562135113" MODIFIED="1540216035338">
<edge COLOR="#00ff00"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      The add-ons's license that the user has to accept before she can install it.
    </p>
    <p>
      
    </p>
    <p>
      The License text has to be entered as a child of the <i>'license'</i>&#160;node, either as plain text or as HTML.
    </p>
  </body>
</html>
</richcontent>
<node TEXT="&#xa;This add-on is free software: you can redistribute it and/or modify&#xa;it under the terms of the GNU General Public License as published by&#xa;the Free Software Foundation, either version 2 of the License, or&#xa;(at your option) any later version.&#xa;&#xa;This program is distributed in the hope that it will be useful,&#xa;but WITHOUT ANY WARRANTY; without even the implied warranty of&#xa;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the&#xa;GNU General Public License for more details.&#xa;" ID="ID_1555852289" CREATED="1521562135117" MODIFIED="1521566722845"/>
</node>
<node TEXT="preferences.xml" POSITION="left" ID="ID_136508631" CREATED="1521562135121" MODIFIED="1540216035346">
<edge COLOR="#ff00ff"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      <font color="#000000" face="SansSerif, sans-serif">The child node contains the add-on configuration as an extension to mindmapmodemenu.xml (in Tools-&gt;Preferences-&gt;Add-ons). </font>
    </p>
    <p>
      <font color="#000000" face="SansSerif, sans-serif">Every property in the configuration should receive a default value in <i>default.properties</i>&#160;node.</font>
    </p>
  </body>
</html>
</richcontent>
</node>
<node TEXT="default.properties" POSITION="left" ID="ID_1494843788" CREATED="1521562135125" MODIFIED="1540216035353">
<edge COLOR="#00ffff"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      These properties play together with the preferences: Each property defined in the preferences should have a default value in the attributes of this node.
    </p>
  </body>
</html>
</richcontent>
</node>
<node TEXT="translations" POSITION="left" ID="ID_461099033" CREATED="1521562135130" MODIFIED="1540216035360">
<edge COLOR="#7c0000"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      The translation keys that this script uses. Define one child node per supported locale. The attributes contain the translations. Define at least
    </p>
    <ul>
      <li>
        'addons.${name}' for the add-on's name
      </li>
      <li>
        'addons.${name}.description' for the description, e.g. in the add-on overview dialog (not necessary for English)
      </li>
      <li>
        'addons.${name}.&lt;scriptname&gt;' for each script since it will be the menu title.
      </li>
    </ul>
  </body>
</html>
</richcontent>
<node TEXT="en" ID="ID_1779268052" CREATED="1521562135133" MODIFIED="1540215919911" MAX_WIDTH="322.49999056756525 pt" MIN_WIDTH="322.49999056756525 pt">
<attribute_layout NAME_WIDTH="155.99999535083785 pt" VALUE_WIDTH="123.74999631196272 pt"/>
<attribute NAME="addons.${name}" VALUE="ChessTree"/>
<attribute NAME="addon.${name}.updateChessTree" VALUE="Update ChessTree..."/>
<attribute NAME="addon.${name}.pasteBranch" VALUE="Paste branch..."/>
</node>
</node>
<node TEXT="deinstall" POSITION="left" ID="ID_1510539068" CREATED="1521562135137" MODIFIED="1540216035366">
<edge COLOR="#00007c"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      List of files and/or directories to remove on uninstall
    </p>
  </body>
</html>
</richcontent>
<attribute_layout NAME_WIDTH="52.499998435378124 pt" VALUE_WIDTH="271.4999919086697 pt"/>
<attribute NAME="delete" VALUE="${installationbase}/addons/${name}.script.xml"/>
<attribute NAME="delete" VALUE="${installationbase}/templates/template.ChessTree.mm"/>
<attribute NAME="delete" VALUE="${installationbase}/lib/ChessTree.jar"/>
<attribute NAME="delete" VALUE="${installationbase}/addons/${name}/scripts/pasteBranch.groovy"/>
<attribute NAME="delete" VALUE="${installationbase}/addons/${name}/scripts/updateChessTree.groovy"/>
</node>
<node TEXT="scripts" POSITION="right" ID="ID_836008002" CREATED="1521562135167" MODIFIED="1540216035376">
<edge COLOR="#007c00"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      An add-on may contain multiple scripts. The node text defines the script name (e.g. inserInlineImage.groovy). The name must have a suffix of a supported script language like .groovy or .js and may only consist of letters and digits. The script properties have to be configured via attributes:
    </p>
    <p>
      
    </p>
    <p>
      * menuLocation: &lt;locationkey&gt;
    </p>
    <p>
      &#160;&#160;&#160;- Defines where the menu location.
    </p>
    <p>
      &#160;&#160;&#160;-&#160;See mindmapmodemenu.xml for how the menu locations look like.
    </p>
    <p>
      &#160;&#160;&#160;- http://freeplane.bzr.sf.net/bzr/freeplane/freeplane_program/trunk/annotate/head%3A/freeplane/resources/xml/mindmapmodemenu.xml
    </p>
    <p>
      &#160;&#160;&#160;- This attribute is mandatory
    </p>
    <p>
      
    </p>
    <p>
      * menuTitleKey: &lt;key&gt;
    </p>
    <p>
      &#160;&#160;&#160;- The menu item title will be looked up under the translation key &lt;key&gt; - don't forget to define its translation.
    </p>
    <p>
      &#160;&#160;&#160;- This attribute is mandatory
    </p>
    <p>
      
    </p>
    <p>
      * executionMode: &lt;mode&gt;
    </p>
    <p>
      &#160;&#160;&#160;- The execution mode as described in the Freeplane wiki (http://freeplane.sourceforge.net/wiki/index.php/Scripting)
    </p>
    <p>
      &#160;&#160;&#160;- ON_SINGLE_NODE: Execute the script once. The <i>node</i>&#160;variable is set to the selected node.
    </p>
    <p>
      &#160;&#160;&#160;- ON_SELECTED_NODE: Execute the script n times for n selected nodes, once for each node.
    </p>
    <p>
      &#160;&#160;&#160;- ON_SELECTED_NODE_RECURSIVELY: Execute the script on every selected node and recursively on all of its children.
    </p>
    <p>
      &#160;&#160;&#160;- In doubt use ON_SINGLE_NODE.
    </p>
    <p>
      &#160;&#160;&#160;- This attribute is mandatory
    </p>
    <p>
      
    </p>
    <p>
      * keyboardShortcut: &lt;shortcut&gt;
    </p>
    <p>
      &#160;&#160;&#160;- Optional: keyboard combination / accelerator for this script, e.g. control alt I
    </p>
    <p>
      &#160;&#160;&#160;- Use lowercase letters for modifiers and uppercase for letters. Use no + signs.
    </p>
    <p>
      &#160;&#160;&#160;- The available key names are listed at http://download.oracle.com/javase/1.4.2/docs/api/java/awt/event/KeyEvent.html#VK_0
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;In the list only entries with a 'VK_' prefix count. Omit the prefix in the shortcut definition.
    </p>
    <p>
      
    </p>
    <p>
      * Permissions&#160;that the script(s) require, each either false or true:
    </p>
    <p>
      &#160;&#160;&#160;- execute_scripts_without_asking
    </p>
    <p>
      &#160;&#160;&#160;- execute_scripts_without_file_restriction: permission to read files
    </p>
    <p>
      &#160;&#160;&#160;- execute_scripts_without_write_restriction: permission to create/change/delete files
    </p>
    <p>
      &#160;&#160;&#160;- execute_scripts_without_exec_restriction: permission to execute other programs
    </p>
    <p>
      &#160;&#160;&#160;- execute_scripts_without_network_restriction: permission to access the network
    </p>
    <p>
      &#160;&#160;Notes:
    </p>
    <p>
      &#160;&#160;- The set of permissions is fixed.
    </p>
    <p>
      &#160;&#160;- Don't change the attribute names, don't omit one.
    </p>
    <p>
      &#160;&#160;- Set the values either to true or to false
    </p>
    <p>
      &#160;&#160;- In any case set execute_scripts_without_asking to true unless you want to annoy users.
    </p>
  </body>
</html>
</richcontent>
<node TEXT="pasteBranch.groovy" FOLDED="true" ID="ID_1708118480" CREATED="1522494712280" MODIFIED="1522494830917">
<attribute_layout NAME_WIDTH="146.2499956414105 pt" VALUE_WIDTH="134.9999959766866 pt"/>
<attribute NAME="menuTitleKey" VALUE="addon.${name}.pasteBranch"/>
<attribute NAME="menuLocation" VALUE="/menu_bar/addons.${name}"/>
<attribute NAME="executionMode" VALUE="on_single_node"/>
<attribute NAME="keyboardShortcut" VALUE=""/>
<attribute NAME="execute_scripts_without_asking" VALUE="true"/>
<attribute NAME="execute_scripts_without_file_restriction" VALUE="true"/>
<attribute NAME="execute_scripts_without_write_restriction" VALUE="true"/>
<attribute NAME="execute_scripts_without_exec_restriction" VALUE="true"/>
<attribute NAME="execute_scripts_without_network_restriction" VALUE="true"/>
<node TEXT="import org.freeplane.plugin.script.proxy.ScriptUtils&#xd;&#xa;import groovy.swing.SwingBuilder&#xd;&#xa;//import groovy.io.File&#xd;&#xa;import groovy.io.FileType&#xd;&#xa;&#xd;&#xa;import java.awt.FlowLayout as FL&#xd;&#xa;import java.awt.event.ActionEvent;&#xd;&#xa;import java.awt.event.ActionListener;&#xd;&#xa;import java.awt.Dimension;&#xd;&#xa;import java.awt.KeyStroke;&#xd;&#xa;import java.awt.event.KeyEvent;&#xd;&#xa;import java.awt.event.KeyAdapter;&#xd;&#xa;import java.awt.Action;&#xd;&#xa;import java.awt.Font;&#xd;&#xa;&#xd;&#xa;import javax.swing.BoxLayout as BXL&#xd;&#xa;import javax.swing.JFrame&#xd;&#xa;import javax.swing.AbstractAction;&#xd;&#xa;import javax.swing.Action;&#xd;&#xa;import javax.swing.BoxLayout;&#xd;&#xa;import javax.swing.JComponent;&#xd;&#xa;import javax.swing.JList;&#xd;&#xa;import javax.swing.JPanel;&#xd;&#xa;import javax.swing.KeyStroke;&#xd;&#xa;import javax.swing.JScrollPane&#xd;&#xa;import javax.swing.JFileChooser;&#xd;&#xa;&#xd;&#xa;import java.awt.Toolkit&#xd;&#xa;import java.awt.datatransfer.Clipboard&#xd;&#xa;import java.awt.datatransfer.DataFlavor&#xd;&#xa;import java.awt.datatransfer.StringSelection&#xd;&#xa;&#xd;&#xa;import ChessTree.Notation&#xd;&#xa;import ChessTree.NotationTranslator&#xd;&#xa;import ChessTree.ChessTreeSettings&#xd;&#xa;import ChessTree.PositionInterpreter&#xd;&#xa;&#xd;&#xa;/*************/&#xd;&#xa;/** Globals **/&#xd;&#xa;/*************/&#xd;&#xa;chessTreeSettings = new ChessTreeSettings(this.node.map)&#xd;&#xa;/* CONSTANTS */ &#xd;&#xa;SUPPORTED_LANGUAGES = chessTreeSettings.SUPPORTED_LANGUAGES&#xd;&#xa;DICTIONARY = chessTreeSettings.DICTIONARY&#xd;&#xa;&#xd;&#xa;LANGUAGE_CURRENT = chessTreeSettings.get(&quot;chesstree_language&quot;)&#xd;&#xa;&#xd;&#xa;ROOT = this.node.map.root&#xd;&#xa;&#xd;&#xa;/* FUNCTIONS */&#xd;&#xa;&#xd;&#xa;/* Static functions for ClipBoard handling */ &#xd;&#xa;static String getClipboardContents(){    return Toolkit.getDefaultToolkit().getSystemClipboard().getContents(null).getTransferData(DataFlavor.stringFlavor)    }&#xd;&#xa;&#xd;&#xa;def showPGNFileChooser() {&#xd;&#xa;    if(guiPGNFolderRB.selected) {&#xd;&#xa;        JFileChooser chooser = new JFileChooser();&#xd;&#xa;        chooser.setCurrentDirectory(new java.io.File(&quot;.&quot;));&#xd;&#xa;        chooser.setDialogTitle(&quot;Choose directory containing PGN files...&quot;);&#xd;&#xa;        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);&#xd;&#xa;        chooser.setAcceptAllFileFilterUsed(false);&#xd;&#xa;        &#xd;&#xa;        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {&#xd;&#xa;            return chooser.getCurrentDirectory()&#xd;&#xa;        } else {&#xd;&#xa;            return &quot;&quot;&#xd;&#xa;        }&#xd;&#xa;    } else {&#xd;&#xa;        return &quot;&quot;&#xd;&#xa;    }&#xd;&#xa;&#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;def switchPGNinput() {&#xd;&#xa;    guiPGNClipboard.editable = guiPGNClipboardRB.selected    &#xd;&#xa;    guiPGNClipboard.enabled = guiPGNClipboardRB.selected&#xd;&#xa;    guiPGNFolder.editable = guiPGNFolderRB.selected&#xd;&#xa;    guiPGNFolder.enabled = guiPGNFolderRB.selected    &#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;def getNodeNotation(aNode) { // not used // FEN is retrieved from PGN notation, not needed for nodeNotation&#xd;&#xa;    def nn = &quot;[FEN \&quot;&quot;&#xd;&#xa;    nn += aNode.attributes.containsKey(&quot;FEN&quot;) ? aNode[&quot;FEN&quot;] : &quot;&quot;&#xd;&#xa;    nn += &quot;\&quot;] &quot; + aNode.getDisplayedText()&#xd;&#xa;    return nn&#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;def getNodeFEN(aNode) {&#xd;&#xa;    return aNode.attributes.containsKey(&quot;FEN&quot;) ? aNode[&quot;FEN&quot;] : &quot;&quot;//: PositionInterpreter.FEN_STARTING&#xd;&#xa;}&#xd;&#xa;/****************/&#xd;&#xa;/**** M A I N ***/&#xd;&#xa;/****************/&#xd;&#xa;&#xd;&#xa;/* Build Dialog window */&#xd;&#xa;def s = new SwingBuilder()&#xd;&#xa;s.setVariable(&apos;myDialog-properties&apos;,[:])&#xd;&#xa;def vars = s.variables&#xd;&#xa;def disableItem(item) {vars.guiPGNClip.editable = false}&#xd;&#xa;&#xd;&#xa;def dial = s.dialog(title:&quot;Paste branch ...&quot;, id:&apos;myDialog&apos;, modal:true, locationRelativeTo:ui.frame, owner:ui.frame, defaultCloseOperation:JFrame.DISPOSE_ON_CLOSE, pack:true, show:true) {&#xd;&#xa;    panel(id:&apos;pMain&apos;) {&#xd;&#xa;        boxLayout(axis:BXL.Y_AXIS)&#xd;&#xa;                &#xd;&#xa;        guiPGNSource = buttonGroup();&#xd;&#xa;        panel(alignmentX:0f) {&#xd;&#xa;            flowLayout(alignment:FL.LEFT)&#xd;&#xa;            guiPGNClipboardRB = radioButton(preferredSize: [150, 20], text:&quot;PGN from ClipBoard&quot;, buttonGroup:guiPGNSource, selected:true, mouseClicked: {switchPGNinput()});&#xd;&#xa;            scrollPane(horizontalScrollBarPolicy:JScrollPane.HORIZONTAL_SCROLLBAR_NEVER, verticalScrollBarPolicy:JScrollPane.VERTICAL_SCROLLBAR_ALWAYS) {&#xd;&#xa;                guiPGNClipboard = textArea( id:&apos;guiPGNClip&apos;, columns: 60, rows: 6, font: new Font(&quot;Consolas&quot;, Font.PLAIN, 11), text: getClipboardContents(), wrapStyleWord:true, lineWrap:true)&#xd;&#xa;            }&#xd;&#xa;        }  &#x9;&#xd;&#xa;        panel(alignmentX:0f) {&#xd;&#xa;            flowLayout(alignment:FL.LEFT)            &#xd;&#xa;            guiPGNFolderRB = radioButton(preferredSize: [150, 20], text:&quot;PGN from folder&quot;, buttonGroup:guiPGNSource, mouseClicked: {switchPGNinput()});&#xd;&#xa;            guiPGNFolder = textField(columns:60, font: new Font(&quot;Consolas&quot;, Font.PLAIN, 11), mouseClicked: { guiPGNFolder.text = showPGNFileChooser() }, editable: guiPGNFolderRB.selected)    &#xd;&#xa;            &#xd;&#xa;        }&#xd;&#xa;        panel(alignmentX:0f) {&#xd;&#xa;            flowLayout(alignment:FL.LEFT)&#xd;&#xa;            label(&apos;Language&apos;, preferredSize: [60, 24])&#xd;&#xa;&#x9;&#x9;&#x9;comboBox(id: &apos;guiLanguage&apos;, preferredSize: [100, 24], editable:true,&#xd;&#xa;&#x9;&#x9;&#x9;&#x9;items:SUPPORTED_LANGUAGES.collect{it.value}, selectedItem:SUPPORTED_LANGUAGES[LANGUAGE_CURRENT]) &#xd;&#xa;        }         &#xd;&#xa;        panel(alignmentX:0f) {&#xd;&#xa;            flowLayout(alignment:FL.LEFT)&#xd;&#xa;            button(&apos;Paste&apos;, preferredSize:[110, 24],&#xd;&#xa;                   actionPerformed:{&#xd;&#xa;                       vars.dialogResult = &apos;paste&apos;&#xd;&#xa;                       dispose()&#xd;&#xa;            })&#xd;&#xa;            button(&apos;Cancel&apos;, preferredSize:[120, 24],&#xd;&#xa;                   actionPerformed:{&#xd;&#xa;                       vars.dialogResult = &apos;cancel&apos;&#xd;&#xa;                       dispose()&#xd;&#xa;            })&#xd;&#xa;        }&#xd;&#xa;        panel(alignmentX:0f) {&#xd;&#xa;        }&#xd;&#xa;    }&#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;/* Handle received data */&#xd;&#xa;pgn = &quot;&quot;&#xd;&#xa;if (vars.dialogResult == &apos;paste&apos;) {&#xd;&#xa;&#x9;/* Update attributes */&#xd;&#xa;    PGN_LANGUAGE = SUPPORTED_LANGUAGES.find{it.value == vars.guiLanguage.getSelectedItem()}.key&#xd;&#xa;    switch (guiPGNSource.getSelection()) {&#xd;&#xa;        case (guiPGNClipboardRB.model):&#xd;&#xa;            pgn = guiPGNClipboard.text&#xd;&#xa;            break;&#xd;&#xa;        case (guiPGNFolderRB.model):&#xd;&#xa;            dir = new File(guiPGNFolder.text)&#xd;&#xa;            if (dir.path != &quot;&quot;) {&#xd;&#xa;                dir.eachDirRecurse() { dir -&gt;  &#xd;&#xa;                    dir.eachFileMatch(~/.*.pgn/) { file -&gt;  &#xd;&#xa;                        pgn += new File(file.getPath()).text&#xd;&#xa;                    }  &#xd;&#xa;                }  &#xd;&#xa;            } // else no folder selected&#xd;&#xa;            &#xd;&#xa;            break;&#xd;&#xa;        default: break;&#xd;&#xa;    }&#xd;&#xa;    &#xd;&#xa;&#xd;&#xa;} else {&#xd;&#xa;    return;&#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;/* Initialization */&#xd;&#xa;def translationNeeded = (PGN_LANGUAGE != LANGUAGE_CURRENT)&#xd;&#xa;def nextNodeStack = []&#xd;&#xa;def nextNodeStackAlt = []&#xd;&#xa;&#xd;&#xa;def pgnNotation = new Notation(pgn, PGN_LANGUAGE)&#xd;&#xa;def nodeNotation = new Notation(this.node.getDisplayedText(), LANGUAGE_CURRENT) // FEN is retrieved from PGN notation, not needed for nodeNotation&#xd;&#xa;&#xd;&#xa;/* Determine starting node */&#xd;&#xa;// Search for starting node with ancestors first order &#xd;&#xa;def currentNode = this.node&#xd;&#xa;while (pgnNotation.getFEN() != getNodeFEN(currentNode)) {&#xd;&#xa;    currentNode = currentNode.parent&#xd;&#xa;    if (currentNode == null) {&#xd;&#xa;        break;&#xd;&#xa;    }&#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;if (currentNode == null) {&#xd;&#xa;    currentNode = this.node.createChild(&quot;Starting position&quot;) // no matching node found&#xd;&#xa;    currentNode.style.setName(&quot;Starting position&quot;)&#xd;&#xa;    currentNode[&quot;FEN&quot;] = pgnNotation.position.FEN&#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;/* Walk through PGN */&#xd;&#xa;&#xd;&#xa;while (pgn.length() &gt; 0) {&#xd;&#xa;    if (pgnNotation.getMove() == &quot;&quot;) break;&#xd;&#xa;    &#xd;&#xa;    /* Parse ChessTree specific comment parts: Odds, Freq, Opening */&#xd;&#xa;    comments = pgnNotation.getComment()&#xd;&#xa;    odds = opening = freq = &quot;&quot;&#xd;&#xa;    &#xd;&#xa;    &#xd;&#xa;    odds = (comments =~ /(?i)\s*odds\s*:\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*;/)&#xd;&#xa;    if (odds.count&gt;0) {&#xd;&#xa;        comments = comments.replace(odds[0][0], &quot;&quot;)&#xd;&#xa;        odds = &quot;${odds[0][1]},${odds[0][2]},${odds[0][3]}&quot;&#xd;&#xa;    } else {&#xd;&#xa;        odds = &quot;&quot;&#xd;&#xa;    }&#xd;&#xa;    &#xd;&#xa;    freq = (comments =~ /(?i)\s*freq\s*:\s*(\d+)\s*;/)&#xd;&#xa;    if (freq.count&gt;0) {&#xd;&#xa;        comments = comments.replace(freq[0][0], &quot;&quot;)&#xd;&#xa;        freq = &quot;${freq[0][1]}&quot;&#xd;&#xa;    } else {&#xd;&#xa;        freq = &quot;&quot;&#xd;&#xa;    }&#xd;&#xa;    &#xd;&#xa;    opening = (comments =~ /(?i)\s*opening\s*:\s*([^;]+)\s*;/)&#xd;&#xa;    if (opening.count&gt;0) {&#xd;&#xa;        comments = comments.replace(opening[0][0], &quot;&quot;)&#xd;&#xa;        opening = &quot;${opening[0][1]}&quot;&#xd;&#xa;    } else {&#xd;&#xa;        opening = &quot;&quot;&#xd;&#xa;    }&#xd;&#xa;    &#xd;&#xa;    nag = pgnNotation.getNAG()&#xd;&#xa;    &#xd;&#xa;    //println pgnNotation.getMoveNumber() + &quot; _ &quot; + pgnNotation.getMove() + &quot; _ &quot; + pgnNotation.getComment()&#xd;&#xa;    //println &quot;      &quot; + odds + &quot; _ &quot; + freq + &quot; _ &quot; + opening&#xd;&#xa;    println &quot;********************&quot;&#xd;&#xa;    println pgnNotation.getNumbering() + &quot; &quot; + pgnNotation.getMove()&#xd;&#xa;&#xd;&#xa;    //println pgnNotation.getRemainingText()&#xd;&#xa;    //println pgnNotation.branchingStarts() + &quot; / &quot; + pgnNotation.branchingEnds()&#xd;&#xa;&#xd;&#xa;    /* Handle translated notation within chesstree */&#xd;&#xa;    if (translationNeeded) {&#xd;&#xa;        pgnNotation.translateTo(LANGUAGE_CURRENT)&#xd;&#xa;    }&#xd;&#xa;    &#xd;&#xa;    /* Process branching */&#xd;&#xa;    def numOfUnusedBranches = pgnNotation.branchingEnds()-pgnNotation.branchingStarts()&#xd;&#xa;    if (numOfUnusedBranches&gt;0) { // Branch ends&#xd;&#xa;        numOfUnusedBranches.times({&#xd;&#xa;            currentNode=nextNodeStack.pop()&#xd;&#xa;            nextNodeStackAlt.pop()&#xd;&#xa;        })&#xd;&#xa;    }&#xd;&#xa;    &#xd;&#xa;    if (pgnNotation.branchingStarts()) { // Branch starts : at least one move is assumed after one &quot;(&quot;, no consecutive &quot;(&quot;-s!&#xd;&#xa;        if (pgnNotation.branchingEnds())&#xd;&#xa;        {&#xd;&#xa;            currentNode = nextNodeStackAlt[0]&#xd;&#xa;        } else {&#xd;&#xa;            nextNodeStackAlt.push(currentNode.parent)&#xd;&#xa;            nextNodeStack.push(currentNode)&#xd;&#xa;            currentNode = currentNode.parent&#xd;&#xa;        }&#xd;&#xa;    }&#xd;&#xa;    &#xd;&#xa;    /* Search for child node matching moveEng, FEN match is assumed */&#xd;&#xa;    matchingChild = currentNode.children.find {&#xd;&#xa;        nodeNotation.set(it.getDisplayedText()) // FEN is retrieved from PGN notation, not needed for nodeNotation&#xd;&#xa;        if (pgnNotation.getMoveEng() == nodeNotation.getMoveEng()) {&#xd;&#xa;            return true // found&#xd;&#xa;        } else {&#xd;&#xa;            return false // not found&#xd;&#xa;        }&#xd;&#xa;        &#xd;&#xa;    }&#xd;&#xa;    &#xd;&#xa;    /* Process pgnNotation : node text */&#xd;&#xa;    if (matchingChild == null) {&#xd;&#xa;        // no mathing child found, create it&#xd;&#xa;        currentNode = currentNode.createChild()&#xd;&#xa;        currentNode.text = pgnNotation.getMove()&#xd;&#xa;    } else {&#xd;&#xa;        currentNode = matchingChild // matching child found, advance map processing&#xd;&#xa;    }&#xd;&#xa;    &#xd;&#xa;    /* Process pgnNotation : node[&quot;FEN&quot;] */&#xd;&#xa;    /* Update FEN from pgn even if matching child was found and its FEN was correct. &#xd;&#xa;    FEN counters, enpassant, castling infos are guaranteed by starting position search at script startup. */&#xd;&#xa;    currentNode[&quot;FEN&quot;] = pgnNotation.positionAfterMove.FEN    &#xd;&#xa;&#xd;&#xa;    /* Process pgnNotation : opening */&#xd;&#xa;    if (opening != &quot;&quot;) {&#xd;&#xa;        currentNode[&quot;Opening&quot;] = opening&#xd;&#xa;        if (currentNode.children.findAll{it.style.name==&quot;Opening&quot;}.size() &gt; 0){&#xd;&#xa;            currentNode.children.findAll{it.style.name==&quot;Opening&quot;}[-1].text = opening&#xd;&#xa;        } else {&#xd;&#xa;            opening = currentNode.createChild(opening)&#xd;&#xa;            opening.style.setName(&quot;Opening&quot;)&#xd;&#xa;            opening.setFree(true)&#xd;&#xa;        }&#xd;&#xa;    }&#xd;&#xa;    /* Process pgnNotation : odds */&#xd;&#xa;    if (odds != &quot;&quot;) {&#xd;&#xa;        currentNode[&quot;Odds&quot;] = odds&#xd;&#xa;        //TODO: wait for OddsView class, implement here update oddsNode, &#xd;&#xa;    }&#xd;&#xa;&#xd;&#xa;    /* Process pgnNotation : frequency */&#xd;&#xa;    if (freq != &quot;&quot;) {&#xd;&#xa;        currentNode[&quot;Freq&quot;] = freq&#xd;&#xa;        //TODO: wait for ConnectorView class, implement here update connector&#xd;&#xa;    }&#xd;&#xa;    /* Process pgnNotation : nag */&#xd;&#xa;    if (nag != &quot;&quot;) {&#xd;&#xa;        currentNode[&quot;NAG&quot;] = nag&#xd;&#xa;        def nagTxt = NotationTranslator.getNAG((nag-&quot;\$&quot;).toInteger(), &quot;sym&quot;)&#xd;&#xa;        if (currentNode.details) {&#xd;&#xa;            currentNode.setDetailsText(&quot;${currentNode.details.to.plain}\n${nagTxt}&quot;)&#xd;&#xa;        } else {&#xd;&#xa;            currentNode.setDetailsText(nagTxt)&#xd;&#xa;        }&#xd;&#xa;    }   &#xd;&#xa;    /* Process pgnNotation : opening */&#xd;&#xa;    if (comments != &quot;&quot;) {&#xd;&#xa;        commentsNode = currentNode.createChild(&quot;&quot;)&#xd;&#xa;        commentsNode.style.setName(&quot;Explanation&quot;)&#xd;&#xa;        commentsNode.setFree(true)&#xd;&#xa;        commentsNode.setDetailsText(comments)&#xd;&#xa;    }&#xd;&#xa;   &#xd;&#xa;    /* Advance pgnNotation processing */&#xd;&#xa;    pgn = pgnNotation.getRemainingText()&#xd;&#xa;    pgnNotation.set(pgn)&#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;return 0" ID="ID_333749991" CREATED="1553730048736" MODIFIED="1553730048796"/>
</node>
<node TEXT="updateChessTree.groovy" FOLDED="true" ID="ID_728751355" CREATED="1538315999856" MODIFIED="1540215984948">
<attribute_layout VALUE_WIDTH="134.9999959766866 pt"/>
<attribute NAME="menuTitleKey" VALUE="addon.${name}.updateChessTree"/>
<attribute NAME="menuLocation" VALUE="/menu_bar/addons.${name}"/>
<attribute NAME="executionMode" VALUE="on_single_node"/>
<attribute NAME="keyboardShortcut" VALUE=""/>
<attribute NAME="execute_scripts_without_asking" VALUE="true"/>
<attribute NAME="execute_scripts_without_file_restriction" VALUE="true"/>
<attribute NAME="execute_scripts_without_write_restriction" VALUE="true"/>
<attribute NAME="execute_scripts_without_exec_restriction" VALUE="true"/>
<attribute NAME="execute_scripts_without_network_restriction" VALUE="true"/>
<node TEXT="import org.freeplane.features.map.MapModel;&#xd;&#xa;import org.freeplane.features.attribute.AttributeRegistry;&#xd;&#xa;import org.freeplane.features.attribute.AttributeRegistryElement;&#xd;&#xa;&#xd;&#xa;import org.freeplane.plugin.script.proxy.ScriptUtils&#xd;&#xa;import groovy.swing.SwingBuilder&#xd;&#xa;import java.awt.FlowLayout as FL&#xd;&#xa;import java.awt.event.ActionEvent;&#xd;&#xa;import java.awt.event.ActionListener;&#xd;&#xa;import java.awt.Dimension;&#xd;&#xa;import java.awt.KeyStroke;&#xd;&#xa;import java.awt.event.KeyEvent;&#xd;&#xa;import java.awt.event.KeyAdapter;&#xd;&#xa;import java.awt.Action;&#xd;&#xa;&#xd;&#xa;import javax.swing.BoxLayout as BXL&#xd;&#xa;import javax.swing.JFrame&#xd;&#xa;import javax.swing.AbstractAction;&#xd;&#xa;import javax.swing.Action;&#xd;&#xa;import javax.swing.BoxLayout;&#xd;&#xa;import javax.swing.JComponent;&#xd;&#xa;import javax.swing.JList;&#xd;&#xa;import javax.swing.JPanel;&#xd;&#xa;import javax.swing.KeyStroke;&#xd;&#xa;import groovy.transform.Field&#xd;&#xa;&#xd;&#xa;import ChessTree.Notation&#xd;&#xa;import ChessTree.NotationTranslator&#xd;&#xa;import ChessTree.ChessTreeSettings&#xd;&#xa;import ChessTree.OddsView&#xd;&#xa;import ChessTree.ConnectorView&#xd;&#xa;import ChessTree.PositionInterpreter&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;/*************/&#xd;&#xa;/** Globals **/&#xd;&#xa;/*************/&#xd;&#xa;cts = new ChessTreeSettings(this.node.map)&#xd;&#xa;&#xd;&#xa;DICTIONARY = cts.DICTIONARY&#xd;&#xa;&#xd;&#xa;ROOT = this.node.map.root&#xd;&#xa;LANGUAGE_CURRENT = cts.get(&quot;chesstree_language&quot;)&#xd;&#xa;NUMBERING_CURRENT = cts.get(&quot;chesstree_numbering&quot;)&#xd;&#xa;NAG_CURRENT = cts.get(&quot;chesstree_NAG&quot;)&#xd;&#xa;CONNECTOR_CURRENT = cts.get(&quot;chesstree_connectors&quot;)&#xd;&#xa;ODDS_CURRENT = cts.get(&quot;chesstree_odds&quot;)&#xd;&#xa;&#xd;&#xa;/* Globals for odds image updater */ &#xd;&#xa;mapfile=this.node.map.file&#xd;&#xa;mapfilePath = mapfile.parent.replace(&quot;\\&quot;, &quot;/&quot;)&#xd;&#xa;mapfileName = mapfile.name.lastIndexOf(&apos;.&apos;).with {it != -1 ? mapfile.name[0..&lt;it] : mapfile.name}&#xd;&#xa;imgAbsPath = mapfilePath + &quot;/img_&quot; + mapfileName&#xd;&#xa;imgRelPath = &quot;./img_&quot; + mapfileName&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;/*****************/&#xd;&#xa;/**** Settings ***/ &#xd;&#xa;/*****************/&#xd;&#xa;&#xd;&#xa;/* Build Dialog window */&#xd;&#xa;def s = new SwingBuilder()&#xd;&#xa;s.setVariable(&apos;myDialog-properties&apos;,[:])&#xd;&#xa;def vars = s.variables&#xd;&#xa;def disableItem(item) {item.enabled = !item.enabled}&#xd;&#xa;def dial = s.dialog(title:&quot;ChessTree settings...&quot;, id:&apos;myDialog&apos;, modal:true, &#xd;&#xa;            locationRelativeTo:ui.frame, owner:ui.frame, defaultCloseOperation:JFrame.DISPOSE_ON_CLOSE, &#xd;&#xa;            preferredSize: [280, 300], pack:true, show:true) {&#xd;&#xa;    panel(id:&apos;pMain&apos;) {&#xd;&#xa;        boxLayout(axis:BXL.Y_AXIS)&#xd;&#xa;        /* &#xd;&#xa;        Text: Current language is ___. Check tooltip if you don&apos;t agree. &#xd;&#xa;        Tooltip: If the language of notation in the mindmap is inconsistent you should edit the mindmap manually to make its language consistent. &#xd;&#xa;        Otherwise change below settings and click on &quot;Save&quot;. It affects settings saved in Mindmap properties, Mindmap content will not change. &#xd;&#xa;        */&#xd;&#xa;        panel(alignmentX:0f) {&#xd;&#xa;            flowLayout(alignment:FL.LEFT)&#xd;&#xa;            label(&apos;Language&apos;, preferredSize: [120, 24], mouseClicked:{disableItem(guiCategory)})&#xd;&#xa;&#x9;&#x9;&#x9;comboBox(id: &apos;chesstree_language&apos;, preferredSize: [100, 24], editable:true,&#xd;&#xa;&#x9;&#x9;&#x9;&#x9;items:cts.SUPPORTED_LANGUAGES.collect{it.value}, selectedItem:cts.SUPPORTED_LANGUAGES[LANGUAGE_CURRENT]) &#xd;&#xa;        }  &#x9;&#x9;&#xd;&#xa;        panel(alignmentX:0f) {&#xd;&#xa;            flowLayout(alignment:FL.LEFT)&#xd;&#xa;            label(&apos;Numbering&apos;, preferredSize: [120, 24], mouseClicked:{disableItem(guiCategory)})&#xd;&#xa;&#x9;&#x9;&#x9;comboBox(id: &apos;chesstree_numbering&apos;, preferredSize: [100, 24], editable:true,&#xd;&#xa;&#x9;&#x9;&#x9;&#x9;items:cts.SUPPORTED_NUMBERING.collect{it.value}, selectedItem:cts.SUPPORTED_NUMBERING[NUMBERING_CURRENT]) &#xd;&#xa;        }  &#x9;&#x9;&#xd;&#xa;        panel(alignmentX:0f) {&#xd;&#xa;            flowLayout(alignment:FL.LEFT)&#xd;&#xa;            label(&apos;NAG&apos;, preferredSize: [120, 24], mouseClicked:{disableItem(guiCategory)})&#xd;&#xa;&#x9;&#x9;&#x9;comboBox(id: &apos;chesstree_NAG&apos;, preferredSize: [100, 24], editable:true,&#xd;&#xa;&#x9;&#x9;&#x9;&#x9;items:cts.SUPPORTED_NAG.collect{it.value}, selectedItem:cts.SUPPORTED_NAG[NAG_CURRENT]) &#xd;&#xa;        }  &#x9;&#x9;&#x9;&#xd;&#xa;        panel(alignmentX:0f) {&#xd;&#xa;            flowLayout(alignment:FL.LEFT)&#xd;&#xa;            label(&apos;Connectors&apos;, preferredSize: [120, 24], mouseClicked:{disableItem(guiCategory)})&#xd;&#xa;&#x9;&#x9;&#x9;comboBox(id: &apos;chesstree_connectors&apos;, preferredSize: [100, 24], editable:true,&#xd;&#xa;&#x9;&#x9;&#x9;&#x9;items:cts.SUPPORTED_CONNECTOR.collect{it.value}, selectedItem:cts.SUPPORTED_CONNECTOR[CONNECTOR_CURRENT]) &#xd;&#xa;        }  &#x9;&#x9;&#xd;&#xa;        panel(alignmentX:0f) {&#xd;&#xa;            flowLayout(alignment:FL.LEFT)&#xd;&#xa;            label(&apos;Odds&apos;, preferredSize: [120, 24], mouseClicked:{disableItem(guiCategory)})&#xd;&#xa;&#x9;&#x9;&#x9;comboBox(id: &apos;chesstree_odds&apos;, preferredSize: [100, 24], editable:true,&#xd;&#xa;&#x9;&#x9;&#x9;&#x9;items:cts.SUPPORTED_ODDS.collect{it.value}, selectedItem:cts.SUPPORTED_ODDS[ODDS_CURRENT]) &#xd;&#xa;        }  &#x9;&#x9;&#xd;&#xa;        panel(alignmentX:0f) {&#xd;&#xa;            flowLayout(alignment:FL.LEFT)&#xd;&#xa;            button(&apos;Save &amp; Apply&apos;, preferredSize:[120, 24],&#xd;&#xa;                   actionPerformed:{&#xd;&#xa;                       vars.dialogResult = &apos;save&amp;apply&apos;&#xd;&#xa;                       dispose()&#xd;&#xa;            })&#xd;&#xa;            button(&apos;Save&apos;, preferredSize:[120, 24],&#xd;&#xa;                   actionPerformed:{&#xd;&#xa;                       vars.dialogResult = &apos;save&apos;&#xd;&#xa;                       dispose()&#xd;&#xa;            })&#xd;&#xa;        }&#xd;&#xa;        panel(alignmentX:0f) {&#xd;&#xa;            button(&apos;Cancel&apos;, preferredSize:[120, 24],&#xd;&#xa;                   actionPerformed:{&#xd;&#xa;                       vars.dialogResult = &apos;cancel&apos;&#xd;&#xa;                       dispose()&#xd;&#xa;            })&#xd;&#xa;        }&#xd;&#xa;    }&#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;/*************/&#xd;&#xa;/**** Main ***/ &#xd;&#xa;/*************/&#xd;&#xa;logger.createLogger() &#xd;&#xa;&#xd;&#xa;&#xd;&#xa;if (vars.dialogResult == &apos;save&amp;apply&apos;) {&#xd;&#xa;    /* Handle received data */&#xd;&#xa;&#xd;&#xa;    def language_next = cts.SUPPORTED_LANGUAGES.find{it.value == vars[&quot;chesstree_language&quot;].getSelectedItem()}.key&#xd;&#xa;    def numbering_next = cts.SUPPORTED_NUMBERING.find{it.value == vars[&quot;chesstree_numbering&quot;].getSelectedItem()}.key&#xd;&#xa;    def NAG_next = cts.SUPPORTED_NAG.find{it.value == vars[&quot;chesstree_NAG&quot;].getSelectedItem()}.key&#xd;&#xa;    def connector_next = cts.SUPPORTED_CONNECTOR.find{it.value == vars[&quot;chesstree_connectors&quot;].getSelectedItem()}.key&#xd;&#xa;    def odds_next = cts.SUPPORTED_ODDS.find{it.value == vars[&quot;chesstree_odds&quot;].getSelectedItem()}.key&#xd;&#xa;&#xd;&#xa;    if ((LANGUAGE_CURRENT != language_next) || (NUMBERING_CURRENT != numbering_next)) {&#xd;&#xa;        // notation text modification is needed&#xd;&#xa;        updateNotation(language_next, numbering_next)&#xd;&#xa;    }&#xd;&#xa;    &#xd;&#xa;    if (NAG_CURRENT != NAG_next) {&#xd;&#xa;        // TODO: updateDetails(hide/show)...&#xd;&#xa;    }&#xd;&#xa;    &#xd;&#xa;    if (ODDS_CURRENT != odds_next) {&#xd;&#xa;        oddsView = new OddsView(this.node.map)&#xd;&#xa;        oddsView.updateCharts(odds_next==&quot;show&quot;)&#xd;&#xa;    }&#xd;&#xa;    if (CONNECTOR_CURRENT != connector_next) {&#xd;&#xa;        connectorView = new ConnectorView(this.node.map)&#xd;&#xa;        connectorView.updateConnectors(connector_next==&quot;freq&quot;)&#xd;&#xa;    }&#xd;&#xa;    &#xd;&#xa;    &#xd;&#xa;    /* Update properties */&#xd;&#xa;    saveSettings(vars)&#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;if (vars.dialogResult == &apos;save&apos;) {&#xd;&#xa;    saveSettings(vars)&#xd;&#xa;}&#xd;&#xa;return 0&#xd;&#xa;&#xd;&#xa;/*************/&#xd;&#xa;/* Functions */&#xd;&#xa;/*************/&#xd;&#xa;def saveSettings(vars) {&#xd;&#xa;    cts.getSupportedProperties().each{&#xd;&#xa;        def value = &quot;&quot;&#xd;&#xa;        value = vars[it].getSelectedItem()&#xd;&#xa;        cts.setByValue(it, value)&#xd;&#xa;    }&#xd;&#xa;    this.node.map.save(true) // true: allow interaction&#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;def updateNotation(language_next, numbering_next) {&#xd;&#xa;    def notation = new Notation(&quot;&quot;, LANGUAGE_CURRENT)&#xd;&#xa;    /* Translate each node */&#xd;&#xa;    c.findAll{it.hasStyle(&quot;White moves&quot;) || it.hasStyle(&quot;Black moves&quot;)}.each {aNode-&gt;&#xd;&#xa;        /* Breadth first order guarantees existence FEN tag of parent */&#xd;&#xa;        def fen = PositionInterpreter.FEN_DEFAULT&#xd;&#xa;        &#xd;&#xa;        if (aNode.parent != null ) {&#xd;&#xa;            if (!aNode.parent.attributes.getNames().contains(&quot;FEN&quot;)) {&#xd;&#xa;                aNode.parent[&quot;FEN&quot;] = PositionInterpreter.FEN_STARTING&#xd;&#xa;            } &#xd;&#xa;            fen = aNode.parent[&quot;FEN&quot;]&#xd;&#xa;        }&#xd;&#xa;                &#xd;&#xa;        def text = aNode.getDisplayedText()&#xd;&#xa;        if ((text != null) &amp;&amp; (text != &quot;&quot;)) {&#xd;&#xa;            notation.position.set(fen)&#xd;&#xa;            notation.set(text)&#xd;&#xa;        }&#xd;&#xa;        text = &quot;&lt;html&gt;&lt;body&gt;&quot;&#xd;&#xa;        if (NUMBERING_CURRENT != numbering_next) {&#xd;&#xa;            if ((numbering_next == &quot;white&quot;) &amp;&amp; aNode.hasStyle(&quot;White moves&quot;)) {&#xd;&#xa;                text += &quot;&quot;&quot;&lt;p&gt;&lt;font size=&quot;1&quot;&gt;${notation.getNumbering()}&lt;/font&gt;&lt;/p&gt;&quot;&quot;&quot;&#xd;&#xa;            } else if (numbering_next == &quot;both&quot;) {&#xd;&#xa;                text += &quot;&quot;&quot;&lt;p&gt;&lt;font size=&quot;1&quot;&gt;${notation.getNumbering()}&lt;/font&gt;&lt;/p&gt;&quot;&quot;&quot;&#xd;&#xa;            } else { // &quot;Black moves&quot; and &quot;white&quot;, or &quot;none&quot;&#xd;&#xa;                // nothing to do &#xd;&#xa;            }&#xd;&#xa;        }&#xd;&#xa;        if (LANGUAGE_CURRENT != language_next) {&#xd;&#xa;            notation.translateTo(language_next)&#xd;&#xa;        }&#xd;&#xa;        text += &quot;&quot;&quot;&lt;p&gt;${notation.getMove()}&lt;/p&gt;&quot;&quot;&quot;&#xd;&#xa;        text += &quot;&lt;/body&gt;&lt;/html&gt;&quot;&#xd;&#xa;        &#xd;&#xa;        aNode.setText(text)&#xd;&#xa;        aNode[&quot;FEN&quot;] = notation.positionAfterMove&#xd;&#xa;    }&#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;" ID="ID_1366723547" CREATED="1553730048797" MODIFIED="1553730048808"/>
</node>
</node>
<node TEXT="lib" POSITION="right" ID="ID_328124690" CREATED="1521562135185" MODIFIED="1540216035574">
<edge COLOR="#7c007c"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      An add-on may contain any number of nodes containing binary files (normally .jar files) to be added to the add-on's classpath.
    </p>
    <p>
      
    </p>
    <p>
      &#160;- The immediate child nodes contain the name of the file, e.g. 'mysql-connector-java-5.1.25.jar'). Put the file into a 'lib' subdirectory of the add-on base directory.
    </p>
    <p>
      
    </p>
    <p>
      &#160;- The child nodes of these nodes contain the actual files.
    </p>
    <p>
      
    </p>
    <p>
      &#160;- Any lib file will be extracted in &lt;installationbase&gt;/&lt;addonname&gt;/lib.
    </p>
    <p>
      
    </p>
    <p>
      &#160;- The files will be processed in the sequence as seen in the map.
    </p>
  </body>
</html>
</richcontent>
</node>
<node TEXT="zips" POSITION="right" ID="ID_188436602" CREATED="1521562135191" MODIFIED="1540216035581">
<edge COLOR="#007c7c"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      An add-on may contain any number of nodes containing zip files.
    </p>
    <p>
      
    </p>
    <p>
      &#160;- The immediate child nodes contain a description of the zip. The devtools script releaseAddOn.groovy allows automatic zip creation if the name of this node matches a directory in the current directory.
    </p>
    <p>
      
    </p>
    <p>
      &#160;- The child nodes of these nodes contain the actual zip files.
    </p>
    <p>
      
    </p>
    <p>
      &#160;- Any zip file will be extracted in the &lt;installationbase&gt;. Currently, &lt;installationbase&gt; is always Freeplane's &lt;userhome&gt;, e.g. ~/.freeplane/1.3.
    </p>
    <p>
      
    </p>
    <p>
      &#160;- The files will be processed in the sequence as seen in the map.
    </p>
  </body>
</html>
</richcontent>
<node TEXT="templates" FOLDED="true" ID="ID_1849114914" CREATED="1521565216661" MODIFIED="1521565216662">
<node TEXT="UEsDBBQACAgIAOe+Pk4AAAAAAAAAAAAAAAAfAAAAdGVtcGxhdGVzL3RlbXBsYXRlLkNoZXNzVH&#xa;JlZS5tbe1c+3Paxhb+/c70f9jSTMduA6yeu6pNMhhwwgSDCzhpb+wyAhbQjZCIJILT3ty//Z7V&#xa;A4QeBMclcdvIrRHSPr/znceeXed0ri/QO+a4hm1VChOHsYWpWwwJJbWEC0+++dfpt8Vi30bvDL&#xa;ZC3sxw0cQw2WM0tleWaetjxKuguWGNEbS0MKwpcu2Jt9Idhs7XrU0ce45mnrf4qVxe91Fy7aUz&#xa;YhPbmbKSxTxULPL+dM9zjOHSYwOHTQ3Xc96j3vPOq0G13+82z676jV6l4DKTjTw25gNEcMUqWf&#xa;qcoYtq+6raqhQ8Z8kKqF29aFQKLd2aLvUpi+ok6r3TzSVDL6utKyjLrGmhvEe52dLaq5z7fr5X&#xa;OcBmXe60vD0pjk05DQ5/bNljhvqNX/qVQm3GXLcPEBdQq1Ortpr/btQHvf6vrcag2zivFKpLz5&#xa;7rnjFq6e/tpVcy2Ttmlhzb9grovNOqN+owCt10oX4Tbpv1gUyIoAhYEAqo1m1U+7yEoIiCSCil&#xa;giTgArro1JvnzeCFjIkoqZoiU6jw8ln1cvDzVbXdb/Z/rRSUEkYLr/DkdGbbb0KxXOiLnvfe9M&#xa;Xy8CYiE0XW6J0n4stvZFtjwwO90s2By9+4cQak3qJqrd982YhIG5tqb+QY0BtqVXv98HWspQSf&#xa;2C3Qwh2sm0drvQEa+g0J21Qsp0byicN8NTM8MAX2O+buHCs0+Z+lNfI2Y0yUSMwIinm6YeXM6b&#xa;zRLkTqg4YIZFjt154PatVeY02A4FH18rLb+aUJXxqtX6N35ay+/YkO2NslFIn1uuFhQNExm+hL&#xa;00u14UOaP8U/D/EzUx+9+bKIr/5ZiP+5HA/0MTbfpcsc39iDwXIvoJdkw4mqTy4H7auLs0a32X&#xa;6GKqh8dD3+8bp0dF26Lh0/PS5//93t+OSbf10OLjovG/77o9e4c1Pkv47831Dqv0elp/BcL85u&#xa;XgtFevP0+Okt/L95cFThjR2/vv7x+rubp5tG29Wgz6PrR9fjP4TH0gdo6/Vv16ubP/Bj8cPxun&#xa;/L9nQ+vUtgGHMsv9LTubs8/u1RbPxPr90fHgVDDe6g/XVv4YfDvCU0cMQDkRJ3FqUp8+qGC/HE&#xa;ezbus1vv6BhVKv9DiS6PT8shYBlSKCfFsI+oPiKXcrnp9mGQPl8GC4iGLA/0JpyGMYlPIXhbqV&#xa;hL0zxG4RR9XTkJyzO4R7zSt8lapbXSuqVIa1+w90ffv13a3gnv0b853tHuH+EXPnzQLzQH+aRG&#xa;9zrR4A0CkEMpln5AR6+Hq5tjBHdAQMRZCE/Lx7GW+ejnJdf4nfkSQnh7RLGSqUFFA1suxrrHYA&#xa;gwwBgQeyKQ0eDINm1QN2ANtPi9vrDdk9Uw+CzOX2Ng/01GLa787eV8yNZV/bLiTcmzm5bHpsyB&#xa;KQIKm+YrlbD14OOp8BNOjifx1Rf2esLHKTz4Vf4BXToQ9Vge4qAEpdHK8GaIzRfee+TpQ7Blqx&#xa;mzkOGhle7CjB0HAmf0QzmjvS18NwzIEP2W7B/FYAwJ8CiBUYIL/PqQMeGPzHfXiFBwR8tbP+jR&#xa;H5vBfUBF+MHwLDG6D0Hd7R6T4wvJGtICBOrXWaWqRvU+bBuu8OM+ZugvGlV89XF/dx/n8+Wrj/&#xa;vq4776uL+jjxv+FXxcxpso23K6cOwFczyDATd4UslzGOOGt1KYGWNwfZuH9njsVgruzF6B4wvT&#xa;hUEyMFbI3H7BSw8M6H0wASFsFHW9FN7UtHx5GNa0UrBsC15NDG/g2QOeW13YjhdWOYnXgYYtYL&#xa;PtuH528G383dDWnfGA25tKYc7GxnIeDgc8A/PH5Ebuff3YHRjWYK4v4qtxkBk82aAWrMb9XFxy&#xa;AR6U8dNsA14gDBwqBfudbhbQVbt53uleDHrPq5fr0CKROxPlMHkGHU3AmKEetM8f+2P5eN8Lh4&#xa;GJMiw2LqDLTq/Zb3balYJjTGfeejTD5XAYphTz24uSCajWaXW6lcJ32L+yGvHHGaT5qo6hm+jK&#xa;AnihzYteIRw/Tx+edVqxrGMfeqvFcQb6R4PZa2R+gdKYgb033X3HQe/R1Ya9n6M3Tsc0+GfV2o&#xa;tn3c5Vuz6IXk38q+AnhgfQ3jOQd6tx3v8cg5yYNgRZoOi8DhtPWcQObjsG/EHQ+Mi0l+P1ZCaY&#xa;/0D/gR4E0+k2av2g8K4xZwx134GHCsID7OKnqUjQzlaSa7dyZGt8XFC1Rrvf6OZl0NFFsz141a&#xa;z3n8MjzJ/dJg2DIEaK5TdeTgpiyH43mFNAYStCAdWrPbjpdVrNelB8k9k0/c2CIHsZ9StIcknj&#xa;l6IRVaWqyge2kzEBTFvrpD1orPrXVwQ3CHYWzOK6tUaPYv6z7VQSCvOM2c7U0De6HZ/a2uhmT3&#xa;Sjs6kew5lA/GXtM/LGLd/C9JdfuSoC8cCbPcTrWzJ0Uf0lQlPEoRj3EC3ddjr7zDiypneccc/T&#xa;HW4IEUT3xs558+gbYiQzh8YZk8qj9lmnW290o9JSWDh86vc+aDVfNAaN+rPGJkmxRX18R+rf3/&#xa;wmNibvGaTs2ubMwX/FZT5jt/qUC+l+luSOIghDn/jruE0MHseNy6dZqo8KKfFtO7ot803b+xi1&#xa;vBHFNoP10QiidNuBRUd5YS6nsGAvP4eCujOaGSPdbPLgvLRZmQQNxNStD8tbU+cBUoo+4Xa2gE&#xa;UZC5Imka39bL5tLWiiQiQxvZ8tYlmUNK1wn9k7xmjGkxB8Td7/ldu0eqNfbbZ6vFUAwZubT2Dh&#xa;dTpj+viJvwLj38rR19OhPX7/JFyZPQmXdnVmMgg5/PMlQ0e3RrNSuKzzi5yWg0rQit/6aTk2iA&#xa;Rwazt1ubZT8a30tBWL4BQVTRFVScMpOAE1VVGy4CSSLAr5xwPugfK6Xkio+KarYw3fvhlaTnkR&#xa;XutswGV4lbvts59fnLW7aIVe/PzmrZ8UEA4nvyqa6nNWtgN/jka6hVyOdHjwhzmshHiqEPmCcm&#xa;e6aaIwkeXndTaz9VM7blJKn8wGJm8ETAhWNYoxTQtYxCJWMs5/iBqRiaTmWszniaWtEkhTU0HN&#xa;QA0VyS/1sve8ed6PlSsKwnZBWTwkX5IZo2GYJRJSVocpa7gojA0TwgPWrdMyiiqqoqRgkoUWxR&#xa;pR9kVLEUuiDHOhVMVYFUDLPicIqxAEMQVCeyTFrAKlIlHAzKZgkERCYPgZMKj8UFGuVUjBQEoc&#xa;BY0SLCmahoVszoghYzQBK5oERZUvQZk0Wi8NZln699/d6ifcBmxZ23V8H53AEjRZAiObPIEFYM&#xa;IlUzkPTCWFWhHYQ3z2YAHUWgnIkwGbFOImUpnIMvyOYIt5a35Qsc2zWfdb66zjjegmBtMLwCHI&#xa;jLs+Vgt9Ze3ESsAUzBL4IyVDARWikUx/JAuqIqfBkiOOCSoRFCLm2CUhKAVzU0QNgJeUw4MVw2&#xa;gSM9YgUQ3LkignZk9FMExgMrJmr2mSzN30nnoXGmtKZCpBLKXlEAgHVkqTABEMJk59GHoXIxSa&#xa;lnZSiWIiqIIipANFUYHAhmY6PqqCeUszSQv1SSUUZghalcMkJdBOTZHAtEuyJN0XtSzCsNs4ZS&#xa;C21bAkYy1jmjJRKM0434mxRKTcg6op/47DWRFgIExKJDn+XRTCghKgDpMRvoRnkw4X7337LTpq&#xa;V58df2pY5seC8B/EiSyeSYmReCvDshaxRCVBzYjQiSqKckZI4gtYVNM8FiP3AVaGqLJKc4gsR+&#xa;UIXx9gcm+vewhxvOJBc7hPcLdQOe2zcrxYKAGFExrspbRtlomsQHCNwWhkiUDUfNe+p1nG24LJ&#xa;MctFIQQ49FUCCXQsA992p964B7gj5U6IftnYtWeMDNMAtRrvdgmyIIDhV5PRPZejoMoyzQprNQ&#xa;IxupQRidFAYgR0k1JByAlgixCKhZ4UE6ypWBQ/U3QRzhk6xzxQFLO5ywOtNHc1TO/A3TCAohCf&#xa;yALQXs3xjknu0gNxF5YyD468+SFNzbRdvmW1KyqG5bIKgpQyhAjEVXCmAZI0rGYsIWQlXICKPI&#xa;0jyjlLiGLk9TVYDstUVCj5vMSFkF+TJNAvmsPcDG2VBALk3TsYVuUQCghxZb4Wy4YCYuaA4BBo&#xa;gzkQlIPxVn1wvE2EVfFoxtGjoyc7yUskiBsVWczhrpBtgGSRCGnuEik0uhIF56rmJppIaHNlqm&#xa;jcxkmf2eYCP1VQmMx4QcA4YxkHzIVl6t7pExoBofGkCyx1cpgbrlsotwVEVuUDMXf6cA1umrjn&#xa;Jk+1M8+z0bvd8YIIPKNKDnHFjLxNIMWMaIGGATVYD1WFhVletADMDXwkkBtCFVH4XLmItafRIO&#xa;QnWM40ukDdhKeReOgDXl/Q8EF49XANohzjVQSeTKjC91K0HPC0DPAIR08+BHhnU/HBoTfMR08W&#xa;FQGgINnYCWIedtJhsCMPDruIeUoG87CoiqrkL1Qy0VMy0FNVQkVyCPTGD9cdZIEH+gfxLZbkHP&#xa;BIjs2jB1Hb8cO1eWoGeEQCKFSJ5oAnZv19uQR01Xb8ofyfjulEvhumjmOvTMN6Ex1lrF2dNWuD&#xa;2lX3ZSP3EBUYqH632u5dVruNds3Pm2L+R/nt/iA45qGF386rF03+h8E93XJ7zDEmBVRv9PrNdj&#xa;U48OBTEitEhrjZP99S7cLLWmtdACh5QvBJATXa9a0XRU08KVL5JKxU7XY7rzh27YZfNv79XqHD&#xa;pyheFndis8zkjpTDHYIzUptamHzHRKV8FZgdYZFwyUcIJQKsbKUDMY49XC0muw7MpYREYfnGsw&#xa;95MsoKCH2/fJCAsD15uK6FZDBcwpKoqnJ29g3Qy4sIIVQ8BHpT9nDDGpoFn0AU7itynAvfw8oO&#xa;a4RDwNcpdh4cesMd6KmaKvP97Dz0pJy4hoj/FPQi7mkZdk+B9YgCK/Uc8LJSrvAWK7nnpg6xTG&#xa;Ffxhx2xmN3DaooPZbwY5l8Onm1VI4m6OBjG6OqKFKqULItI4lqMghOTZmHQEYUrGs6fqCl4Lyu&#xa;QPi/iqTlZBblKGGsUtAUEpwDOEh25g6I/4l7q8Z8ilxnVCmUynA7qI7HttVnrlfmfyM48CHn+x&#xa;BYJqWF/4+F7UO6fXZbH+7NXF/A5/8BUEsHCIcze8rPDgAAMU4AAFBLAQIUABQACAgIAOe+Pk6H&#xa;M3vKzw4AADFOAAAfAAAAAAAAAAAAAAAAAAAAAAB0ZW1wbGF0ZXMvdGVtcGxhdGUuQ2hlc3NUcm&#xa;VlLm1tUEsFBgAAAAABAAEATQAAABwPAAAAAA==" ID="ID_779687826" CREATED="1553730048811" MODIFIED="1553730048898"/>
</node>
<node TEXT="lib" FOLDED="true" ID="ID_1750925238" CREATED="1522351097503" MODIFIED="1522351097505">
<node TEXT="UEsDBBQACAgIACEEfE4AAAAAAAAAAAAAAAARAAAAbGliL0NoZXNzVHJlZS5qYXKMemOQJkyXZd&#xa;m2bXfZtm3bNrts27ZtPmW7nrLtLnZXddW+M7Mz8c1uxO5kREacvHkj/2TEuXnPSWU5cAgMEBgY&#xa;GJD8DhdFkH8ZOCAQIGLWFm5u6q4WFsyKTu4m7jZOjkxm9iZubl/TICD1fPDe6mtLbFy5N3NnVB&#xa;R+qUkz+AgtmwowOsIUfQik4hSw0mA/UKLkXJ+G5hx7ekFRm3RrNW3sHOqx7AI0YrfWVYlRyjTt&#xa;9NqdPhzrt9Y7dD8CB8vOCnnObywBd+MP399v4dlPedlsbFaW8wrvV3pK/kQgWHZEEF4Bg4TxHR&#xa;L2vT2UBPCjUCOk1CSihwVDe8IeLChXtXttfom7hG6iWKI6RhQEe71GCVwxnv6c+CayeSOi3Qgi&#xa;yNWopqvuVGOYMAnDD4b4w1NVpKuRSQLsxl5P0l7ezotIYyiu4MNZhLCQpuw5mHCLOZ9RAjg4MI&#xa;hhf7ZuZmzCybEuYslOxG8unJP+8D7hID0vQQXQEBAmfVpxxee7t+LtopAti6HmksCqYRjpb8iB&#xa;z4mykoszWPvYMSwG4OazdOtNzMLNlPqP3P0xJvkn+QqR3Dt3JHng6s45cZcYJ0GTPl3iZo+EMG&#xa;dSi3odTc1KC1vFukFq6NYdKMKHhbICo5abkr5LUFgkwEN/+dy8BgPPLyPrEC8hTUmvuqbfHD+v&#xa;uWc1cQU+bHwtPNsQKw5mTjBYaSrlqxIp1hws0tuTu54qeXP1Po4JNRvuw7R4QMAaUWmaC9pqMg&#xa;BP4MwEdnHwA+bkbLlvAyTTXgMviVoPHpHF3C4Z9HfLKVeRcEcGDotExzxbkXLHvFRVtvTQ+t3k&#xa;kLL97VfWHP2VL5iYOTf1agpZLzlnt7ybMUzxTit5vOrJorM9ibZC7YU5vUk6vOaQLXgMxRs8gv&#xa;PMui64/KZu5EFKWS5UifnXbyep3EzUx5fFyVFmduMaCvdkUIuWtTDjFg/dcGKORJ6fp9WTB2BQ&#xa;bUNUnABLcMsRhooWylhHdpLZvMWZ/CbM4qs6+7swz19+RA3IkSXNk85eDAQi3BupjztTYlDuQ6&#xa;/8XRCeTUdgS9p6XQ7fKAZ1Fjav1PGTbhWUXeiezXS9CDQRaIK+PxMToNKmHZFHRqIVcbywizP2&#xa;hDsDBtB9ZbYFwJeG7op2xTxhXiDIBGQySLT2HYWFELqKkF9Z+BBJlS7MudFQTa7AlNQqgFl3sh&#xa;V8QJIwbTUMkZYSzxsEzNrtfM9jPpKReZRTZaCQcFUXLUeNW1t8tPelIqWc2w4h9utpGnqDsLZ7&#xa;h8sILDStYmKviWIXWrHx55jziAYMpU3ADuy9qLagi38uyVFzfAsON46y45ar5mt229geAKs32D&#xa;+XYV0Q5dpofzHE+atsVFHukaUvU+G34C9QEbrMlBxCO3TYBmCqJTxkYnNzx5e0NzFfM7qgNBJe&#xa;LIToEslYTQeLHSm0iWSNUVu1hAkcUmcKcdMPVKacd9+C/BxBMClthU61jlLA5GhMKAXJSw5aN1&#xa;50vSJ5rgXkT4zup0iw5Ko5fPOKheubRw+mmzhfPmxfj3fu7l8JWok7qi9Xyb28bx6a9byVK50r&#xa;lYC/6pI3QA9rakYeWcrYyootI4lvOiRf2xosVH11DTWXplRLYoq/dxfP7prukj6P1DZGVjzNi4&#xa;craXrUv94lbQCIoWIi1P4Rk97rCJKR9J4+/Lz+GX3FR0Ml0zliFDQvxJQtmC2/uQlt7GueQBDz&#xa;D4rnxaKX4AgVydTL5Oj5lt+TJocq9Z0RBKVUn5HCfDuAAa+nMHZUFkMn8piH8e5qZrt/1ZFwH3&#xa;y8Y45vVm54FdPB8Kb4kx+SCKNvuQ5iWVuComtif4wQaHxwL/HLre/hwyBt59J0ZfhyUvhF6IrL&#xa;F0Q2dh3wvNNlp9AJsnbu0rTYldULofCWDk35w8HNG0U6NbXtm9t4QHVb7QBaPTbvHzYHYps8yY&#xa;SiVJjIRfxCzOOuPDydfsIpzzsdqb5EkIfWFH0JaqT0Ag6LCGEcEG+RUgNkl0+VeCeQD6WY3kE/&#xa;sxIPTJMmhoyTFop+DmNAhZ9YBe/uCng6GX2XKPD2TYdKIOwgyEONIcjipLFmyW7U6Efuu/bGNa&#xa;ycNWTUz9nhd9hb25TVuLppPVU4IJ5I5vZecXFwcbW1LYXv7LSXF3vYoXNU2t/V2Nle21rrbKxt&#xa;aXaGS7bYBBHemw+2VtNMIiIi33VsslX7zx3oKL5Dt3ZabyPBubidXT44xXg+ec4vHSrEWNoQ7M&#xa;N+S2StdYvp5wQI9sgP+BQQ9p7dPmvOHhs3pf5EKj3+dK5f7UBP7nfya0lew/AjtuxWFoOeOtIB&#xa;vGlNEGA54oVeIliyZE0ZY4VuIpyxZM38NB+MZqjl7zwkBAQXBTseRtM8ByGFukI94ebNJIxlQj&#xa;HeMRkfmCgPD80MTRSliKSDrphAabBzJ/bC46qrObCJkMkVlj3on9FkMZoqi5FacfFYewnh1pCu&#xa;onMsQnOpbQ3LtriaRlwVScedYU132+5dSWWl5ohO99LYe3lAA5YOowyOxb/LmJkimfWPRsa60q&#xa;aYLZvCgi8KJoxxQ59wGayUZ4whQ9MRNH9ozxkjhsLjrP7QnikqGOaFQkRYZ7M2dyb9fSXsrmZe&#xa;lCiaHDxX0iI23anI07M7NOd6Y2o4EDwsgcDJam26KN8D93xDabH5KLo9JFfWwOsNqpLLy78qNm&#xa;z/lH0vC853OpJ/hNYeLbdKHDWdprSw+XIlmu1ezPniiIgodVvQPsLimWbjdGTLy192EyiJ2D52&#xa;115Nc9uRb20Fwy56H8B0MxZI1ZkdzF3tLdm2HFAGHR1MmpKyriyRszsnkZ1wv2hCpcOVjxw3he&#xa;4FOYgu01GfSk+5XECy0sQ/ZIiNdCyI1hFZaKrGVnfqyrs8d25r1pQO2h+1VHrM162wgF+3mDw9&#xa;x8/rLncUGt7KbFjbpS7nX7z4gUYZM3x9jJooYzAijFO496tLaeINTbfq+EMmIhy++hFUpk7wyy&#xa;WUdjU+YH/SJOQGoUcbA0EqC0sgv+XtRU2n/thhdYcQwd2o4hi1Z0yWiRac+TaNggv6LTH+Ns29&#xa;OuJkjwnKgEIpTqi86wRi44g/kFYAxNp85v2evi+XPxUb4iQDC0+LvLd8a3yam7THnzP7GE7zxX&#xa;1M6ahS/0CYrvnXbzbJZbaZzFeF7EPYuMJhMwIrIbufkCvc8qrFp9k3mdjUgkwa6c+7lunUElsx&#xa;U0HTPx4gEroeuAvSwtBL8LxjiK7ZRTC34t5tTB/BinuWkDZRWwKRea6eV20eZREhQ9jtxG/NHR&#xa;SezJURg+5/QIn6ATI32YHEdz7b2DJnz8MiV25OHwTc+DFQgqFG86F2DzqXPI++vxxm2mELFN75&#xa;A8NlAjUGaMelmb73p/vnhhqPubLOuC7XdPcEvmY2Z8sITxDW6g/3tF2HaBkz96PGA5yvaw5lKR&#xa;xQlarNLXzegOfpv9Z4A5Wg4Toiq6tk+I+PmmUmiF3EkdRQa45jV09oROcyL15R03EMDOHWGhdH&#xa;D0DKkQiDKo49Ph08tBk+IEOwEi7e6X1vX5Jq3P3zmXwWkV7G/nj4i0X6efTJhfnzCc8ENpYqTY&#xa;SzD1Eyq3y0JpyoJhQf0jB+43eGzJ4Q8xqWkEuQRBJeVGR/oyzN3Pyt52zmV3Axk9a1+CnTJ+Em&#xa;YJJg0APFzpUVZdpTEd2qcrPCQTfrGnnULL/h+l4ay7sv6TfYcPlMo1hpG/bEj9vgWKGEZVpYRd&#xa;+D+IkUmElgNCP1UCiAWsl5GvdHynBGfoGrfrIc09YR3GjISQ1nJYYWSf7AULF+tVxhrKm4u40/&#xa;Y/nIUYiWcWgH0QGKYJYyJK3iaWLNoqzWnSfnRkPpvHTtqNTTzbgqfpAkSY4TMSxNZTWql1Zeag&#xa;8rCsHZCFFXr4yzA1Ec2rqICeP7RIl0GohSckCV4KS2sYZHlOC+fQ0dwjkLiUhg/oeApbpcjClI&#xa;/dhpHOyc1p4mr9E5eEQNg0m9S9qkc6RiZEyZzLl6RG3NG/dYFNsKaYTLuVjh3eDzR/rEJoZ+eq&#xa;p/qwlSESc2yDeIjjwkM0HwL6x7WO2DhioPbSSnjeODVoLb1ZmOlm4tCws35onpQ8P2dIBA5emJ&#xa;YfzpSYHj5Y6e/eXOTLtrd+fq9GnBjKuLU/bpkWFB+kT/qaah33rqAU4wR3uExYNyvsVDiD99od&#xa;+LpuAbXB3YHYc2pO3viC3adQyiLWsFGQRM3XD+VXvMDr9EwFi7hCbqm159ySudV+5+/y2Fu63y&#xa;dcfOnQO58+VKU3yll55jzp2ifG5GNr+DnqWfhUOzBgMkjSNx8IxjZF7pQYMr9F/DfRmc6ZDX0o&#xa;OWIS8C09vCUyX3Lf6GOlI7DLuiUdgcdCTu4cMwsZLk1/P8x/G1o3O85oKgC5e80nyAEofziMqv&#xa;aOpJYkOq3PwI1TzFRCPkfl5mEDn6cykCHfQm1AiTxnfnPZiPA9cWrs5X8CApy+1Bva0C0ZRQf5&#xa;imcHuja+VxrbPXeDavNW43rUQ2rzluN2Yiq7vy49n+uFkFAYvLU/PLrsf07uvx7N6Cfw9EqMs5&#xa;UchNRKY1504BR97NLWz8vXpPnY1yp/p6p/rYgwxMCxgE9j7HbjXaKTWjMYopTL5MtzwENgd/Ue&#xa;xcGENPkkNX8SPdK/36afn6k1IZ7+3ndyw6Bi+64gMIzzCta4jWhe+gBHKmDktsQY9bE+gZDPXD&#xa;L1/fv2P5RbiOqoqLDDsi6IyekQx4f0F2GHZBOxbj3qtE7xbLGFb0aW9UfRAKZAlmQAjKccTV8x&#xa;5ISTWQmujT4e+g3EpspggPsYANF06VHEdPiEtODe5BwPuBuXMBWGIPYTgPLzqPxCLD6eWVNl78&#xa;9neCZ6JgPjT/jmgSeTozwYEMusMhDVp+OFWf9xRvDApvjKEJjEQ+6pMlFlqidFzvnXLvHQHSxB&#xa;yZx6rpoWOiYbFQv2N+AqNiCo5c0WGVs8OBxvKa3b+wCd+3d9DcaG29xEcoi3dfGPt/Pd8A/pfb&#xa;AZUH2pGKSMvJFjx6fAQa9YSbGaXt5BPLenx5mp52JvOpzkXkM39hFHqIS3WgeO6O2a+JbG4Xd5&#xa;XaCn5SSx3AE3Bs0e8uvNfvpD5YuA6ivm/B+F/DFFS5Dx40ugflUnnfUPgzx/5V4eS1NSB/OEJd&#xa;ZNxQmSSKZRaMYU6/K1wcyEx5O427ZVsVFLsrbRLDN6xAbKRwck5woFHGhzuBwoytocHS6AmS/Q&#xa;jM6GtksTEr3tKm4ap5aMsaUSv/OA98Y6bbHXz2Iw6tGbUEPaHyghzLlH1rHGeOimzDg7NJv9uI&#xa;+n09Nds64Z0b00nrU3vSniaqU/6x0XaP+Oct96T/D3APrb1T/MbjW7GFqV3WAoSZEm2wMvY6/V&#xa;itvpqVVF4A6iGtsWOWLjWC5njSQSdjNWOs32adnfaL/U6hs0IuXP58D8Euoowt1I+tPlv1IHsn&#xa;12Iupc+KslvQoq9ERTbch6zDMqbmG6O4NeEgyKQ6rqyllaXbbU/7nP0d1lHQDUDDoKXiT6bo9A&#xa;HYeE5R6Qn+Jm6LGqIUZW/s+S7Vt1GUxzHGYFJAwu6t8nQfIoOD51D3+FPdmaU6i5aFLFeMZnsI&#xa;UlcE0YxWEKnx4KStcDqLtwPu8c5SN7ZRZFj702OL13qVKQK+nQlYhDgisQUKrNoFUdhyWGQYUW&#xa;ZeGyzaJUYWW92iHklS60X/IklRHnhFfSdvJ1Cu20UIKtHklN9wDBNSo4c+s9kYMqo6DYO7JflM&#xa;1+XVb9AY3q9Kh/8ein/wGvkt/k8voxU+vw+LBxKvv6bZ/X365jo5jUU6s6Fyrax4h6KoKFLToi&#xa;FR9+08yjuHWhsillZ1l0Lu+FOVdzb0pixtvgaqsilCElPoL/ch4x+RDvdpUYE5UTzi8mVGyjgn&#xa;3NrLIlLUcfyjyzxd1nzy7wb9Av7KlDYx3GEXSGh39GCyHmbDRebKrgKOkE2yFjV7nXlZF5hy9f&#xa;Z/WqmsSVADooJjNuhvWXSPwXQ2JmEATfzZH9guazoOmDVeG7pEcG1CDgTDrMI+FtQZxsoqkC3a&#xa;3sUcsMF0BWu4Rmb53r3RElSGCrEq7/S5bdmsJVfbtF/j1QjTKV6JkDp5FVPS+I2GmWqCuXl0NB&#xa;rJvK7biQMvViVCu/enDi2flV9xXTBs3YdypmWyh6fqcHqbI4+aKy06fbMV4/aDmfMUF1Ev8vZI&#xa;So4Y7F18mb1zLbHtPokHPJ2hqMzitTYiPIXeA/t+aAJ4yq2iHOUg6k5qEexVkvliboaDkBPNMc&#xa;NkPEo6SWdP2/V9YR6MutrHnb8UD4+QGt8gCqgl8Bd+8+i2ybugnfumQc0rET0sDrkWV+2u1mBO&#xa;SMt6tzgLiqvRj2JwaI7DP4Yxaf7uh9BK3J/BOA3M0SNvk4iHV+XciJ6zGws5mfPM+x21GIryui&#xa;LKDNt9je7aOMPgJaZ/90Jbhw95DU+d5PfPIlaV0wkjN5d1SiAkN0F4E8aRB+zukVNHZlt3E39r&#xa;vM/EroULBt3sETVLlG17FSHfEtRjO9yOAc0XZ5B7IwS96y/CR6/NDJJE8IrQ/XY6AYNUkXlawf&#xa;C8N4I8BWXkpIQTWfkDvTqcUj5Ucp+SmEqHU5oh7zjEzOh0N6TTyB8uk0FNOeMt1du8EJVJuel4&#xa;Jzlj9bI4cYQBdKzFC85pw9s0bD4aJKdKwE0RxBZs4pCiN7jnUmstPF8xdOhibOcQyB6o3wMFxK&#xa;MPzig2aUn6opCQePsaysrWQRFWqNhWu3P5K4p+eQBuw7phpJeFjbPCOhh31mmkmE7twXTdrrPG&#xa;OmkX7zVTjl/ImWHINYHboe8E2Qhj2PZBEzlYpISjtkI2GEHmhBt4+4mfkReCSeZkPRsh34NqMi&#xa;I+IQfOQVwMs63XkaPtafD44LYcPxfB0TBLfGGQIHrvKaS0t8E0oJSBw2w37RmCQU3VBgi+r8Jv&#xa;WHQjjia26AXn1+mVPxScMe0d2+rKU0mF/vaOa0hlrDwkErTmQoBGKz0qkj2tEKccxfljixcMP2&#xa;yiYMQETlsj4xjCkAlKtWzPrWJ15SBU9Ipy5NMPDXkDdCdRK2onloY428f8Fpx9PLGFn59ksPKB&#xa;WWDtEiodqjYNChkOccsss2Ac6feasofvo//UUfco/IOm6qmDTMzLmMSJkSn9ugMFTSuTWl2jOa&#xa;ecQh+dQOay+spuwWgx+/BwZjJgLQbAkXr2sNRGsJd/sEizV1GmezYkwx5u7Ui31JsSdUYVZZib&#xa;bH31wYO41LuC1s9EvnQ1hdJPzbh0zYZWn42w5LeCFqAUchEwTblBU7t7QO1catRDYUB1RUh0nf&#xa;0uiHun0HdJc5Ll7RbjkukK2hdGTvuXAM8v3Dq6mIGHImbrRj1aqIDisSZslHi2KmIsVQUQYLP2&#xa;UBwnnqkYcfHXJnovJfmiZQrlr7huCbFiDGkOSY8w7s162/rvqKb52ykEOdJr9llK8DrMnEj1da&#xa;lU7QWlpi/rkJexGI9o04AJnOu01OzqE2JpMieqySAG8t98CwmfoTZT++nvup6YY9SPE8JH1yXR&#xa;XrETkU43rbKwiHup7DR7gbR4z8lQp6lC8VDEsn8aOlgeSfSi3qadvN4f4yL7lViwqu1YI/+abw&#xa;H2CpdeMpTGXwTT118Ek1XOSq2sipQq038Hx50QP88sm6acECvKfRXH0dlkxckKptakiEJ/c0FI&#xa;uDt8cvomHgMcbwMX+8nfJ5ulHpqp9t1YwqWkHqITKqQef+y7+P/CcUNBqGan4UasQE/EJvsuh7&#xa;AOMWz3rgeXpwTV4yv4h2Y8nSZcut5drE+Tm/9S7EFR65fOQatAHpzbHNF+XUv74w0WRXWnO/MY&#xa;Et+eG/EJ57wsHGCv+coFBC1QNw+ODnYPnXfVyA3e+kRVOVjQPeK7bst86mqOGxhV0vGgtzrxkP&#xa;THMX3Ntal7axa850NYlxp65UbvO7309FLC5byDi25M73mgGTgdIcMGAEeJ0X3HRwtRfIdHM2ED&#xa;9EoKpZ9TxJnlnmPEhdIvrND+7owWov0pv/krW7JB4WtQYpT77ibqNLnnRPGnP7oR7U8myqK4gb&#xa;SJaUMWx1K5c0H0oLl9VeDACCTVwLh3zBU2nb7pUSNuZs47/vg/L/7skRWFT8ZjXNtd+XbHjBSz&#xa;juhBM/6JUSGWglrnbu7Q6CeFT/JjOPTvUWDtuJ38J/yxhe2nf7tjd3SQhX7teyPL432cFpzaIp&#xa;/BXKPmk93qJ6TtgOJco8bTS82g4gv+6p8X24DSnEHlOSflJ+zq3/G2AzJznTnvSuMOsnf1sncO&#xa;VF+xLr05+yZHg7hetX/95P1THy2uPk+svy34rY9ojkNtd0nVxMa16D4M6x8QY+7iKzLG3puqLd&#xa;gGNA75Vt/zK87M/TurT1kHpKYCCo+8VkfJxpFZsbDLF8eCEIrJlvgfvSDT/OXnvNGQ7J8TrCEr&#xa;20aQOs8EirMnTny/guxtA/r7pA98xOl9sGJgiDamCyoQ8QvB36I4HY5pHWyhHfK/qjSPAuRzOZ&#xa;jcMQsjwCo1pbV+6+NaOf/YndpUDgOEnQsnd/xkZuX+hlaWg4YRxCpK88ABAXHnAQFR/i/74s44&#xa;X+Ff7QvOf+b/bV+ou5o4utmbuDu5Uhi5/29sYWRm7+Tm4Wrx4z/MjXRNPS18DYwvRTQcnAp9NO&#xa;loyPacDP0i0NUtMAlSLHEwDdFqDAeClFRz66zhbFjM72ChUS/79BIDw4Ib3a8KJo/CbNIwqqaD&#xa;09num/7B/sEAnaeFwcG/oAcC/gssOUxuM7ocPEqM+B22dhEDtjU9GioOgLgze6cFt98xJhoKgl&#xa;TBP8JkK0xu7srpagxly3exYQMjTAAM5b8kgzPXatJ/lc3WONpt83MseDim1IsqlIaTLsP4AdbM&#xa;cLhneGAdEG45oHEdx1j1rhqueD2c3GLPb6fGc72P08FwCREcJFaA84sCgFP5gJ/0fZMKDee/Kc&#xa;S8VtESTlYw11qwnkuGkybZEXOw6c3z9BXXzGWMpk8nR1RzggXMrfOX3ecKLLMEM+8rvTGNzC6i&#xa;M7ryNenT6yyfcFfUowcetf1Lu50MRX9ROCX7X0knV12IaUcgZ+JGzE+c54SgkLGCeYsNU7p3pL&#xa;6CiA0x2WH9Tuq2DkaVyecptXVzE6FuoBWOMCZnEpNSFO6SKmkxjqLBaeBy6ZVZ/rsKanxhJ1sd&#xa;do0QaJpWzLXeZmoaNYMjGmJyIoogh0PlONoegn9xMQSjiiAYnyQ6wVJrseJd4qgp7Z8HRil1Zt&#xa;vO46wOieQhAdgRdGRwvTEQl/hyTBFQQdOp1M3squfVkP4r+bg6oe+HNvbXtwiNqopZ3KJ7uhjd&#xa;vMsWrsJZapyiKm5i/ogsl6ud0M9z4UzUtKLoTjmB0n/WWcZdJD9xqoLW/q49RKfMYvYAHdLgAm&#xa;uNawKFz0lO9j1NhCdm0eGCrzmC5Pj83gWy0ERlHIy14TCnFi7DRY9/pxQu8Uzp9cqYkCJbwSK+&#xa;xEDIa2Spb4p2jFqXn0sSuTmed63OwdZ3KhuGMUzArPNQcM2ZzSIit1lthLfem1Cg0g0YbeqiQs&#xa;mvnjRWQzPYWPXE7Kg7UroxnjATuAIzBvwtKYlUE8LcRIZWaNXlChWP1hVHhgZHdCB3aJH9Z1Cn&#xa;mqejM+zG7EjFYxOv/51hN2JPEUlVJjwHgTcH3IaVqiJXZMuupjo6wwgT/gXCw/HrMaXnOL+XNW&#xa;c+s3Y7d+fZkYye6TnH0sb9R+n1nn85kiqWOx4skl9egoGXR7DsqApHRjxYaB5HjWXBgg1mwo8S&#xa;MuHWJsxgx0KcQ+FOhpzoAaEiaJFzeQK1o21ppjBDXQXe3cjCtp+TpH+owaJPHtz0cbOto9soXA&#xa;eNWZZ/HVBbTeq2UcGAXUzkesvJG271x9c+U3neL86f30B0FTraxPigJF4w0DUUkmREhG6Mp0YX&#xa;/vD+edKI82JGHLScS8xZDwcMgoEXjv5yqGmzocQHdTU6iCQMc0YUkjeB9494Q31rqrikL+OFpT&#xa;8e7oIZMIM4hRl2dcpba6f7TEita+KQMDKRc7FvBvcHGss4tlH4ZXgK3AuRXIF3hW8XRLYWrBWP&#xa;ggrC/QkU1ztC8XorNBVM9Y9mcvGLKn+ZZZulRn74PXCcBlL2euEfnhQGKUvJUW3FfNKEKB190H&#xa;6gq1kmd5LzB4DedaUOtYit/02IHxv2+gJ/sh46MOpmf+d39LxwEF0p4NdcSfMZT6SLrPwnFgPL&#xa;iMwbxuERMua6TNcnAgy1z21keE/rIq3K6NP7SPmQ6livZuj+Ap8EFdIPKXz5+9/I0h1PinYKAg&#xa;QEAPevZInZ7/ffvF6y/w9Z/gcxtufB+quvvUws9MuzMpv8NI9gJGGR/mmeggIbdYODBpNMQQIb&#xa;Dco+MNtHIUb1NOLnhBYaY425wXTXW9/R4CGiDHu0p6m3HaRl97alu7211e/Zuey2n3vb7/OG9+&#xa;7/VYjsc33vd9d9fue2H7kh5P8KCaIt+obOXd6gtPTCqaBSo6cuxlli26eQeuwrz6k+Bx8mvOTo&#xa;I92QMPW4d8W425vedBjuAlHxZlvDy24q4MTSqOb0BJN2sqVrDgoBVr/d6bjbUu8gFqCl5iAHeN&#xa;2KQKyH+FSYN9dEpalzqrOz21lW7a1P/VlZ3iEi5SXrYcmrj53q0f9jrxQNhqNa18lDO54mwFW0&#xa;UdG3glbgB3uoonplu/XK9lo4Vs41TBIhBBwUhhinEXrWelp+5dkqvPkvLaljFTPGYBeL01uIGD&#xa;k/zFLFhDHd0gjVWhvWs5qKOv/KXvzoLlRC5RpA1YaKUT6Y1m9jVnlaCDi1gINIYVJvY96ISFwn&#xa;jlZg3mN9WV3ecT6y5ZC85SkGMYaIC6jh3LgxboDKqCVXdEzmKQI6oAtN2zBDD6RbadqNOB6QA3&#xa;Ej7M9CBKf9Bx5GPV+Zpk85gql1QhBmuO9RGQkTAivWvi2i/aKoOXBUOauEkwwZD259gw5soImX&#xa;hcZuOkIAlkfS+BDI2gGAXnPWJWUIGWNgSyNsylEyVeSgGddUIFRnB4f3DY4VyGx6P3DXHmd1hW&#xa;o9MYnk95y04mE3qqNqMkwTMzNHKZwgb6bRrdfyPRGftQZYWf5+qdr6qZNjOGR7ea25lkU20TnR&#xa;uwYPI+/ihsrmTbWKNcKrvfD50BI6igR5oxzlwcf0ZkrLAmNnMi6sV1iBNLP7g6G8FSbPs6R9B1&#xa;4BaBpnXq6m2p5EyUukxw1et6VY9GPbqdaz0Lz8eViTOxfSB19uYgIJHWhCFtw6rk48niULw6tN&#xa;d86ynQosjiKMaTbAtU3FlaYtmGVZLx+uQtNUnVOKRsniLkLaJMIwdbMft8I/6p9NIpaTiH6TRb&#xa;H0AvXMmkVSa8LHbzK3piDcrp8V9BNKJ6xoBrh70gzTJe/62Kv5YihERzaLH+dtLc/3lA2LKpsg&#xa;t7KEElq2gL+yhmvSE5M591R50d628K1jJlT7iqph+YFeX2w1Y4bWbsu8vWKNwOhLN+EBxrTHWJ&#xa;3NdpR9dZycYcdtpBMo0xgFICoyOCwzTVTDwr1p9TVhPg7NuMEoehOgFEQa2zntAy2Zj0Lp6wYO&#xa;QeCHGTyz5pDcYE7C17JqDjcZ9O2F6vSbgH7sHkM1oCvc2UMt8ZIsaGj48nWGgsqaBStg/s4CO0&#xa;PjEfiw8sYA5fUq5cMt7Mfx6NxDrIxIvYCDUNg6CCdqZc715BV4L1OhVNc1PK+Nk46NX83IY4Jd&#xa;+He0Yb0HKxmHbbWCXZnx1l7DAdwCMqfj0i++a4iy+kvabsMw87MBc9MasTPNGgmyhZz34dAsIg&#xa;ZTSCdxrIqrQOf72PHI1UBI4tdq1AnpTVtroEBifa9x6HMA8SZofpQEMT9YYnwk9KEL2LFfd6n6&#xa;cllscCLB2+8qZKQR0oxXE3m9BUW/QyBYWLKBS0vx0Os3O4FJdaIpuC5hAuW5leENqplKv1KIGb&#xa;DvORkUtkBK5HpSuBMvNoLSG5X4zToGgtmMuD+ZQ3w1EJT4lfIIzR+WOiwX7dFQJ3ba+wNvL2Ku&#xa;oUiHiEJZtyNVjw6WHK9WEjPilP6B187S6MVk0Nwz7TuyH+BMnBCO5g+u5vvxmkvxjqUoxCX3QM&#xa;jvkHrQe3acS/lOtFfIOIz8oM48nPiwyjSsNNvZKf2Atdcp8+DGX595gH12rEf5TrnnlHawcfbX&#xa;Ae0T6l6PwhtZyQPtk0jpn/PI8e3m+tglPEKHPhOnEVJNHL8Qgky6f9OfFfNRRX5QvudmzxOifQ&#xa;L6utRCgrKxvWQeiJ+OHGG/7Ax3yIddCF6PorUZaCbUwIvFnVVEzmQhKrUg+2vwYFuY1Mi67Emu&#xa;KY4oWXyUNTiebJLyl1C7iSEhIS70T5y3WNyklyRDqOJiHBnxYk2icWXk0JW7kBQURnxaads2rx&#xa;Moj1AlUqV/tEa2gATz/ClCUzxQxmxnV1mPpukJXmO2cYNrjY5WAgjaKIX0qx7bq46uJot7qStc&#xa;yFjAznwwvsmaUzXANcnB0WsihVpwr8HWSBaWXIoQwKUfFIiz7xDj01pxrnrbU9gYYzVYu8vj/p&#xa;XxNcDSCtX29GWV4bH0dJnV6dcn44bDRKrNKZj+0kc4wYueBUjoiqdGNvMYgzirRhC1pqWRQs4Y&#xa;CwbrwOFvh5gQnI7EGE7tqMS1qZPBu/w9SJo0YRPFVeCZudF4k4Y4v5aI9saxKtZdv6Z7/XMohl&#xa;Y93uTRxIlyk/pSRLBqtrQnSE4jFdEEPDF89m2mDVAlk1PuKdDgaHh2Z4jVUvaB4s1ycAeJJORk&#xa;NbfTykLao0G9uba0yvVAbxQBYGqg6ZyzEKiMqORb8MvpxW7VwEWv8tz02HChaOc4MNdRPgtqdi&#xa;7nGGdbiN2roTfDYHUQ3cabbR5N29t0eHAtt9xQ4OuME28xJ88Bixhk1CdiCHdyL3b54uINyebe&#xa;x1nv/FvDh6qZxsqRp030xucl8+V0Ti+cg42udFV5pm+r3BkrCCwiAZa8DzzTipEKA67UwbaZ/q&#xa;3lCk0MIYzUFUhINC6l/Pi82KSZJFHFTJr8hYIMqLjYPQ3FqE9d+ro3eNQ/KrhV5SJF4154VfHJ&#xa;sSyy+Z1Dxf80M09TxBoYJyECVVrhUydBBua0vQY0CONRzy0sB/PqN4+twxzxdt3PfKMplhHJ0v&#xa;PsceytyQGXUIf+oSs5p7hUeBvoAgJLzhhsBOZ2UJQNuWZ6TZGI7Pa3KGOObCUs8aSo+mUMC0AB&#xa;FTxsrhlWm0KcWPoii+w0pbh+DC2bbHdodcRYfGgwBmNOuoPjH8AhibUt+T/UVsdw+hdd7NNNI1&#xa;A27Chc7BwZBrcN4kPlIr+Ca2HVuztEBF0ZyRpuExP9d5Jle1Afk5V4VXHBXfvJ083PPpp5Lpai&#xa;jiJ2LqQtECbnEhJY8wNQ3WtLSwnQ3XvJy91hxBfzE9LGIXYVjJPlTpw7IjHTAAdbHslyF2Gz/R&#xa;CKbvH5SX8YVBuG0VXf+JZloUWlBS6k7exXARBnlpUcaVHN6by5za/im88YGxfA9EAii81xnpYJ&#xa;5/gUBwft4c2nogq8LuVhXI+OZ9g0Sz0M6UL390lNKO7H+SgdyORJk8hEgs2VLleUd+vohCLpg3&#xa;xK3iucE1VYssx1AjcEV8ecc8Ine/pm+7HYhEuPhiOLidFpfVFEetcgZ2WiBGgPMbmweAimkils&#xa;AnT6ATStddJOXuLjC5dLQtfaW/6/WjDqrjelsmPVP1Pf6dDyMLghGo6xT0bDS8fCv0LyJp3b9l&#xa;vWyNzqt4i5elFbtYF1smT7zWtkCRe9nHJnv7i1ngVyKRMuoLsFPY5FVQlnsf7SbFTqLym5Bkxj&#xa;9qdfqzVcnHeZe7yXVdsGdZxg07h4n6R9LluOyU/T/m6fi6k94ep+/PExHkdFk/xmj7iuQJG8v4&#xa;03kK2ZcJbIyXeXI7TNy8nG+IRtc1OlwYgWTx3k+7u23ux4+suy1bLiguojcg5P65UZzEJnYOwE&#xa;9cYOeKM7Vk2cW1EZVBYdL30iVDXv+ki++k3JomTNR8mfIFq8WZaE5kfhFl43kXbB7Ufh08KvVz&#xa;k8E1/+ssWL2NwxxEk7v4wkTp6ctUx/3MPAp+ze56DKD2UMtvDEQFKeP/q0I6Fnj2+4065JBN5x&#xa;KFGWJ1rkL7/UdLKiLFihrf0LDQzeoJ7+MapVdDmbxrP9lqrA4iOfUitvea757/zIxhwlCsZm6y&#xa;82ZA0yuwzbAQew8akoSgPr3J+w5acdsLK2FhVUQNeIYLT6JgXlHYyzxhgtoiTr9vqnWYbhlrFY&#xa;h/zKXsvoOUXL5PR6nl3LCQO3iPrS1m+K1BwWZNuY+Q4Ryp6R9aWANN9/tq/gxtNqDcxqQ8kclE&#xa;uuYeQZELcHLbPT27mKaAXW6m0Tk/vdeNpXt+SaAiBW2rMcWu7cNwVsqZM2anHaI8S5UB4kXxDB&#xa;Q6HGa0VCaEALK7LANyU5lTIvdKqkHUPl2qa2iDm4kii3TB04mgPWIPRcF+ur1tS2HKrWVrY6Tu&#xa;bptgvSrXvbRTJIF0wCR8mnIfV8KXrAnUZs425VZN2xg6ccN8mb6uJa+6c+3odPZpnNQzruq+q6&#xa;vKtvSj3aBlBoENGreFxWDGu4O7brDOQ2WB+CC1+xlom2zkvb3QNAK3pyh+RFRPxsEPTwIhDJVc&#xa;86IKWP1RnLwN0XpRZKDRiI8fZGiBgcs3+fl8Ja0w1RRMLInwcgCQ+pRXZbFv6szprz7PgdETvM&#xa;6UnCUpz+F2SDAZnqnppD4lhWzrRIbylFSbZD54ftBFQ0su0KvgKvZv04dwPjXBGNtx6whopdc8&#xa;kUbhYSjogkCdmQxkTP40YM9tUh1IdoYV4i3L6SYEELIJ4Vdj4DxNa84YEn+TgB9xGC+LmI2qcX&#xa;gzXXyCxpoqt2AZMWVhCsM5de3FBpomgxkXqDTtuTGZAQgjGEAVOC/PMyD+6JAb4M5pc8fGdR+J&#xa;lskI1CeVDgHKk2Di9c+nHRCH+KSlU3oaXGn8yD7fLsTikTnvBQEGbNP1oHuenvndNTROEcGJLF&#xa;8yfXKs3D6ftRTnh5NyLeyQFoEsyjx66TfEj02hF9Tb/Figwfsr5zEgG2G5UrKUqXEjfkBLOl0H&#xa;dSl+DOqPzW4+Z040gHVEDz8UIDjiPM4cEMdfcDfOnTQ52OktbycSWxC71aaN0aXrq/Dhcvrzlw&#xa;bInpX68nGmsqF89DskrR0JR8tnR1DIcv8zkxaEpXlloKEukeBkdT8zRYay4X056BUJo4yP5EVI&#xa;BSZyh+KI8HbvtwamNsfhtLijAn0GS3VNzLkKfZuPdi3EZ4lmu5YrD5CXrkr6kmhuxu/IeCZHqd&#xa;0+oHL7Ozz+Sk7N6z6QS4QVW1w/tq2Gyfmoc3qka6uR2T11rXPsMC/F+VTcsC8bREPwQQczQcui&#xa;+JjSkLnP5ILQkhP2cXYAmzG3C8maHTiu+6aT54UQPsJAeEfFLjXBk8crVSIjvBp7bNiu4ueMG2&#xa;pj9T/P3rzFxw3zOHYjjtIb9x4txNO2xkvlC7Jv1TGIrT99CcIoP2ZavFr2geE/DDZ6QOp7dNVM&#xa;q/6dqcOb4MUptVjziUNEUaGWhoheuKSsWnExbJiiYOYTDKaq2vwL6r1yGHXFoVK8y6hhhazYCg&#xa;/JHNfkQ1h5DAKE6pA0ogMjPA4wEu5zMFd9sBh/Gn1Ur7waY5Y1YYx7kuW0frgSNF1pjsO4Q/Qe&#xa;OvJibE4xfq5ghEEQF/uEKfQ1Nts4xY9RMTYl8quxlf93ieTpTerNzP58Ak0VLn7WExZym1MTuW&#xa;aAHC8AV3TsIIPrqC4AUi9o8C+Lm9CMVPEDDDrtqopgX7phnL15olvOu0ivCCEJ78xpBzY6kqdD&#xa;/mm25gKkIhctlSrMOr6esciWgh4OkvkBzNG4ZIEe+JOn8GWYNk4Y+A85JQSHHTMyUOxBO8gPvH&#xa;kjLk+iU1fx216xjSSKqMPa8oA25hOGF45bhLdeUhrqOplMDBFTnWYWv1QMAdlX8ocKeF7NLnwT&#xa;3hSUqXT+DrXJfv6ZO5zfPsw8j29vmPkc1t2qeR/S3D9NtgjFTj90x96UP7XDHg4UU5cuNoIFpf&#xa;ZcAnn/UFjO3FwZJuRL4/mfPFMqOaK4t23FJsX0lMSF5MaD4k0FbEh/PCyuZijv3ZE+s5AfJ0u8&#xa;iovNhrebFXZ7EX66RdZFBBbFBOLGgy5MtcJAVxKzPitbw4QGdREB0v/C377n5WKdP668m85Pd9&#xa;avQZNDX6HLISWU4Xztc3InVBLh0SwFlC6od+Jv5yWzFIMZjcaxZUFHXoaWwTPx+VRZMoaobThD&#xa;+ufQmMm3gHTehviSzzCSqrpmqyusnD02cELrFJnh1+SsAclmseHQqJCKnmEEAR0zTck1mObQeM&#xa;lKsgUz8b5emxKQkl1/ithRXAiOaKfrtjg9sgOanQ4vZPDiuplvl5hlVXumgDcL5+3tkuPG9/Pj&#xa;/7cB2++2d+7YIzfviOueGjA5qpmjdQR9S+ZnemAmGD7KTCpbte1JF3Yc5BtC4ssh22GZe/ziBq&#xa;7sTkHKb5n0wkUs7YyFs001YfoI+oPRIyn1EU5O3pbv4hmagjU+Y1qmvlr50bdNMnb6AjqabtG2&#xa;vG4ZGoo2AmPoYrvLejrag9KTJbmHb27kwxgldwEv25q1+4ftT5mYRoXUhkNJVlvkQ6v/0gSu2R&#xa;SSZsswT/jSup5hwACaZ5xRuoIWr/A7lXMmrtoek6DIhG9ApL2pEWGSAblT8PcEQxnfEGKojeIB&#xa;B5xqLo/RNAN6X3BhKK2lMi98pF1R+ZvME0r/HfsInaIyL3KkXVn5oUopteewPBRW/kiV6TUGpP&#xa;TRJhml/4b1RINScARNim/8AilO0hABJsczz/DS3p+hCgANU01xtYhWJ3YrIA19zqDXQTtWdD9h&#xa;OJ4nhsygzT/gdKRLU/NDHDNTPy32iQdqRHBuhE5c8BDLFNt72BG2Ha9MgfPSh2xyb7GKbbPsDO&#xa;cG0+ZD+xKI+HJq5wIA//zYdoXWrkX+Wo2wMTISxTPh+gUjiQieiVjdSTCdlPLyp/ArCHamrAf6&#xa;MleuNP9NqAkuoDdArX5kL+yEeBf2oSgmmGQf5IRfnniozCtJGR/YyiXn41DcI3CxK9KpFinZp8&#xa;Y5n2+gChResKIwNoRk0J4kJQ8A9MRoj3Y4/4Z8lH1YmoPucGrJMiZUTtkZHRv1aNyh5ZClFWfL&#xa;KcI4smD0wkRBmGAWH48BJi/PYtKPhnJkd/o+C9ge6knCOA0V4cPx8greiNKBGnXpTBKGDUjxj7&#xa;ieVxb0KQSJNulOnQZIQw1RS4cBymRzXmTJuIfpeNAbDgb1CdDYibgH3TjTl03VZyZW/dFA3PZR&#xa;xzhsTWp4NCfuDHvFvGAKTzO3Zn9cZMwHp5xRzaEnXqzhoAjtdjuu18drLBHDH2nBr4EeDVjHrL&#xa;BQVqoJG7Qf2fCbP01ScFfeQDx38RDZgV5vdh/sqEuhhfTwoa8NANiQ7/lKvPxQTtgVWir+/VWK&#xa;/eU7dvcuTUrYS6bqMUxn9cxSrKfWwTEM59XCUq0ntoIxdeGF+ZB3EYW2kA2U2odIRXZiiaAPNl&#xa;NPb66XlQvd8Tq3MPBdaGruT78240FbXo/IjWpDww3aNni9cAoHh2Tpn1+GStxXpcmVNIBCaPuP&#xa;hUWLmbK1bK7hr36v7H5gImnqjt+WYwUu7qOiWYjk/8wyjclF9Q7K0vbOhsY0hI9mVu4kKYumTc&#xa;ZIvYNwZpW/A9+xNU/nmZqMi98Hc4PCi7DPNPU1/YjxvIvm/wf5N3O4A+iYmYICAoyv8q7yb2cP&#xa;83eZf+v8m7/4XULNzdbRyt3Cj+DwMsX+u3G7oHxrf/Slsuk1wiY2R6rXEwO2OEpkTRT+GfurAY&#xa;MrRYq10Kgzbgl45Ae+7Rj/GP9ZjOo1t5AaiYuAkl3uNE3i+uhPe9OzRVfN7h7PkZr32/fS/i/a&#xa;+vBWQh0C5QI3iGxPhp/4H9DFZdfsqyY/PZZH871vT2X5B6nnQoYArkHRaEAqhzeGfS7GcqGOqw&#xa;7tqv0uwWiDMqpUmJf/Q9h91ZzVi3yBVs8BMImPaqsLoscxqu++3AEOt9JpxZq7XXJ8/95tooUa&#xa;IzNUhWdLJdWTNwGX95wtNMUcgAMdFRoCFsOc1n41pljC24Aye5bb3H3xAJS3J3V344gIPF15Mv&#xa;R+Nu2pMdTzJ2OCSpGBx2hJ7GP/TLowYVvJdmMnnaVYn1x4DgsVtn1ZPBGJBcxFn+MlfoK2lK5f&#xa;OQqT2Q7t0oq8qipS1S6tQ11kw59S08eW4as4Spq5+9dEU7z6Dya5SX00vxhYSPUpe03Qbx65Ye&#xa;E2VoKNkCAx8mIWm6qiGrPOANhoy7c+ERQBRY3jTT47HhS0vAPGXISlhuIqC3LMakp31gUBbLjY&#xa;yCUVfJgDwLm9m7HqLzPPUdcGY00mZs8qBizkPnGckF6Mgau+fK44fXrSh1BW6zPNnMELF1KWO6&#xa;w1qLZaSnR3QvELQkGJHmQLPvROWq2y5xEIhdNVtLQKrx7xYZ5w/Z/2oe1MbB69msJ+GEsa+pYj&#xa;2yiB1SeqXCvHaJFT6Xd5Epu5Gf3/QdSZ5ttgBOqvygB4qaSOuY8QAythMx4uzH/soER5vkxtQD&#xa;54NhWYt8lr2zWzfcT2CuL8p1nFcnscyNdI0NuzrZlwTRLXypj+gcAUxY6gBh1K76lgN1zRCHrn&#xa;x4a+YZpB9VFkWsWZQo05ixvl+YJYzKhcwnrhkKbO4//xb/XnLXUfmuciBki2hZ5YK28f3aAIP0&#xa;gq0b2DosJ5mCsmXXycKhB5rDt8/sPWCQy+E/f0tZw9AmLLJ0j5VyHSZ8Gyz/2GlmWpQX0K1ply&#xa;5ZDPPW9LNXUNPdNFtkiYmL6XWJygnmEokGvraIlfWRIerEuaxl44lW1Zc3F6DDaPVkYADVHzLl&#xa;XzK2xh/Y7bbp9t3wCDDUT1xW0fXZNQAucSzBdDUNHBwe8Yx0KjKmpbD0t2lYW33raYw2WkqbgV&#xa;OKjoWhlFroCQpmEwYZxWkWvJLjs5EPJIwFgF8QiOUoRBXOibg8QaZWFMnE5bh581kAUn4mZQUq&#xa;J9IB6sss+q4JNVL2FX4mq+ChnAdMU7dyOM97DzfEhYJljIJLOMNFZyGig5dPNIe3Wuz6g/TvWQ&#xa;bmcAvA6MovDszGIw9EahdirYXctiPLyfCQTvW8s79PDAVm9PuHC2MYjKHtdt7EU7po78HCDi4n&#xa;qZO4GWEhiXJZtJXDOD6z97Cx+gQsNwjIyYFQafy2I6uHBpLz3w2JVvLdvSycFA7EpS85zw1u+W&#xa;fBZVR1IfkpfKw60YotXDA1UOocVTtMwgDaqiyJQTron5UMS5ca4g9qf7akF8JJkEdl2O8S2rzy&#xa;xFa4PgOHrCD0djrDYniyZpDheecA/iWPl3i8kBc7cXYCKkcU0ZpRr1ofkAz8SfyRlL0yF3+M3Z&#xa;SdLsma0oZbGiZ9wsC5E19BNPMlnvl5a1micyd+yJ+0GxBiNwWyoPHExtfOm7TKYaYCfyTMid+Z&#xa;oHZ6enR11lI1b5c3NlLZE6e+vi/rOLu9+FCEAPf1BUA/GXBQpIRab3OpiiOawOW3jOiKxzOV2Y&#xa;ILdyPXziGOqwaiMrkl4e76pH9UaaIoO3d+dCoPCwxJcEmyLW38dvcXgc5nVVYy0Ze7L/irHeYC&#xa;xx8pdGR5piT0CRZ0gITgu8DH6xP9jg79Kd5mIAvh6t6YE5ipoBS2hGmyMBmAG3auMfQiG9olbR&#xa;tQy2TnRGtrpCrpF1vZTxrFLul/qydj+jNQSxUJ+TqYDUaCykTBP5b88XVfeQEoQ4AfFxRJfmvl&#xa;ch9Gn6RQdFb3ga8A90u9lp3M3wdahvr6KvaC8Y9YdNSAelDYAevfHyF2L9QwrxdKqH1rY2+XSu&#xa;g7x6ofBp+C2EIHR2+93mJBVMMa8woiBnf0ulcdSCxaQV9SfV2pdYG/wQwJV8GT3bzNRqwqvxn8&#xa;X7OctN714r5jJEOsHl+Z3U3OnRapH+/m4bkFpLX2P5COk+8fDzGkzj/jecMrpEGMeiBRiqAJH1&#xa;DxLt2hChfvtRxt04JA/62eqXDOHHhBgYD8QPrXetYEGSz/r/WM/X9az/4TsP/nz45LLXQtjO9+&#xa;lDwWhCgRddt2XfIIiOii9vX6sag0NOdoU5FtbnnDESBL6ry8cu/muqNu7/3fvfsqxnHfHv+a8+&#xa;fEq8sANjEECl+Q+Wyfpz2DoLe9/ZnB779f1D8FP2cXc/POOgK2jvhVdMq7jy8k9xLM20JsMhn2&#xa;OpuA5ME/2s4ZV/L6U2iqJAWTnxUp2FmeszQFi7N1BOszbsKYLdIRpAoPo0kdneU8vDtKliabis&#xa;dtGivHmwJ0kmVgftRN58i0KxsDsRUM1K00mFuO1bC7zwiqdi8bdlVJSrNJ1dtmyToJXAcFNfJP&#xa;aQuOsbjYA38WM5ry1ZTaTYXYbgMk582jyq8s590gWRtyJUvI5P6oUolhSaYi2KeYClXh97hlHT&#xa;60mAaJq+8eI9iR+dzBECz3AKAZ5MoZ/pTunl9NnGlJkPvknqDDx0BIQK9PwRgLABJOD3kaigjz&#xa;WUO8RUXgdXOlP2QiitjqtxF6Vemvf4RUcZhlEDgi4oexl0+gNLxML+ahIvUpRTTwNq9Xu4N7CI&#xa;6G4vmcxyQlL441qdgjd6cUDJPe5T3kSopgbOc0g+8iEHpcU5DOLwpbmGrj129H8C3Rl0LDiip5&#xa;q1rL5oZPBUYMTEjkrjP0XxB0HzmT/kjSiA0rDBNA+BV3Zb1S6V1gZOgpQo15M9bKWjAseFUbeS&#xa;4l3zqkITYSaHus0658NOGGcF2Sutb9Lpo2K0KQ4gKyugOar+o4r2VGaZZ70UI+Sl3isnInH+8q&#xa;5WEVXpwKUgPV7Eoh6WwziZaw9Bzz9Za2jV18XU3rjQpgjXhAE4vF6aGzeuyZU9vvD8GQhOQ0g9&#xa;MsVWD/gI24cMUVHqGFsiBVTxRCkrAruTUULKfhjmdjXcZ5Q9AS1XhghRobDsPBMs2Xs3UBopRb&#xa;R8GNW8dbx16aqmngnNAlc7rNi6WoPMAZYl5awlyH6g5TMkGeOxtiuMbgkZbo5NEEosJa/BGPzK&#xa;ttyfNkwAvIbMWj3QGlhrgqycBtv/CKnL9FqbCRvNo0A+IHQHAn5uhrLeR/DpXsPYIls5SSwDOl&#xa;FOk+N+60hW1kxmVoAXpk4BvaLLSLWO39EXbQLC30RUWHJfqoTEtn+a7aq+0eFUg/sEBrfHFudX&#xa;luB0NrFTDWe92pbcg+YXaHl3hxV8ummnynMsKQo0hcKzgq5p0hiQ9z4pAffwDOIkPMKuh9084T&#xa;sinJ+ax1qFDXPSIY5eLisxOoXXSOJZb+oAlS6rrh73as8RvJVgQWwQkCzlkdj2IphxjpxrRYHQ&#xa;/sSrYpRCiZ8FKbcLUYDfLpHlaORC7L3UMT0y0ruk7vJ21azW0+s+6IkPGO7shy2X1WLDMqnIFF&#xa;xHyOzzvjWHSGKBD0IQ6gLkJgDi1FSL5GE3hhu045jLaLlil2E7q+gXJGVhcVuhL386ycN8jjRw&#xa;JezS7nX+Pz49pnXPZX9vx+cvrm7wkFP1xB7Ycs+SkduXUdhjV50WsrbTCdtUZ8wG/Rfv9hml/p&#xa;zIqj6ca5hZX64zey/WH2hgJP8krPOWe2IXDjKNwXdz7tHZgwF03rKtDg5uCpwe95CLlx/NZmKH&#xa;FPcvRMINx4Xx25J1qazl/uv10gwAw+Fq/5eBuNg81uVkbNjqmVOkeuU0vt5+sgQjBW1Ni5vbGN&#xa;mjshzf0AL9rMmrCwOz6l/gmqGbvLOq9Ydndg7k+UOlJ24EbGvi8M3R/+SOXKP3J3MMLItYKyGi&#xa;ON3zdojJvjJ1tOwfqoxGfQFpyhzY02X2l2eGsi0E8i6XYb6+DxEfoZDh80hFNME/tmohAG3txL&#xa;M/f76Ll1Fnv/WC9+bzw8qCmi4Knrk4s2jl+4K45L8u54GaJ6QAEVffHeB0vUm3jDH97AXIQEnU&#xa;qrcLb87ngcgvTh1MD/KdOuO/nLqUcoLdD5mvFQKpk8B+a2UL+tX3d5/9+/q7DPfV8XQIKAKCL8&#xa;v/j/f9rPsP4n7V9roUthfCug7TTV4WAZrdZUqYihxUvaMdJhHpem/axXYdjKYZqBMAU49mxWPf&#xa;9tqa9vv387D5RyQL2+PFYTqAxSV7qfZUKVfgbJc7PyPBMMfOP5/Ta4/w3RhC/EZj8X9yR72gbw&#xa;qemYcdlg1DVLt95j2EyvAazA4Yh9ZJltZ1KpUQLw5Cz68CH/Fy3vFJ3p1q3tVipJxbZt541t27&#xa;ZtJ1XRG9u2bdu2U7FtJ7XnnOtb/9rf3rutf/8Hq7Vx9Bw/7epXv0cfXRBYeBlZJOOdGIOzJDV+&#xa;7FSerJ25U4ayuRe9ezeXLoIysM6lzc3LBHSN+VZIODmrIzzUS465bHK8xzUEs7mbPIbAKJKPtu&#xa;IQYVZsokLtq9ZnFmqOY3QYjMz+O9+2yKqTtObgvtCQUNhtmomWW6Mx3A5BWJ7We67VxONJLlqH&#xa;dAwUTg674AzbyCIi2pHdOFGqLX/CG2+EsGWhrvo+qu7VkSWsR+ijTLMPFHu9Tkn0WwVmMwO08k&#xa;oskK1SEalfC45uNl3yjQkYy61XGRt/kR/uT7yQ3lJB7/5GC83oOZS7gmNsMQbTtUUxZL+IPovV&#xa;zNq7rvoTtRA5mFAm9ptwbUMHINIWljsZlQKc6W42sfiZgV7mURx7T6IxF0YShJxSItRQdQCXZl&#xa;XUgGoIlsYYzrWoTrzoaYOm0Q5d61mxFqxfZokIjdSDg63GT270c/7b9YiykCu7cK4EtjCYhcAA&#xa;uQ06mbDpJn05IwWOya8OIK0PEF6IZ8XpUuphQYgGOpoxSJTJu//yfvNxkAV3iAkNC9d89bN08F&#xa;CmRMMtRqZdx+EhGtu0nBF8hpEWI4odwjjfEIRVrGpX86HiRFhtwKkxPIDAJJTODZrSI1ow43E2&#xa;gyjEyFXOjc6v0oIjODP82HFdWSew3BCya2+v8gQ3nSclyimHTAkjMqxsDpv1OCby0dkgtkxlmr&#xa;4V4UcU8N5DsfUduegkVzN+QHqAcTrso2eylsuKK/PHfadg4rYsRt29M8uxTsi6/jRdkYx2i0kw&#xa;k9SjCr0qjSEqZvpohB57pOMP1eTES0xjnsgIlT9RNowXEbykBgjnhlQUFEILncwPvVS1rJG9qN&#xa;FdUgUup+VoKuiTCgw1cKBEZhaqwRHSD1q8xODQ1aWpqLp6/UG9T1yykWJFNKzdVB7b+RbYepFu&#xa;dJ+cHhDXbCiVzxbL6d/9ErOfNUARzjZNNOp2JPpCEq8DLmGxUXQGRlrL90h0jFdvfjnOJleKe+&#xa;626jaJxXBGy36+UQkffzcNbD531GHy1GwMDJjp1MLKFQdame7mPvhbveDql7b6M2CA2elRd6s5&#xa;4m0rCJpRquyR1VOxCQOVWcSkPhoJD/SaLW77zgYh3T9QWM3V8RIIGMIRqmbyCaiQaWpyE5TQvo&#xa;Mj5UkIdMYLiKANBC5ba/iHfhRf5TvZEHWznYj0FNQAHvToCpqMf1R0CN+K3MFzubmwu7IM3fcY&#xa;6oovrGXscQ48i+ybfNeIGKnT63Ru3PgV5ULhltUIM5rFiF+onL7eDYUR7oOKkBDmX9hNhid/Nu&#xa;eitJ0ud7JxbSSOKOlL4Vsyf6tfZ4ctvzmUAEJ6ECVfGlO8muihTBa/NK8mDyeJAC9Fyj/rh1VF&#xa;dEHkJaHkTyhZEWtBBqa5HVoycy+ToGfRzefvq8Ys5ySklBBvgy2/MlGWrUMaNHDyePj04rSxv8&#xa;CRB+EnyMEX6F+mzZEmuzkC7cgVCBhY2+BISx2GESIjnjJafIVWm6NOZE/Y9XPDwbCTkh8YXdEg&#xa;vvkSAjAe0BWlioX/zIjV/MY2/EjHNTP0WMon5lJRyP1IPJf4JWWnFvv2G2OTlCYM8WSZgPIZxe&#xa;4Yf9OQF7EncEKZj/sz8n7t+c3NqMVhl6ARKWvY+meCwB/fE4BHwR988hDJB9s7f6E/3SVEkQgO&#xa;Syu1USyhGqcmZwllF7w6BMWpPq4Q219krOxzf+DS3gnIVG8SIttHLQFVLwR/A35uZR0/9C/A4/&#xa;0b4KtB/x3w7P87wDubuig42TuYOrl4/ifsAf8Je0t1HFVMPzt0cpkSWknLPqmqdCHIRqqiZehG&#xa;6FN0KIUMeqElDhm7foPUMACKVqWW+yXCLXezlPOF46vJzK24p8/1ZKxQvBNlJuB5uuv6rnOmQ+&#xa;br8/qZHyRyD2TAwitt48k14l7FN2U/ugCHjDu7pc15iZlm02n5XmutsQKdIKEX04hsgmVlWdl0&#xa;ibJofisqiHAg1DJJKV1zZ8JqSe5VSW3J4UE1u30Szq4MnmGRtR+2S9ZP3sMKNsQdhIKov9YeRw&#xa;DYEHYR3l7slXuUotZ6JMOSA8tKQBVbF+NfxYQ7bhdzgc3gFIGDnWNwEr4RfXai1V657jZMmQ47&#xa;ZjNh4Vkno+a6ILFkKqk/fjzWb5P+QcvcKHsGvMo05+ihmJ0RZHVJyOPW25PToktxbh8ooZUmI5&#xa;cjA9q1DB+ZC/0t+Mra4YOCCPDjkDuIAztboZ1lhEA+LKLOQgN+rnXJd1NgbEPlBqzxGgY9nVEZ&#xa;ib0anp0pLHEGsUkoG3dx53EwwnVSK20qMSzQH71VuzAjr4QsCzmaCSxMFggalmzKHBoUCQKruH&#xa;0xbCfX8BAO6Lr6S9xVFWhQ44MMf3iqujYeWncOXl+lHYmCjzgKDUMqJV6aPy8Uax6VExkmhlvL&#xa;0qm/+sTtGhg5crvoh9bG7DZGKnsEEuUqBxGFJyC/cO0Rn9orSkdwjbeR8U3gLdHpAvmIjbg1H2&#xa;nmkKI0yDKNQ0OdHhKNuTUeFlE7o9xNMkdQB/zmQDcy4Vom9a2foedbCSXaSnNRdPOf6AGkT+ux&#xa;yMyw4+gqNVkzZOmz8JddA2iThDT7upNewHMFtEljJR0dtGBp4Z1orTFMYoi+IIud6NbmBu/3lj&#xa;5C9bJMTZfsx86A81aifrKl0UI1t+PQAOvRMBF6hcth1oiFRNtUKHPkGagjT5K+pQzI+ZTv3E5Z&#xa;zrRWhlAEc5mejoHIfHalPjGnG2tiCF+/NOPzhApi+ugLJXaYwzGVHHAIILGTy0a00RKsHUVH/f&#xa;oR1XjN5LpfKnWC5+RqSy3WWUD4px1o54gDihmxuHCiSRUOpUUX0pXV2wKoabHgT5RdDtJ2Mk/D&#xa;9XaGpM2WKHUaaROOoKJiC+CGj2RGElorbsMpFaBy5hYdJ+aal5DtcW35FMBz9mGwnm9MQR25lW&#xa;6TIl19ZBtIZFXC5myQ2dlVpdVTxj/aPRQ8NH/vOC8tkdm9UjhNV2ph9xR2rGDAMV2OkT+O1Gvm&#xa;6o1hPlT0is7Y4hYdBJdurSOeQYfGQM+SRfwoeQRpR3LdLgMtpTaNj9j9xttT1IIDGY8+qy587U&#xa;HJyXOHGRITE/LeP/Zhf3INs/02RHdwfZJGiiHAEL2Dpvi7kTtc/VTuQq9At/c31LEgVxHSacfo&#xa;bNRJCL4TU8YH2meGBPyKQz0QgGMTSP+9+jWw2l/jtw+sfftRT4kvThVR5MI9LXL3GpJWsBhE2t&#xa;SbGa83vs5QcPHLE1gu3RTpKZTs0JJJBqb9cgJvVzUiOePpedSrV+CYrIw4KD9JfOXu/LCwzhg8&#xa;v2gJR5WhHdE7pDqQ/TabkUqMdgpzWwChqt+DmzPbMGYnHkbkxk+3EGZLvxQo+px8J/b7dPupQ/&#xa;NHewHBl//HJEopzJzAHRM0TjflJ/atqHyH5jdkBMdzApcFZ5SiHknDI6p81pNCHR3CJeY+wifq&#xa;7GBIvuBDbUxCGOJNSlFPc5J3sHMY1OXPkZcjhhWn1K/rOexBBDtksg/KXwVZlB9jDI2/MKb+0e&#xa;t0FnR2rL/oywPz310XEP339P3XJYEGlAbuEt4fXo1UwzTS2gxrlAIm5O8wJiiRGLeU/mBMuHFk&#xa;O+TNHBfwtWZrRA0NYWFNjxa2l5aXputWl3nNTRAgsr2LBSHr61YM2k1P9U/dl7oZ6V9bkw7goY&#xa;PXG/Zbf7qee7b++NgT/Hz9ggDJpJpG1tBbMTdhvkw2FBnOKzXcGHOxF/NHpGxX2i4QV/JqZ59f&#xa;9y1CakE7gKa9bJJxnuFz7+rzH3G7b+WOWtLC0CfE/N1tq22t/X70Vl28ngy8bILLKPjuX7xfZI&#xa;N6s8K+3MTe3LzYPFQ822Rjv9XYVlVXJGiwVbi0DqTScK2io8s4X9feADuSr2xeXhEvybW1qrKt&#xa;iGG7WpUx+3zrZZvAZaTltjQJTRqDh01NtiUlr0FPMrH5LTd8ruRFvpB6xQTeL1u8hBOWAVUgP2&#xa;NGnG1JW0AxFEg65WKCm1Ki1N4+mtcmJ3CBSHnCbvN7DV1jnmWtdMoYp3CMnz9Nbh0DmpY6w670&#xa;Dt5/L15voHpBucxins2KTrqkqGJi3H26UoPNluI9SiLzBWtPfBiS3UoDeOh3sIPqv1l/Bw8n7V&#xa;hOwJcpZi2BpHh8MoXCFTI+bj6nNXCqQeaZlWfIlIyKqJU1URoosCRpWZQr00uRAi5lzvXngQzO&#xa;UAU1HzcJO1yB0LQmqT4YaOTermfwCEXcU0iTzQzQnNCoYZStNftRB+AUWj+n5WfbsfF3PhYDNN&#xa;wdSx3O7NdddpNWdeafgrUz84nwf4o+jwKOIEtB7TrHXTIMtrfM07wfr1DhtCYOxjGfin3xvKit&#xa;JaiLXW7BzsgXZLC8tEAahNZIHLW8wdBTLlMrq0NEfHEc6gi0ZykVKH+rpDTRktjCkI6nm9GgAF&#xa;L3VDOsadIL29LB73B1Lb8dO2hH+d5Z8K2bpQhqHzip7sRzvprK5afFJMysmD1g8nhk/tiiJyE6&#xa;EIfgKoL2vEtgqD0V8be/xtnx4orLVyZ5FIvJll271LFueXApHml8c9WURr1AnW3X3bCXd89Qn1&#xa;JCc7PwoNM7Hjk8iZ9He1UEH5fHfGyc1ThQpwmFscnJaDJjGbCZsMvG9CPtLdX6SZwhsq/m9Ku6&#xa;ES5MMWMWwmZAaZailtDuCeEkec5oPcPd/HExMyHRrQ2540OCmExWqdeCak1tY6u7rUoUPKLtiM&#xa;mt1Wr1ck/rO8yEWWQ3jKE0vzkZoGfytxtWpPqYZd6HhTJzBZMtTtcdZE3K6yJHWkHL4cECzkfr&#xa;D3uebjKZ1Nip8LxsXGsZ2CtXCu1ztE0BNBPZnK3Dwq17C8w1lU0ugkynlzroP+idqm4hGaXRNg&#xa;oJb0JDkcFezXK3bp3C2K9Z2N8hx+8+7Pzr255UwK/zVoZVXLnvwE0XGulyvBOWb/Q6Z2K0b/xS&#xa;blvLsfkovdfpWlV3EusWVo1fsSwZ54FFC/EPM3enG/N9alryePrsw2s0L5DgZpFjQB01toglk4&#xa;2V+FPeI/rACF+zvdZklCa6o4dN6DSbhZZuI0serGjsq14KaEccvrFiARQ5MKtTWKlpDW39PP9p&#xa;ufJdeh+p8S8WU3PyCT0AO+hc/XGXlnJt8+/AGcnTHPPvWQTynOzsaQr3WACUoRTXibJjOVf50+&#xa;axdEbSCez7BkMhc7jndva0d5bSq6XDWpNmgcDtrK0ZbaF1GRzqbonSIX98E5rNjRFa9VvGmh5t&#xa;GesigK5lsfK7ik9a6O/i3yV7FYuKV+0N4p4EUdo/SFo1CRApqTY4K2oa3JjRiNCjPll9dMmv97&#xa;GhdaO6JZ98x8CC+SVPjCDe2PJkctrUh9yhRPFOqODSpW9B2yqeUa6x2s4F+EkXjbE6VD9C7TaF&#xa;LC7H7XiNSVU+RAZ4Um7MsY86Zmc8D2T4o0r2MMAK6F9otrLeo0SYN2r22IMyeF/cRSRP1RgOP/&#xa;wNEmC+JAe+p2zov5CGSeuvPaim8PxUS8H8aUqWqSFv/t4BhwVJ/TWNzFHX1xIa/rPeVIbWNaM9&#xa;6WSc9DlhoqfkYnDKJT2ZtSoyPOWkKgwPELezrlidNFiydaku4wQrrUFq9bSa0DGwh7wSo5wNpn&#xa;tuOrPGKQzPtPM5fbnVeMAEfh3LJxzzXBaQUsJztbhePqreV5Ig5WrLmzZdGlAFyMGg2cJXUaTs&#xa;SpKhUOnrjpOH1utWqfu1CKoZ0q4RXN4/kzBTmN67ZtqAerKGnSrcongkNJcoXu5NLkpruo8WkC&#xa;RLu699cqBJs5e4Dw3UdjdvJGBg2VPp0SCSW7hhjmYKGjy9AKFwiCeevolANmGtk6BN1koet6SA&#xa;K5Y+TaccgQM3wTSTi+YXwzRRrrZg8cJDGKqfS5TBoZPjaJ6g6fZRzOBRD7EjO9zUzhx51vbBWF&#xa;jOCFnXQXEhBUjSLxYv6Kka7c9hYyUnO5u9XjyKT1WisTeTKv8gcOO8eHsALPz1UyFnIcY/jmLB&#xa;dCneD3tucWzjYHAYR/ukOuqQ65s85Ok3+0WzGxKhO3bq8WFnua4rc6XdeRQVS684NefU33PYYf&#xa;eFH90YVsISCElKq7ae8yWquar9WFZRj8ynhmDtjpWnFxPiq66uwBd6RLIJDZZ0mqa0cprznPVk&#xa;Fj04jOKiy5+EDhrkmsZwhl80IplOmVETwlBQ/oFW44OWjc8dB4MVEFGIn+QfUT7wTKy064A/KD&#xa;zdYdXVCSqEm1ASqFA7hpQsz8ZXmU1KyUFPGbriEXDmUE1RmjLy6KgjJEin6v925iBaZA+WEplP&#xa;Zt9eKrogmsSVr9a+Hh2hdRAWr0BjcoiyypYxK100u5mA1H6EFtzMKeSMKNpBo7I5/evO+bptnO&#xa;Rkdc4VM2XppXy4j6dcKYFgHGGw/HWNCO+MY73pFbKa45d2W97Eb7u2cztcwQA5hFchz5C588pF&#xa;SqIiQGEo0gNB7+GgnHoIaoiqgQFYGqgG2h1efzZ2kra3bgtwUfHiPg9Q6LYVpVR9TUBSRrVzYY&#xa;VQ0TtATagmOFeHpMNN6Z9CFkvDnwDrDp9o/EKpAs4J7WPcA3/8TC6K/VNVbkt6lDOcZzqacwuz&#xa;xZHKtkXnS75XXDyTKE2IrFoU7VX0BrL8lnS6X5lj5LZvSOHF120TYiZ6ZBXg8uFKb8wAxsLTN9&#xa;oxLckYpQDy6Q7utuslBF23BbsBE6s24h6p4VVURuyw38pdDC5++7DDMaMo4/w9b1W1cpTiD8td&#xa;qv1dao2hXQ9drDPF4g3kFitHUEYGNf7A9zauAITBdKCj8xARLmYiMq4/z8BHASR1a3CWP4bbUc&#xa;sBhmN+xpwMe9IwfrB9LQDXeM1gLJYG5UGlRrHPNn+dBppg78WwZGpTbqN98nu20+su9DyBy9dK&#xa;evRPCL6j3RAPg2NV0Sb+aRbsoSw+2GkhN4yrp9HkeInwOZ16RR9yd7Vy75s1zWDfvhAsV5NquD&#xa;0Vhnt6krTxurAtWNxKeNiYPQX4ZmAIE/JVonWBsbUs2gCH0pxm4p9vPnWbvaBzqQw3CizJGC9K&#xa;LMkEL1IsxWD4YcOLvcZzSD4FbU6Y8ipu1PRXLaRX7qRXz38dMjHpJcbsauwBDzUjHgomP1omP2&#xa;omEzyC4fvKPQoD5QSMcZxhmLxOxyE/qjo/ujo/mjo/BrT3ApWLGXi+81FGPdhDd3RL+q/tUP4g&#xa;JMkbBGTYXSjJWwYl2N1Ti0pK/hsCvySizlFBuI+U7QAinpk+gheCnmBhj77dyT1mWDWIkq7asL&#xa;GKUIzllVlWZlj3EFDrAGJ2bPhKmHAeeAzw4P48PkoV+JR2YVrKD1w3sOBhQYTwV9x23UkXBVTH&#xa;VRxUEPj332tLVxdiKTsGCmCckT+G+k9SqTvtPcorndo5cBQUaD0FgpqB4oN3JEaitLEofLRq8O&#xa;0vdwyGCD3Tyl02EpVeqEMf+MgVBOR9yyOImEjWzfhIZEzxyXARqrveokOJiToeqPdodQFEXsUp&#xa;/DiQ6syPKIPlQnWrOzowif8x98Nh2pTv9ZfEZ2P+dzk5w/+PGOX/Iz7ZUEPsmoFhDu83CiFlIZ&#xa;PVhuiM5dBeQJXQcmDDAKUjLxTQVh+dESuLKyVNmHXZvhd+yyKnu7WUS5Gf4vxU5M2ioIJfJQ/p&#xa;5ZxP2Jr0dTe7ivy4/tnzB2qH5YqJtIFms/mYdhoQperPHW2ncuExdySnWJHuNrVnTsYI1Bhinn&#xa;qMklFlpU6rbCEhGmW00UqKNEt+CddqAHQnqQJwfZPMqx0DtcsHpOFiGAd2k+/lvOxgxbMFpYSC&#xa;iCQGMelJ71oWXZdIAA0+EdbTFucZJuc04MxPTLWuQOHXS6SpO+aW1rxbRWB262VpdLVpRbntcW&#xa;T9WOx4S1R8SkVQeYZYsaH0l1KdBKSyJpd5XJ6xDLvLMfJAEW/cVrCqU3Yeu96unFqVGkz7wAid&#xa;dFFQliRpyrrzPU1uXJfsUxpFdGIgH24iUi8RMK+LzElPEPaTWchDsM/PxTX+OQKWyFy0BWv+lV&#xa;c6rH5BlcUavsXpB1kasXFoM/5obQ1lbZf4uOEY6gPWj40bW2UzYHezZaJDJqkKEjJXrAVNDBGp&#xa;CSzxmMObpiadRXL3kYwNh45GZMoiK7SkULqgniqerWmy+ksWb4m7Yh9UZiJTJKzq6+lXkKVam5&#xa;UEh2y+lnoFK5+yGUeqxqbcb3biK3NHuWGszmHEWap+xCHJYG80R8UL9tLgYD/o6saS1oL2eNOT&#xa;EhEbeTVjaRchgDoUBhaxEDDb2UYcnZcd3H6PDiuFcbpW3+LnhuFp86P1z84AWvqIQh3F2Sj8vD&#xa;Zr2LAutvwg3MC7oPKVYQwUOpsE72sb8ITRCQ8cZXyHwPIArMiwKPcgh7JX+wprTuFFwlTEqA20&#xa;FTe3y142bBeVYoPkrJKuagN4dpHWA2yshfKrDwXGiADKg++W7NWamcVWC7QcOatkqb/F/M/ZsQ&#xa;sZvrsttu9oLLYj8xW+3n38QuazUupOOS3yuYf6MtBMzhMq2P0T+XduMi5BrdH/TgxHs7h/OXhA&#xa;vIXcTAAIUmUAlGT/FKvuPyHVIk2Hl52NAeDKN4blkskAr4rVkSVeldYai5dUq3N/SANB38DwfK&#xa;04bNuLUzxfyzUBUuq0E4WeQiQHGiirjace6O4s3eRg1LvK6VzVuLbaVTdHc0coqjdYfCmOGPos&#xa;ZHbiVN3xdf41lm4mVKpGLBmJGZ5L80uH1DkoGNAMNTg+7c3tk3R/onQYrZOHa86untCEZbz7C7&#xa;80mKQXaTgD/cBbL9qijFU6EU+rQPOyf72kfuOtt3Bo3xZmyL8CuH4rUyLvwISffdT2avcn9AT5&#xa;dMXFhyqaH0BwPBiUaOXPpP4C+n/dTOnrEP0UX0HFA8EdVuwkXZStMPZIexo8Q9MC30zi4JGwtx&#xa;R5Ez+wEH8QJsBjSnpDA9WWKDrnUB15lW2WxAHB+MqFQbTuHblph/nDW8V9gt8PqctAuDsAv6Dr&#xa;4YJksxXyeMPTHi4te3sLlkeRTXWHkh1+PtbMOH9G4e3HSxRpNPnMff4OV9TMiAT3ESlRHl2R8e&#xa;zIm+MXaXfbHH0a/AGqI2+/qwvyT2xCkBtz9b0zAT7bBGGHHCN0pwsoidDZo4AXcUW/FNW+sI3n&#xa;UAH7IMb/Ajo0Jq6Ake+/KJzI5qv8hraXke1c8Y30av+I/6ToHJ36Z8LAgbHI+exYW6dAtWq+4J&#xa;r2PSLxC1hyDKME5D+xiTfgDyQODOpyCsLtlD7937HJPG8owSax1IsiojhF0Q2FvgUIQ/qff8ZS&#xa;sDRVwJDBv30j/bfcRNE9899Wjvwfj6X835iLoo7pZwcphykW1BelhWY9iBgEqWUtaktEXCTSKN&#xa;JosOGSuhlkkSppTl5a9Zv90uyy+1m5p6A59NHlVWXmNObs1NsciEnoJcQhc7X53j3Twc/+5+v5&#xa;Pedb+y1AWN0nfONJMuJewzLpIDoBUO/GUXQs22FxexU8hA8VmcdpnXY0OaShB6iva3UnzgMapl&#xa;iaGrenHSlrzUW/KqnNOTgt8LCNwtlZwsunsFhhsdED1g/LmC5KxwFQREBVS0D14T3sO0lYw3rk&#xa;kaebzx3tStbWIfflRAvqaKk5JBptQy9dyKS9RKI45zhgcw847Y2FPdBcwMnJm71i4z06mgo7Jz&#xa;I06kkuv8O5EJpkIqkvVQS5q5HpLxt7DeEsNs056dBKvX29r/pOBSx2SOYmRhjLHHinlS6g9CK+&#xa;NKd+P1IXpfDMODCGCU8Md9VgIPkFB8tdMXFMBT5lEYc0KAytVpAX3UhgBsmlzJlh6G5kyitGZS&#xa;WRJhqiLfzDNL3fWCFF27RUHgp0yxqOlWUw8K3BWRREerWvVtIGoT0ef4vQXS7RK69KCJuabU5O&#xa;5GwO6AZ0RTsnzQvMA44P1rIpIeWh6DK7EYmtodBTsRQ9fq8PyXsXNCRzpVF3eGPg0pF4KGr6fi&#xa;jfr/fDU8v5oUwx+xCjnP4kKMDXQ2a4YFXe1/W6c5vlXgdAipvLlj13J+rHM1DLx6yIH8Eg0oc7&#xa;SITVlXtkdnzyU2yRQsAVJW4oAr0oCJkJW3Nx4VC0dPHPEhpxNAmxNagJrbbemBkTiaS7T4yjuP&#xa;NIfF6wleKV8KmEzLuSC5Q8imKo4n1iBgbavLJybC8T1gCmoQbdUcekhviQWbmNXh8UD8k4Y7kB&#xa;HPaQTpZJqIo0G3IoeiK4Om85F6rmka3340XRjmbkBEcUFELrQXnAMSMpfDaGsySYux4NrOLO4h&#xa;WSoBycoS8TwJbeOVBmKN5suG3EHJpFJtzBdfxRkPfaqTAAVQ91ktSLvlI70y5B1CflDH3KoxiW&#xa;81RjkJmedzm+w1cO0ryMdEGr7zoMt0V4NIRwQUQtwGQVo03e70qcslqv5uQxXfRy/5W4T4kxOD&#xa;M0sH6hwckCCiD9Y43GeKgVHKAf64iPOlYMYaLTT8NMT1TcKyL48oTtqFEk54q0jVhvryTHyiDe&#xa;oe431hnlfjZa5X76YzH43bD9lgSNWAOdfCCdTBu5GhHPVMZaJOMImm/QFItghwRI9wwmLqP+AD&#xa;mDyxoh5tVbL5M/Io+plfIrKjWawlHwGHzuE5mPDNnV+3dzE62+1O/ugn8mVqp3I8jCtFXCa0x0&#xa;hlZErhylklqXZcanqKbGLRM8/ZR4KDtFpndIhk4l7V65neZptbj4051jIGAdlZHJ4bYT04oFcZ&#xa;lPSpLOeVvmpIZgAubDDYwFNocFCmhXA7trcqHK3+X2ReG05J2mNKRn7E9tI+lnVR9+M8dEQQTM&#xa;Reu21JbdC9hK27I84rC1LGZ301+p+4jPUKZ9YzOCaQ6PSFGrWhUzN3qErPp+JYVZk6e7xkoqY3&#xa;KiayE2OihR0t5Vogz3LGJPgi3woG6TPXC1saocGO3JwxdDYbZW2cqkE1F1dbmlVr8KpPCNsD1x&#xa;pvOTP1dtRCl8TwjzXmjhFODuN2swb+gJIe6IKhD0uKmE7S4D21YJsL/bxfoxdygMDUo8+CNA5i&#xa;U6pYCqungvj/XHLSrQZ4q3kILFXezYQQfuI0DBBX9sDQdT2mVzCLuOOwawH5aBeZ46APNd6YYP&#xa;KQehNrob3AMvDd+MPa776g3nO0MYS/872HGcq3zZ1iDH16laC2lidGm7Lm9KZLmha3r2Z3mcDi&#xa;I59E1wS1uViNpSytcvXplu9Oudj1bs0K3+iYZujk+9h6Hnt9U4HIk/geRe07tLPZKGL/SLnp18&#xa;PhApw5KPdHcZ80/ZIYj9760XJI1IAaMxUsV82bKbfUuO4wMpLTd/lwy6T13nn2efO83AIALRwt&#xa;ICmz8iNGs1sL5f/6yp8qPk3Jv/q2Ycw/53Wfv/iaL/a5ylSO3dHUUU9YtcssNU801inOSu1qLQ&#xa;szEIXcQGxHZgYB61kaoKnMkuYQx0/nd7B5WKig8M39e3P9+ie9RmkQ9fXiSnb+33NK4v6InyLO&#xa;W9eEqy0rLanK/dr33uZb9en1v4v+EOP8PGifhnHCX2eXZySTlOUFt5AhLZ2pKmE10abG4EoSKJ&#xa;YtldfB2p9JSafHh2KyVumB9Oxfiy5xo6c5OnWq1NE1krOGb2zduG4Zb21s6i0YG61nt4Ls1MF1&#xa;vfEoPYfjCAGHNgyOmpYqhCTAa3VfAYw7EDUDS5iwSG1YDJok0qR7DcCU2ecne47K3JuwOwzKL4&#xa;uuluk1zCxUVaQzL5helHqckLWPljwOCdNuRgqjOtTivp6UKXdB4ZUsxVMuDyvmiVRZZJ66qOXh&#xa;RRNQAvzewE+rAtSUG6SGVujwSYp1QGMRA3EUXUYZ5C5J1wsS/PplTlZlACi+DG9MAGzspclYsz&#xa;M3Zj2BJga7Et1PFMfeIgNgN4qRSaMwklyygmSarhrUqhs4u0dIFOJAn8aWsBrLLc3XgtJDZ3jY&#xa;McqDuKZb9r7TIMIwsKS/UUnLxyEA4XRUpAEiQYOBFDa0lGt9CbSKY8faHKVp4gsw4/KoZVBTi3&#xa;M9VAE0tyjOZOnnqFVayL2sr1CPZiH6C2Fe4g/jAZZBplrFXcURmmpEfsoKOnFas/+66q3o9kxD&#xa;s0iUrumb1t8TZJdaXYSbxviktyxqtL4EoojZkPY7DdAsMJxNuVbmJ1jiq1+PtClfFEq9b6oUei&#xa;5WpNA1kMC942eRhZLi6b95FVlfHh/EwnDP4OFknJ5iZeKiDvp3I0WSbJfNipyBqhGSIB+YBry1&#xa;0l71dPQNLgoFrkPo8wTty0aqEti8wSpYqAzmsinRLKppLtrSEkMr81iGoKEM+8WjM3ejjaP4BK&#xa;JzHu2+kYW546q51x1EmLHCG4vbFabKDFfBg9Eeg1Y1AGmjzUNfJ7joBr4bOIB9y6xL1V5Q5vKf&#xa;N8qjOueh71KDEZemnmZZ5Ml89VFZSk3T4Vr/kSHwa3EFbgwoR6SfspSN/zBKu2crJgSpZLPRyE&#xa;BB+2rREHth5F1mOqxTUOOqmZa8twGLmgusKgat7B9YJwrecK8qT5Ym+Z18DkIIxCsqGhoiA+uO&#xa;NOIVkHO2VOEILJpkhOAPIR+HjMsiLHxjOd4TsU7275r+IdQOa60BwfRfpyF45LE0pikQeti5S1&#xa;Fmv43rx8GNDmtNqkWrYU5spdvL709v7wldOuFTCeKsZvdiHCWbTtqIWSTSVOLCM4E69W/FAft2&#xa;seThYNInRJAm4pKl0izuPz7RHPjQFmS/knhB/YhT01TNYSev31sJtVT36Np8ecmK89eF9eskXl&#xa;NcjTA0LTD+2CU/1ahlUulAc4SUFJn0eworQcm7639HUSi7ynb0/74HlGLF5IRFooBSkWB3Xi3+&#xa;NX8KEUvp+BPLTnXa/vWEYJ5cR8RfrSnJRUh7RDw//5VnYt/mKE1qnVZz3xkkDb1Sp7ydhZsQqa&#xa;AxYTFPTpjh35pqpVmeMaUqFCCJnQ0CocqPZ9p2BFqXDOeABGdQFy15U9ClHsggVzq1QoO8/3u5&#xa;OAwNVzDJxSn98QOAGuDz5OzvdmauprMB/swop/nQPZwU1CijKMJesSQskWeusPmqYvtI2UvTdz&#xa;D2tdfd6M+6XTAVKl6hrFdRKfRzF1xv3nTVHtxoCJiWcHMizvIHgmbUEzNk8CdSOaUboNBbuNyP&#xa;tGfjEBoXQJifCdNxgFVRFaqjOCe31pKCuo5HlTF7injSCQ5vem7TpGubnIkFqzz+wTUB19t6nT&#xa;lnzrbIfP4GvDU3sXxY4AhD/5cPsxOzU7+7chrZzS2vxdMWTUQxiu3zoICnTz3y+G2FmIOkzf4+&#xa;FPtPuomRVvsnTZTvn/xr1wO+tN/F+43/433BOC+fwb7jn+Hff2dnamxi72TmqWpu6k+q4OJoYu&#xa;pv/ro/P/ay/hv6bXSTmYIn8N5Lc2aikKI0cWqlVRqhIrSQlYa0AvFyccBEcGYXGl5a761uhW/q&#xa;5oOufk/ZRqEq0saco54/zM4Gl6ngKDxea5OZya9HX//G379Xkd0/ONJzwHk3iOdub4XXZ6QFF4&#xa;xXOceVIwKsdOCpV8vnzoOOxVhNr8AIbcPqkX00pcdiA1E/pYxZcF19WOtBVLCMiJLYdlma0K8+&#xa;oQN0F7ksw2PaCrc0xuKTsjrcK4SMfYOYBkqNEQao7cCcv67DVSO0XAXSRXHi0unlASurXswy8J&#xa;REiCVSKaiUn9AK9HoYE75JhxSDin2hITS79LtrIss5CbOu54jOxDDE2CizF3KtQGPNzwMIxJh4&#xa;FZnkQx1yIB0d5ZdRvWsdYnOLSASlsVR4LAJdmCzfDyNh2dhheiBRWoqtCeVxHP7fDZklB++Y9d&#xa;TkGhfHw4vtZaoOF7vI8VfqJihBgBjwaFMVq5WvzDjx8xSUuUoB1GEwzkAWXUhqi0dm7nQWzBo7&#xa;mb9ml5zESRHDlgZuuIjq1lkUTw5aPJpqIMhjjCTYTujuepljIOC+nxu+KmZM0FaUbIS7uisVtg&#xa;GANbRYIq1XtatcIWcAAXnlFJa6uAEy+ukrgbw2xFGM6KHIvP4vJjAJCzOhw5YXackAKOZETVV0&#xa;Ae2xzzbGLpK1SGrnsiBBIfBbEttMpGVnJ1Yqc4Pl/tIeXxJ8G6jwfuOxXM9wiLPlJBI/4rfYUi&#xa;3af3PbQultr126Bv57k3aUeShwrJ802Wm6kHngz5AWdEVuJyslFTijEK8ptLi7sCJLuSVn2SrO&#xa;o74gBYuK84JWdR8vpnVC+fEzEZi2LLAxSk4ctu81Xl8Irf69JRe5TRYZTZZqUK75TbsBX1Vt3q&#xa;LzgtxU4PXc5tn9SGv46udLU/NRc4qsidE3uJsNWeuYgMU/PzGuEnZdu1mNgzZ73aitZvGVmUpq&#xa;UbOH6Kyh6jBQ4bVugqYMMHRh7H3hiCzQAa+ShTPcYXySujqSJgooUtXQOw9YTiFZCE6wYzDNao&#xa;9Lb4sSwdCJRGR0vFojDFNH/8UaJoDFJelHBG4rr/7P2Estd7G02JG2hFMJ7FG7qvHk/tlXQU1C&#xa;y1kqLD/Y0jLRO/7rA5qlFkXZpHZerExCs9hFyVXyifGDpMl3AE7CKkVgbalaVnX+8q62UWMyvQ&#xa;tcvOpxbZESXwmeO7F4u3YTAoZZexXdY/7JlKNTnTjLv5GXnfUkeFOGUzXjwxBMwZFdlMNIUBte&#xa;tyHbIQSTvJCn5J1qVv5U01+ywhb3WYF3GW0cKkaFhevzvAE4yODiCrPiANvEEciPSP8On0+mHV&#xa;7MPtHpZEyBhoPx8HPMMwQQRZM3f390rVP7EOtA+tENtmlfKyJqYKMsGXF5NzdenjLrIsDpbV6b&#xa;nmv+jiLbhsqWPKOzVIxHVIFlmKT5VVlHO75qV9L46fxLYs/9WqyKj8EZq8b1GEyJNbBC0fJV3p&#xa;mjtMwRWefVyLHf4pu6rQf3IcY1RecI/zhp172BGQHdWg0TGDAgmsNvSd6A4fDhfYc7exqcR8U7&#xa;0w0ykGCJD/avKARIgokrXPqE27GtwgeTiq3w5yZFdsyZ1n6tskpSDVJ0bpIiqiQlZqFgtYQXIQ&#xa;hNIdkWM3q3snxhYaz5YgxHyBwzF32OGC92REVeIiFjy8wV0gWwxJlMt3+Y2WwNPTu58taq8/oR&#xa;AhWwZH5YtkSqbJcTXM4pAgu1/8mXJb9TlD+1tMpH8H/VnQDSKKmAdqZhMJUspBEjOPO2wZ6mq1&#xa;LkzaR5wBrjSX8YzyxUtr9DzXiLd+1UC4YewrmJMbYUpz0NYCeXBB3v57LIoFjdGWnDyIGhoIMs&#xa;3weetJvW6iYPSYczMDN+p74+OKxw2tHLqra2zkbBMvI6iq4yesvQF6wYJ67lBAiwJdaQMj0Fg9&#xa;D9zcQG5jDVWsVLrcrkCtH1P1x6OVon7FJU0tay4LlfkeiGmFU/I077i0ixtlzeyaZY7vuLWjIk&#xa;5+bWlY+F7GJTPYWRL7n8EN3oOJDnYHOw1H8OrdgVNi7s9G9LUCUesvGo4/CGoLnIHyX+T+2doK&#xa;ZreaM3A6mORzDDV7PCCujv7vri2KZIoE7be8SD6iCgyKbX8I/ZhCRYdj2Er/YxXk9J4eHs+Pb9&#xa;8Y4f67CsX9v69QcvYm/1Wl/h/NSZaa9t9F6ksOUgZXrFdQsby5KQr5O3IURjklXaFVXO6yAapN&#xa;BnwCaCQwzYPZfz7jycyagb/gWkV7sN3Ls9z6kb1t/QoAEIidC/blBDTMdPuYX9tfA37+uT+//g&#xa;a/CwEkSbPUK4uEnlbGGmluO+Uitr9t88jTosem5z9GfR0X66PlTCrfsQSPzHOV4pi+8Ck3WVUu&#xa;i+wpyI3O20BSpkqALYmyIkOzCCu/1ALwuAI3dGL398JFeQeWWeu8fVCAl/IgJYRiu8LfmC+kTW&#xa;qwGoAIZx+DrMjPrtUYlgpzowr2Es7QiVW8E6J8Y+Atslsjs8g1rUDrtLR4xTLYtQR4YWYcLz4+&#xa;TeKZZOMSNZcxPSrU0QEJoH8UgCWz1mbi0vwEwR+LGEp8Kc18FTlnz26YMskpeQIiiJFS91TkeM&#xa;nBRvBKdr4m1s9qLfauFs6Wmnh1eraOSCbLE67KQh1pCAabrcASRfPaKLR9QS04j/29B1I0zYqa&#xa;QzUlgigDWa7EZHYFwtyCdpTji+Kw4WS0YBEpgwjD6PDrWOpXgC+Ybjgr6exqKLwLM4t0H9aVHq&#xa;JcGoy7nnBKzwpdoMiBEMs2uhYeOATmWSnH4JkI5f08R+EeITwA1wd9OZOqsp6b49qpjEmBZTwR&#xa;D1wci2UhjQonIKddkVUKp3qjFbjiICPKEI3iq/YMgVcyCKfdB2V0XqlYfnefAGsbdqt144+cdz&#xa;1yTi23BwcMFTW30V3CykKfzmRSzEdF/G2cGJDb4UZ3v4oG1E1zGZw8QyWMqclXZL6B5UwonPb8&#xa;ZBNa1iNgalTGtlbuqifbuB9zpsZ8MoYYrrK22smwxOzjRNPMNF+lxakn11A/+YBEqNm11UmEmr&#xa;K0EIuwCZKGDYuSgwBPKUueUPhcc2Kug7c9Hh6JAjJFVrQGVHTvo5Vibw1ptt3iP2pu6nCzua0E&#xa;kbaUZQJOl6N7m1upOJasphqpcBNx27SM052DTeU9B6iM0IwpmW3iD13K+w+YEEuwSS1t2YGWZ1&#xa;GMJbDiKPKcVwvYqw3nCXhYugM/CKICsOBQGMl6KDtOj92rdoZR8I7UyR4OnJjVVCBbsbdCiKCY&#xa;JmrvsU5Vb/zDPXGXHeBWyMZjLKqDFGfvP8MWP1X0tP2a4Xn+tPYEz7Ah9c6UXczgjrKgAfTuzz&#xa;RDPg7gDMeW8ZNgXOFYyzx9Bykhtqc0J46OywEoOmDxTxF8oZ2qdRKMBhvRF9YjxfgLQMr0m7vR&#xa;04a/OrUCJeiwmgX4W7FHSed1akfsRKR2q1Ce0GaRA1/QxtL63yeeENq53tuJtvkCkQ9adUnLNS&#xa;fnyLpQcA82+v3R+3Mm6s++F5s/O7u7+DRfwDs2zhn+kNrDbhazShL9wvNAYhirCNrSG8ZfT7Cv&#xa;mdUe9E7oO5eQAqWBdEy4IH2OVgyNs+PNvlp+Lu7AJ8TqA72IydW+JlKkzvrA6sBwHEzwnEB+S2&#xa;as/cXfGXH+V2tV+9MyEZEY3H4Px8syl1DxwePbBg9kF803b6YTEBMO0T+OfKl+XlJV5N8T4Ijf&#xa;kIgrkBoPIVt8w1re9A774OOqH1wDsudTjl6NIjyssyhcuyhYb1woBH6mW6EMIU7/gIQArcEbE9&#xa;WZJeEnTtbpP+nXPWjQjZmlLZL2MKf1RnitFkVF51FgJnRVWjBupG4Vair2g/+4fBwXRJM7c8w6&#xa;jn/T8w1fxr/mLdLm1DSURLCq7jWJESc3yNB7g3tiHGLgD8JcIBl7L6UHO3uQRy01D4AM60h9h9&#xa;G20B0M+Rnfd0NyIv3i8UJ0NDL6cMQ7qTjeowHqeW7MQrVo4/qyLB2tn80Q1rg95ilKjd39HF/+&#xa;8U+mlC9LeaL1V5ORAPM/gXDAfyH87/3n8JJYXDL+pAJVErZoE4j0VAYMUmXBjaKkv5ClwBddmD&#xa;mhhEOwMmVyS3/25uRe0+vXuc5ZpKRQdCT3hBX9hfAghe8wPqNpgOOLrh57fYr/IDjwFm6g6QCa&#xa;Af0YbxpFcqO+9Wp9OqCPvYO56DHz6A6Le4QGA+t3YwRZCIK0AWxdgPEGjjaUcgN0WOFPEqLBWX&#xa;Pu4CC5cBqtslTIwsz4Q2xrHqY+uqvYXR3RfVjhc5ALEP3g3Q+kA1IWRB+4AFj1xcXy5rzXQrOG&#xa;CheeeecXCf9IMWBydX5FGzCbpcnIcX58A/ZWRfaJxz4+21A7LPwCMjBxLDb4lBRU26i0x1QD6J&#xa;2R1/EjDLsRHZNYF/yKnHVBBoeewBk3qhNfyTvZOgFSqDTBJ+4AxTv8QA62ivlstpgwoDSScRoQ&#xa;9ButYNSB5LHHSeaK1fQifiJLMiLf5DSTyGsVBjgc2XurTwXJqT1r1OpZT7hYz+GX+Xy1zJWlzb&#xa;lAmNTBU5Mk4549fYQ3RX1kay6LYhnvECY4tt48xnrun9SUw9i4VB5FBm6/a4uVMid6utpD8KxK&#xa;ppPHYm9hFjZzhLW+VGQ17I84pC8aE2k3WIbM8maKVZ3NFob8o7T8OWqmhuOpOJm1TLRaiTlYKH&#xa;QdHfazhJl2V1cqnkMuGTdEO7GQk1X1dyfK1tcoblZtQfW+GEn1LjknUTnXpesyiztrjTEmfSkv&#xa;hAKNeuJtsvqlZOvQLGH6gHp02VJqd3rAxovAMOUVIyw+RnzjFeb51UvyRPCghpx2SXky47SDnI&#xa;sN2shW+n4BmzW4u6O8GPIzWqbwgqZVDwLWYkI0AhSBYvCV5wlCjuJjbAIvRY44tFJqMlMw1rZD&#xa;cHlADBMxPV9e9tU8QnTGNLUEc4bEhqd79DGnavg0FeulbvuApRRuqlKa4BzMhGq55UoesDBv+V&#xa;cEy6w1FZOOeozDcen644OYyFoDqOhegaSG2s03GKM7X7nA+4diMhM9rBW/RWsvcrMK8n2keuj5&#xa;VAyoGSYXXBQ+KBaAUCJ0eKhWg6WawSilgWpfiQaqX6r4JBXCb+R6FQpzFkG9vhRMDmmfk44Vzw&#xa;vaktu4QhimXlvowYAjTKPayYjg9F9aqj95qqogrqeoBvYARU207gEopvG0XHoWHK6S97zSGsWl&#xa;CmFVq6hgnLYpuFnb7DLRgnfEMsrl+Hnomi4/Zu/o0ueE5DXBouslfxIOhoQvI3dFEYtgCxhjXQ&#xa;Jut7qPPS4p7GdtZ72giD+Z6XdcmT4tVvzZT+QuuCzVxd8jPACMTYLyhuXKqWd0+1nXRM9z+9wS&#xa;uwRI8ElzHVH8EoRBslobiFuiKkLELiGf5yBMYbgeQhleM/MCaCHR0CHwD+C4XLMEDpjlDh4SXg&#xa;HCMg4nMfAIcdI9O12MPgdcCJogIGJP354FidFiJcBJ9wIbg275xL7HOtYri89cvcAP57vy5xLp&#xa;DQ8+KcsUe+nna2YmM3WkegHHtvAmbb1vUXtVmmU7QiVT820U7sGejILoaws9XDjeGOn2GOZFVb&#xa;EgdZ7ipYgi6D+BM8WQlxEYHo2YVRH8Id14oQvbsQI8WKvKOQF/giGruD0+KKhkukQaI5vKMChp&#xa;48/eADcvM5T4hKvtEeRh0NxBdAwzk85LRQI+ojOMYZQv6zBFD/88QgJG0FRtgX37NgX9P4FRlv&#xa;/C6KIa6tc0YyyTCP0/Joznijmr2KkgamlYjoq1yMUB3ZgFnATJF2bOHhM4lfVuaErJmXMvpzPS&#xa;7eJZanrL0LF9lvwOi6w7m5JgkuP7Or21vfUvjkbvQQD3Ty316GMgp5Ut/8OEzf8y4W4lakz6nh&#xa;3Ul3GxLVquw/CdEVRGYDLVLkfDfVm+oXzR/Fd0ADZQTlymSIY5k436UCWXjLrZeupm8VtLG+FI&#xa;MFqEFtDW2ojgThbTjQc0MwAzGAFktJY/rs1uEpuvNAJlRXJzoVuvUFCUV7iKaIpKofiNNuWVFG&#xa;OTzRNBWLnzArvatDhCrI3HQp4Ldkzm5PXFJI5HOzpLa47MmyyHAmHA8gfbsIL7ej1dS0oeO5hZ&#xa;KCmuqnd0Hiff0O9GRVozupRnKEOF9nbky/3d1YDNjEJ98s/FeqJDQ24tVZHawN1eIGPTMUtjrq&#xa;woKoPFajiQzqQrg+hMTtsUeDX5hxjVtJzoWkWH/oetFEdWvKA+QWYeH8P+S07iTABJjJKwDVAn&#xa;NAmCPekb+DtUO6q1RG43PsTs9CwlOOhmF2kmMsZVJxD+Z43yj7DRYItu3kYuaHjAooJj6FKYwp&#xa;Hrbmk4Cceww4GnRkNxrZTdn86JIjH9PkpFN9RMg1kZ82ITSL8nsyFKu1Y7Y2y9AUm03xyiD5q/&#xa;r90zidltwEvCqhrE6voZ5JgbyYfL+yCkgroxaio4AtkxidGz6kxVzU20OJyHReKUBFxiFKEDrt&#xa;a7Jo3VMd0855EAFcq/eLrDvcZ6QZzIJbMe32xTK7v4jCwKWNRKvEylm48XjlUYD0bgI7WXF3vZ&#xa;FxgjYaiZW0drVdlMVGujZ1+R8PUGNlppUdKXZkPJ1yDVMZFxsuChq5XoUvLeGg5ljPDWn6JicO&#xa;AKMJUd4fb/ZcKe/8uEn1SC/zLhSsCpWkzv8r9MeIwgDherhnmqvb++pHMXtQ6aCRWzedSJC83w&#xa;DjNU2TW+sRlngOVRLFUZiBJmjvusCXex9jgaHVltGBgj1hcJhEqN10/8XT3VoeZwXwZ/X4Hs5c&#xa;SJNUENpgN3PRAblGq6+pj5QP0iMMQTbdkajYN8KM6i3k958volcuZHXUPHrx3Czn9lv99AB3bj&#xa;TP3uDMEsO9S40uk1TMTPKaxR3yR+IKQrLGu1hckm1eduPFz/Gjw+CYbhX3hZj0BsnkSH/LDWTP&#xa;K+Xlc20igYTt7J4/Rmw2M9UZootHfeKNyp6Duf2RCe+cM0qBqbGCFfFslz+5tsuQ2715YowOU6&#xa;o14WNTROD6Z57g3NVzePJi8621Z61ZM6/eLE55cuhPxS8xL5fY+BvPblUs5BlD93IzkVWC0Kwx&#xa;6ZZ9LsxsSqtPfdJZpXhIc9swecpKUBOJFdXNbBliQ002bZSAfXo68uHkJc5A4RvNhsGQGxYjnN&#xa;K+CJdq+V4j6Z7IE2zx7kpwfGykqjlcGfeUoiEeitQfYHJXHBfI5TEJtHQpeabxdiPRCxu7SfI6&#xa;8GXqdUTdiQMuShJ+KhlWKzySSbt2RbZ95JENxS7fMrll5S+unHEXR7Va7Zi4/Zi70Lv799cpbL&#xa;ogZyEBBeIHTiS9DvxeO/ItUdIIuhXxGlnHpEilHp9nMXpL2PutIS9+z4x4OUJWBn54r2sZazPj&#xa;rv2Oeow5c7KMWc82QsPp8qN+LfbSm3JyWhJT/kHkHLPHmZfG8+H9o2QFD8mCcJVeSN9/k1LpQr&#xa;90fE34srNLY1pK1nVuacmO8jARaIL6zfPyIcw8gvVdxyZRyt9DWEPbqRnSuYZ1bR16Ln9HHnI1&#xa;n4KTdNozR305WicvhP3P6djS7wf86EWf8T4dZ/m/BvdihYvGIeZIk+9CZsafxZ1ES+X/mIG+Fg&#xa;5UHFSo2OEnbxeYY/zMkJv0B/hm7XqYa7/UW+lTt217LjaVj/RH9wvzZnguNM36vu98yD659+n3&#xa;i97y/RhrTKh8lNJk7Z05jt0xHNhkes3Wg0i+xS5VMYkcj2uKjhrAPlGT4y341DVWQGVjflVlS6&#xa;4qdbKZADYIWBmpIYY3Xly1WN5qbLrtrax6feOsfk4PSsPFqYXum1Ne30sBjRknJCOH3vpKMOZN&#xa;m6yuyq7GXvFdaNvHEc7UUCYtzCEdSbUJTeL/QRnZOy1RivYMLqk/Wq2jRmVuWmU2emgURpj10E&#xa;DCuU9WYnp0C6V+ng76KpM4y14rBVCenVa8qwynyWbxcv5kmjAJcR6s3p0iYtuYbXRstykRULnr&#xa;q9nIwR37gLunr5a25khK7Qccid7wM7ZU5SB2giswwkQeyomeIjnHfdg4j1FelDDiTvPWCiMq6o&#xa;ke1TU5pZkCXazEExAYBGDLDoDlI+aWCrVOwiLFBPv520cwSRtFnCzFGfCpaYfh8aGXbA3EheKP&#xa;yKrhnLLjuah//FUMd2BHEeFiQqPhI3lVZV1lhatwppnlIY53ffwnmRr+lqcbm26YAOfylN+Av9&#xa;+lCGXomBEDmneN/9wSVlQl6OB8ek6r4E5NcjLFlkx2q2c2GYyIpsH6ndROo3Se8DUnhnUeWNWv&#xa;NmW3raYumzH7xtQTGY0xHjHInG4y2xnw1qjIGRkZY+lbkoukJx7lh7JXTKUDmMlO/sLhEfbh+j&#xa;ZCglNd7gOUZyw7T1djti5dDoDtK4mxR9I+FTj9wOkPH9xc5ia3ybEfl1+WOnYRnj3YxCELdJwt&#xa;WcG4sP4QtkXLLddjb4i9o4+ApoL8GGrfj8RwEjY9u3GYhNI+km+3vSHoWEIWREgwxl7Fm8jUEj&#xa;Naxkz3g+19Tp8yvM0ApoPtGiRP7EA0MokEm9polxCjeI+qG0FYuCHyLHg3oozfKDDMCJ5aYG93&#xa;XXk2NKQeSV3rCuWC+p4bI7h+VcDs+lRREEDWTQJShV59uxzvbdKu6G9GmMs/OKzQe3N4zfpHfp&#xa;RXPDjdU4+SCYXKpJzNIWxQMkJabHeLq5yMGFs+WKRrHOYr9p7zq0ooyDJKAU9W1FS2kItXhnyS&#xa;K+F1w/n4itaqJskPqz1UfkhoglqCEgkjLk/kTw3c8zsTrhpIePaXloIYXhN87tOdyNkRtotpBB&#xa;BpsNYb9NPtlj8cZJOZWZ3MrT7E2DuiG8VDK/J8Rf0LKoiSE8CumvmzuQx1wVZX6EqQavC+Q/oY&#xa;XMEAO/0BcBzxX543nGYlmESRTJ/aIIQbTeGzPfBM43ABHqraH8gKaGF5T06KAT1AsSUB9j0MY9&#xa;/X/R9o7vmfbLum7cwRPbtm3btm2bnY5t20nH6dh2OrZt273e7neMucece81x7L2ONb/df0HVWd&#xa;d9/qqOxVA9h0fVBjKKasKKOeqW6exwwknwo0m849k6z4fDXhHsdlNSd6LQXRlaI+H7v+FPp6z3&#xa;Z2eXtqTKdoqULm/0vzs9Yl4Wu92sxCQmARUJnXgEhwVpeklRqdPrDRhixyXsaHDkIk+RbmZQDT&#xa;K3nFOAHsPS/wpJ5hR6OwWHHt8RuOVUc+dxfrXfSTfv8LgppfgItsNyV3xJxDnUI+r4YnsJPja+&#xa;r+UdgoTYMZNkMEXtIqHCKWjDqdISewNLea39GjIi0tsknP83+Q4hsJxO/kW+a/8j5Mv232fAWC&#xa;BYwMFUUjDftUjKWDHA10r694ECDclyZPLuSzpXVsenjrkX0Oqq9XJOtT5kq5veJgAIJi6G+pMT&#xa;5/X0Wytva28TW7/eX7n97d57HGh4f44fKPZ6Ul0ss7Hriu/T8OFPqUuB9x8cZYPob4xkipbqIH&#xa;aIAxtb5CDFMDfHUWE9qlBdXFGUGR47DKiMkfRbFirJgWsVGLUv0shnH7Ch77fUWimO1/rqnvd3&#xa;QfVPlvorIxReEwJhwpEwMQ9l7QS2MTAK73Y1RRPBUp1iWsFayn1jWjBvHSBv3W4afcPI2DVdcq&#xa;Bl1mUZOyD0njWUMBOaGiaP3F9xOp8vp1uhfuHxxJBkrnUMaUtMsW39AHwQMgiT7JStOgHWdpXX&#xa;ZbEHjRadXvwRIIorqGfcaHG047wT78eLcrUYi3jOBSIjIN2YcNZRSpqyQswaysN2wWG1Z2qDK5&#xa;8YRDYsKyamM1/0gwpkWPezI8YH42ShSpWZjrEDmeePTHF+Jd5qOuwrWoX9jIOpu512JhXoBQ6g&#xa;G8RCKqsZFmxgZJHq1bzUQ5ELh3EXFG7vXiL8OwNG1MIFF8ew+kcG3DZdVYAsjsmVG8xqDV2xD0&#xa;fXomMFQIlCMhUXhA8046onFb6eY6cSc5xzxV66xoqpOB6EKpha/czbQ2k1pOaQtMlmjkD1M0zI&#xa;J2XUg+VTILr/8NAdpOzoRag7jvppzVU415fOThaRBFLgHaWE4LKUg4rX3lc7nhiTppsJsn+jOi&#xa;8NkUNqnjCvWbMlNrJ6RhyiJmXsWq7ebOLN5ykH3u933tPiqQvrwwxLzFFDFAgD0DYVVgO3hs/G&#xa;39lh7YiWZsrXhI22SIh2SCesWznJ24ZecAIv59eWI2XLs117b5lhCHFEVXf86d4BrdrfzkHOvl&#xa;nIF5l5Njy0WR63z5bsSrZxiriMxA5eqlWVyfYiNxpvrVqiqa7xmMSeRaRGGALSj6YpV0okgwfq&#xa;WC6XsOhmnFayCek8Np3oMeaYu9iTo5t7PnLMxfZsgTJhleZP+SK6cuHltwRtxzNj6KcqJE9Hbq&#xa;wZ7F+x44uRgOAMaM+N1wPHL9PoUYRlbqFT9BNxJo0KyLmSL7osvV29rXfdfxn+oPVpCgbykzP9&#xa;eihQ8j3tMUN9imOf3BxSuumxTKfMukzy5xmxGOWz3YQGG79+evY2UVyD3q3gfuUP0QDgNTcTfW&#xa;62hzQ2kZmgVHG53OhSW8xkJQmfbLcw9nL5DGa1+Lm8qGlV4X3BBkqiK+w8yeQLsSnuZYiNtxIb&#xa;ZHCjoqWoiwY/Uf3UE6myQvMzJrfsMLI17kvjp3zkxqrG0Xf65TUt7wNyT+NttipJaODzvkgPST&#xa;3S+0emx5kcH+/gTaLNTICesBKWhmBYpgl5q3uWUJTL8U01nO9X9TdQEmIPf2FEl+NQyaRTqc+o&#xa;TmmOw9EOU0zfcQyNAfzNwQfWKqzlbhYpyPgA9hvYznnFOIpsaRCbG4L7apDzwby/yJflN/m+/i&#xa;v5ik6rEa0//k2+Z2S6J2ckvMX0P+8GU64XIeRPxeSttk/k/D8BC2QRhFkwCHAQevBkqQ6Kse9h&#xa;Gk6YhZHu8eMN/EKFSXR72XUTvPurqXH69wKj/vOSsLEzldtUCxmvnNfNW9RfVDm+D7vmyJ6+PV&#xa;BqwXtfUW6MjUFLeyk4g5O98TABc9/v2teGUvqdEA6k4UluipsyKpR+LRDgxRWRWB98118WO0P6&#xa;Q774gvpDw/3wdQxiJexXhjl/kS/XyBp+4b8lX16m49X/OfJl//fk21AMrhW8TIRUhiRVbLHH0A&#xa;ol3A+YlBF4//KJ0G1cgXJxezNafWB/qjSVjUlACQrz7nTEN8n5tu77xDn6d/1+usHtf1inar4A&#xa;j7yzmWQBVHOWNJbdVYnUNSkq4fKZpzz3Cv79HogYCUO40ij98NCtqRwr2WaSOx7BDIOhSkqNeF&#xa;i10czcl7rCjOOVa0rOMVAbpcVle2ZgesHfd8HZsMVBxglJC5KPQDCEevQ9o+27l+SGvmbhRd38&#xa;DC04kxZmhsqOnMDLa/vE3Z/HQIwhMUG/HwMdlJfbymObJhJmw3fg06tT/rDDWgHVvk2NEI1gyD&#xa;Q2iMXIGHYVdr9kWIeSYDYg56iYJxI2L+jLztKqQnMJlddIkXKBJVce7219Wbc2sU/0dduK9zgW&#xa;0xGDRMd4lU9WtlIUBHQyEXkI93o2ZBNfSQMQzVWbMcVuf0krDKhoz1RyrmewhTm0kQrfU3AIWy&#xa;tue0jv1ptEVARJ/jQ4hiuS7vMGGBpFmqQAkoT4E5iqCQYZPMgeSUyON40ydw5PRmAC8AcW1AAE&#xa;4wizlKPL+aN95aZ236lVhbDMLPK5n706G2oAw0qw7TZaZ6GuoohbohUec9goMiNF21QeKR26pk&#xa;z3SPAPOrg4UL3dOflBivBr7jGsccetlBjDtpjGBJbw2QOGgvX3sOZOazt9RgVFdtOJ0s9hOx1l&#xa;UW04zN+CcbIaAyT3TWS2jcEvjhEiOobjeGzTpZ6DBFe689X3mxPF6dK5fDeon1GYmUrin0Dwi8&#xa;oN4JoHen2RfISsK7e6uCSgM2nTTEu70AeRMwZPwrHHujhEvowecC0FGJ+IDV4gXaDps7PDn1WB&#xa;w5dBB/QxrEvgOffu7V+9RoevGsP+uLkm5VFS6AlA2E2dz5zE0+rbW8pIeIL75o4qe2KNKVoGzT&#xa;fcEec/5HADJkTqgGlahMIzgE40rnpKIFjgbFwDtUa+i95vfLa6wn3BFeWcRBBecTWgJ8FLeqTm&#xa;yWKvlCW6MCsKr4Hwm3zrH03UNq6XLjw3tp0bH1DtXrg77/SQItuq5oaCDNMKgNMg/iJfWYuU8b&#xa;/I901X+A/5qtYPEKBPZBTfeHslG4dJhCvo24oVEZP8Rb6Ef5OvyLzub/JF+xGZHykW+Rf5ktHn&#xa;ucPzFsa7mG3/Rb4xbA9sxZH8hTXNJzuxdv1NljLIYNOB/4V8R7Khrhl+ky/hH/INJTD7UhC+cy&#xa;9/vCbKdQdTHfyHfAGhv8l34A/5WrFYlmAgVrY8O6IT+vnjl1rD+ITAx93XXU6razQiqm0O3yAI&#xa;hUKO8QVcXLQUoqvuZ5NoI1pndRGl7A4ZtWNwIknyYUk+Etu+ruiTnxK3hGv7hST6zX/e0/FFhf&#xa;gJSHvBu7vnGFHleoa71bWHrhS/M8uY/ibfzN/ka+kdnBZk+Zt8+fUmTLHjZmdEXOoIcqQ7WFUj&#xa;7B1WVCGmcXVfYceZgx4XYFBSC/LvnSvPnw/vt/rYp15uEuQVX2GyWS4Lbsk5JzpEXOBfJ2CSUk&#xa;caXwGkRB6FhL3V6haJZU59y07fr/H2sJW2m++j48IDbFOF/vbzhCwo5f/nyJfjf0O+dIEFKrbW&#xa;2CxgLBHoKkloSo0SCtYM0E2yoaPf/mk/dK7+fydf4edvOxJtI9TJjP9KvuhT6uP/IN+VkUzSUi&#xa;XU9zSQoWk2WhxzNz5VpvMTldUtRYXh6b2wkyTJENFCLcm/yNeqfRHwT/I1UpyqNZU9//iLfJv+&#xa;g3wfSZiWojX7v7ga3nKFv7UvRrKUWZiUsRdxgo/N5xwg5e4GrJFdmVuEq+v0N064jJaphFxQhh&#xa;KmQ/Hi51LFm4/XKVO3mdTs3+0bsvzsIcPAktNqOoBjAAT1AOKDCk/HGBuGSlsz2aSKKw9uBQkB&#xa;Uur2BWdaHE0ET2Qn6hL8jTYSnssRbqiINsbL7YQyupywtscK/4/9YBLWJlrRN536N/keZJePD9&#xa;b+Tb5ngcwsh/9Bvqd/yNdp6zf54v0hXwubAT0XRhbpv8n3j/3Q3L1E/Df5Yv0n+8HLUWJQEMeM&#xa;45mmUlNZw9TdYvNAybjWIImSGzqGyaKEWZkNjN+33iqJTacZCnbYQUcUXw7BV+0pFOeP/SD5t/&#xa;0Aowy4CA//Yz/g91hTye24/rEftBcwqaHNJ9NoFKHDLhmlBKd1uVM9z6H7q2U4jcxcoeOG1Wco&#xa;MD1SsiSVzDv9sEmta2IxuCiiG7/rrSRcvOxzokY914HuNbGyXv9kidrtiADQMdikwGoiV3K7+A&#xa;WFLl2j0Y0GmbGyFIqy9ZmGDIiVBgZQq4ybln3acCZrhDZZ7+2J9XOQqegMsm7dQKvAXm1nrXuk&#xa;vtLYVeNit1sJJaypLKY7WYsbeK+jZFk1mq3uw0vF6FQw/sl8O/+R+bKNOnGp/sl8YX9nvsLxXs&#xa;QTlP0zA8oxbw0Qj+evpuJiS7W94oUGYv0kMqP0Y3ZXd78z3/B/Zr7UfzLf3j+Z703UPZWH/iAP&#xa;nPWfzDf0H5mvxqkf0e/M90vO1/WvEf9qP8zp3Z1ihr7vA37bD4l/2w/G87/tB8zxw6MK5kQdsI&#xa;QYab6wrN/2g8V/2A+U/7AfGv62H0RDPQpfiziNkzlgxyB1WUXwRLSJbruAtVRW7O47AtWON9lN&#xa;MykQiDvZbPIfqF/bZNSFQHm5U2o/RFhWNpzxuR+zy67K5A+/9lbHvFLzj2KDNlvKKkEacOsNSN&#xa;9S5Ten1mU+7q9R36PdbJpccyXM9kALrRNxj3buoRg1iMc+PR5nd27Ax0VtAz+KThdekSuWs78w&#xa;u9Huhv3JfOkNHf5r5tvDfj8rIFhA4QW0xgvpSw30xrAPbMIh+9t+AP7bfoD639sPCf+0H5z/xX&#xa;4IsUIeZJgEhwwFqfFOjGwpE/cToWkNqgtuHzFtw8/XlEq9fvQ4xHPaiByh98gzETgtKhm2UHZI&#xa;tpL9wHk+u/+H/WCe6FXKJ3vm99t+0Pyn/dAsTmZQ8dt+gPxjPyz9i/1QGvi3/VDVQLcbyD9qsI&#xa;94T+rDcotwt2fidYZ3SHGgX/mt44AxA8WqicvnjHSYfipVZPVqv4MIFXbLW1L188+jd8u99f/B&#xa;zJfzP9sPckhcDDKgJAKRtFasxYTfSvJsbS0VJehnSRrYkqQU9xg4Cf9G39OPGfOvgVfLVKLt5X&#xa;wrje+yuqd8zP2kpgaK+pOuuR++b1x3T/zdH3DbtD7DDmzaB028po45oxkhvazDDSWuXQkUC6lj&#xa;5f3kP5m22igsWeeqtd8DwIYQcptlnD1ZlZWjX2QW2/8m35coMfgKq43JZyW1DYd70ZzWSVi7+N&#xa;3bxUiykEmI87lN5BBi77jEaZlrYDDM14QXcFfNB4mNLO28vfjPDXFokwYmHC06tYcIYYmX7KH1&#xa;Q1Q7R+E9YsAF1Joiru74ospaDgMVmTAVvgVBzbxEox1WOq2mF32yVFF+nKnBE+R1gt3xJEW/Bd&#xa;CUf6KB2sccADfc89JkQauqjNtn4ofK7ZLDj69saZlXPtH7tglTNnwk4i752mKQ4hhyuGHKvxoC&#xa;OLxMRK4jAvrDmqbP9gCIpeVrgKO7X9SFI8ozCZruLayGcf2jUiHLdg4hiwk9N037Uz8oZaCUuQ&#xa;KNHgo6ghIBut/kkhwiCGX4is6lIcwk+JWYEiSYARdHcwVmJ9KTz+X9wQMamrpExCQAppGMwdHt&#xa;DjvkkdH985x0Tfd7LbEwRCsIc5OsIQTeGuzyRq3p6LYqhbqmiL1mTAh9qh6kSUWLAcb+6MCD9d&#xa;7TI1wdi0FPHRPIExM9H22Tcqt06lOd6Fp65oa4SPaK82czPu4Uq2XUOa11uy9Ft7KGxpDGRbIk&#xa;7jNV7SDuKs05GF4UctzGra6iljM05b3IkexBc8gKDqhLJvc7XP2GigHc8yWg2mIMcQFQ6wjfRi&#xa;gthNslPkCEb/M+BPpkIUwTy5dk6cjd6y74PQIVr4HtxluCC0o9IssDuFuI6MrURZC1jAuPN4Al&#xa;rZhF63fPbbw2oOhdsV+lw51+tBNGRsYUY9/ZcUesrqczNGTYlQUYMvMVtEHP9jnQtYb6eh/Uvt&#xa;mJzHNYlznC6wWUb+OZiZ5azIPq6zWCfQrd3fUhWJRb+N0xUZVRPSMwE4GiYcRc7MlDsWJGSlA/&#xa;g5H2JgRsoiY5V19OBdH4jmSoTGmb63UVcpc1I/SaRtx18aZiCafQiRSySk41WJ0U2JQOCJgKPZ&#xa;Ru0JdJf3bR1mD7/OjiGKb9VXTUJG6k1ezKhcEMmHMslBctlkHIOHiNn2u6KCdUGA1OylOtl9mo&#xa;slikjdafs8YR3k+CfLgSDmsIHSAHt0gV9Z155+VCcH7at5X6ZpYQWZg4pLq6IZimB8yLzeHFmC&#xa;AFzzNU1xspyyv7fZb++MKy7S3xzdBDwDiCwL/QA7UmvAa8Sm8Yqg25gt0C1UkdhEemdD7SJwxf&#xa;gJ+VBR2ygAFBGlCamVNgT5b1itl5hkExKcKmjo1h17Las3KhXUf4TZ8RqRfrkyDY0EewEOSR3i&#xa;mgOEjRRzJSGAzn22XCpZvlQZPEkcMo6c9rOsx9RJxiTQnRcINN8TsEoTXIMbI+0KsBXN6qvmWU&#xa;UWjdVAu0NhR1dO3hZzrZWzvZHzUn1Lkf3ig1kD9adplxnhpzpKr2PjSOxVlK2eL0vcNGfV4xVw&#xa;dOIErMbmMZ0vWGN1hT/yLp0wg+cZ0+2gj+hZYa+ssQyDilOpHzvYKwOgkEKnr97aBMOQH187nS&#xa;tHFErRcoKuY6hVPGe1b9LD8fn5vKGvoXhKdfQl+izxg+i760mofZGlA+gUUy38/7Bb3tbydDBG&#xa;RPISaXrfc9r7oGo0dNUdp253MKEUF3uepSfPyx0DwvJOvw/6rDnv+2DuP+93X4H5VWC8onaaGR&#xa;3zxlwiTNZisVDEJRETRIUshgGVRCCA1pNIAEITCZY8JHUoyM2dEMZFcp9dT6wkg3R21ard2iYT&#xa;UiDyEqosW6auqxs+lx5ZF3q6KxsbFqo5L6I/fqjSw9CBNkP/Uqqz3Le6r1Kcv7kpPd82VuOIek&#xa;IPgdaW5+lY8W7yrMUsvUlgVpBiTcwkZZYm2HwGyse6R7Qx/zUdyLeq1JL4jvi2Z6ycNQwcwFd/&#xa;RjoxfnirU5FQ77T57AlNEVJWc9c2VdceLEWR7HVVSZy6HHoZKQmMvDkpQSuBIaWrTIoV0Z5tN2&#xa;ayvrs7W1du1Tbqy107alRff5psamxSW3BluDH7YW1qCt9SQI0QPIpHfpEdErbx/hXWOs+ZtctA&#xa;inT6G9hN0kOdfkQt9Wa/nx7CPuRdI7fs5o2JsSYM2/vgfeSDnrMlaRA/KFZiQOKGiHuNvaGYWl&#xa;aZHtzcYul5D8OrG9l7PaiGlH4aJGtTAjgpDMmVGT8TqPWzPToKW8GkWq+HHs4EkbMjQmYqtuky&#xa;d5+TsNAuNFyvQrAP58cK9j+z2odhlieOiaFlyJjS6XZOyocwD0lWMVMlWNhjNpe8zEFWUu9sB5&#xa;O65sszEd85bvcRE/FLnGoZ0JSyKQE8YE69NvizyrUjTwI+Es6sBS2Lk31HA29kuUMriDD+OWZD&#xa;mTaI2ShLfCu+IktrJ6beqOFv1+ATXwciDckzfMyAGopHSvIKrEIy3jgYruR+1kXWeEtEjOTIDR&#xa;apFGNxom4ow47xO+mUs+iehtfHNg4cOYQ+OABMnONuu11JqVau6bPqBCryJJm/mxl0F1YUdXaK&#xa;UpDgvwZKhmHWiIJMe6xFDG+LkMwPWtO4b7tcjgVp4zalrZyLdc0es1XJZBBFWlHskJ+WW9bgMf&#xa;b37VywFDOlMpmDGc4Cdnw6So7PyEyRYiNNlr1jzX5EYDuVG+RE3gIjMtR8pM4xej/G8DGdlQsh&#xa;RWAZ/fgiCBpxhYq0mVsufSgO04HsmwSvM4ExOlSVmL5l3nBbF15+U4Zq1jSO2NjoBWiXsZhlQX&#xa;LXk/ex0KQG1xGb+SbCJH99r2XnEc83gMVM1YaNyJs4k1idGPbguytVsyZ18V0L1GaVSpTmo3fO&#xa;3Bn9MqDH+N/PJhWMI5bM6cVp5Jl8T6bEqVCdTuTwMMByyHA82IQ/7QOmqZNRq5niTtqQQNI9kE&#xa;lOpPCbIuU3oMR2AKqpz1LdNo6KTvpOFNu85c5k5+/onTgvt8gUE63egeIwKIE8QJfL+XuQdxN4&#xa;BK1puPrpR6ANwnxfKG5MgHJ3Ff8YnzmApdlzaU5UClklHlOG9qVHM5a2z5fHaqz5WuLeXzgoST&#xa;3mUaPUZ7vI39pSCyupSeMdvZJ+bE42NcXSSRfUTvCIYCIQ9SwVH3MThAqxmiZqfoa6htplp5Zl&#xa;mmHTPgylpI55gs1VCrfbiyVbMJ/GhI1h2rSB99lgh4sAX29f1mxtYyTPRtyViChLHeqiSxCyqV&#xa;lM1Yx19GWjqW73S4ucd+zt3k2xPk3HeQEkbZL0dDCgxlogOEcga+3QieYNtqdGCmFYswhE3W0R&#xa;e++XiBh94ydzGml5JTZDnMi3vwFuM49wg8NhSbaDAPdov23lnroZY1kY/TfOyURWObvBG6UCG7&#xa;u02BGl4kx7Hg4jUe7LgMx6GiLcpgEwgOp5Ja20RfeHcKyAcf5a3ejb7wHhT0uzRBOmb4z4FPmG&#xa;QotTvKKtu6XwzBZp5m33c05BBuywB7qSgRGaT4r4AcEpQlfpx/AwOdzlVbKXxB3kasCRrfYCNT&#xa;gQGD4j7md7kLI+cq2A0mTxMvaSes8nwP86MJecklEv3u3wrSATIGlhTbrnJGD2UBGlLxy/6kCo&#xa;FBPihcUK+KEyW0NEPVy09sDUcmqC9ZCGKxu+AX4uIv6mbnAfy1FaQIgNDoL3Hn4pdfpqdSwHfg&#xa;NAjbyLUK/ni3NGi1Ij1KwONgNOgKpAbB/skgalDTjQ1aAo3+WMDWYPPQZcgK9HmCPVrAkFAOuj&#xa;jxRon+ziQx/W7cmOiLSR5WDhzh0mMuBnObozZHNDZAZ+5LXMA/QbTkZqVSOZYvdrMSm26L4Sad&#xa;HbvqvlaBrIJVojtU+8OCrIK7QC5TGMxJMmkfbivr8OwVBetebs/p+LRF0ctd6SIamjr4tQDHOr&#xa;khyRnD6YAF3PcPq2z6vIujMlLu+ZjZspc6S22aFDGdtsBsyBh50HnHAzliKsfsG1B+l9dcBSMR&#xa;ZhpA5ZGPKpuVfVEBWhqDSZOKZbd1uRbScZNUjC5yXphhn17fmxLe6EhLbfFApGclw3M+7cCxxO&#xa;Yqj2MhV0+UCElOtm4MQwtsClweUY65XLxKDcshRy/egPrSj7LuSOtKXJpqtsw6arORP/J4zAYb&#xa;7TuzHTQxyFM47HpDhJxMKruLIWcixl6z80rZkYG97evFXFIiKZ5w2WiUwENzp8DOfsvZ570RFE&#xa;d7B1KbOi7vdtOGbIPqZ6tRwWNwfg3PssPBcJACNsTPnZXBhFeivoJ3IRlVHGS32XNh9IkbZjrb&#xa;WcuBEbCKPpHLb9+VOJUZV1NEIjXYsTKY7cMXcz0moPEVz/Gu9VbLcIfWzumsDl//uIRSzJKaRy&#xa;HckTrGm/xEj4Dw4eUkrWelhwZZTgzCau79Gx/5Uy/lQxBRb4ZDCxy6vb4wBdqXXtFrCtC2OScm&#xa;HCU3IquSMrmQmh8QwmvZPECSb/ElwRB93Nk4wtfJYWxBhX6AXrZVQwFWCqIvjrsuLqejNPpEUa&#xa;TLB9KCSPLngEIPzrRgogIMcuKfDmAFO7V6rVLwYYmxX2QRyfUDbxC/8kPowgjVHk/XSBdBQlNF&#xa;z2gcz1qQ7MCfTU6Phv3CBdXwIYqq0x9Y/nZtsD6qL1bfakG+BZT8FtirWLOK6HobHTJ94euX/m&#xa;FWqIYNK17nJ3Ly6K/YAcvHUt1NOIi0/HYMR75lp7P+kLZusWz72rp/L9c1l1ZNxjN95H7LHrdZ&#xa;+BUZTouCgep5AwGaRRaxDoz3wfW2mcCVp3X3qmd11jLXUtISoiadUnF++KROpjQzsDK8d2Nqn/&#xa;tGEue9J2jOuqWzYYgC7RcvOv/IVuge7xCU8zUeOr9MrutdJw/Jj4vEUyLJqODSzKe5RxsZZyA/&#xa;9rtA5Jgbxvp5yVd0udlui4TPwcR7+vSiryckH+NkJ/pwazULuYi3GcKIVa61XyvQzuJoJHKyCx&#xa;WOyL7SkLjWM34Rw11e3MVnOMuBDTlkD94lZJkXIZoJskttuVyX3UabU63KP7WKhRsC0RKmqJzB&#xa;lGi1CbqLXndt44mWmCX3rOwICSOfO7OrzyHm2CKFJ+cSMwD26dy361kaqahoiBxODoWZ0JZRDn&#xa;+xnG/yT9RFijTkKh709pe7uyxl1qbu2IhVkhQ1b2UaV3eLG6NRMb1bflQMHl58qf3Meonq2Dco&#xa;IRo7MCe1HeIZUbTAUx1bo5O6I0QNoNHy/9F7RuVkoDqCPSZmsXN4CdrQAq6jTZ1E2gVt+t2eXh&#xa;WniAomenqMrqb5HaiKjyK8B4+riF+Ul/yKf0C8JyAMd56BSpiOsg3ALDnlJYOZRlWWcurSikEa&#xa;PyRk/X01LkRVIjG464sIxBmSdrxtmhZKpLqld8Qkbskkkbb5C4NubWSJKoX2hO624WpbJE4T4Q&#xa;9N95k2aFKg0cBnFh/eZy9fUykJdG39Mb3VEvVHpV8axskbxvI7e3XuahSIUdG72AyYJ3lCrctH&#xa;vBJQ3+WWwyxN3oJSOCy+qN+Ju0wiZmS3UUI3rYiZ94pIlUWYzbCOGA+zHX8qkm7IB742SUiyjQ&#xa;RcJRS1/YDvvy4xCu3fLGrLGJQYS87ucjpQ8kl9GXucS24rI3ZxTTVSpDH9coylq3HG4OsXVL2E&#xa;DT+dCj+rbjtPBeFKDLEZdGXm0xwlaxBAVV+0ziXTbAzNyA1YNUU61fYaZvAVbquNPm4bL9UYS2&#xa;73HWummqDtWpKywJ9du7qj3HpYHnLlyXPnOVbuuqordQHMEbdLrEi/uSd6p8FdllQS+s0ZL9Ea&#xa;5Hxpcuy1U75pl/wu8f0yI8yzTMcTUIHd++Rxisabvl4gzLWFyJVl46Fl7+8wZTBRb2wcBdJW/o&#xa;NH89hv8mhUSU8CqTtMq/UWKaQj6uqLuK1ZuiUHgS94UUGCyUfo3qnOwTXH9CuVFiyyq1fWmHX/&#xa;vb78jPWxs5sXTsiJPYW63+4dx1hybsDe1HVnToy1umpTl72c/COCG/gR1ejTEYaOgLiYdghF+5&#xa;iocO04oZOa7I0Mp0r1u5HMiqpdLHahH1TruXxc1fipY7P7ClDIyU+TfoYPLXvkKLONWYZDWsgn&#xa;bB97eQSF1oX9iW4uy4tPtLtPuC1u8rKNLeMJ/FlL9uHEwEt335wsxotPxEanA3mMW3OfK1zp9q&#xa;/AluVuv7iqJ1Vbc3QaPmGrhqoPPW/FGjPPRs/u92Osnq745O1ab+EdfPC3+Oes2bfm7T7BLvz8&#xa;e5EbtRnKdQcLBdrxSyzUH8owHhD3mZK/R5AtoFyUl7gtQK1+YPT5BlzNAVZlnTNO5HS3jCN4f8&#xa;63VwjpT4r46hcxqaJ6QbfqmD4Ca5BdK62Q4WVl5/TJuZjDREv3JKHUb+PMQXMsMcBMyrOhkLBb&#xa;LklCqu1TIvWi7JSaoVRKgFGjZPyFUOQkaZ48TsPSjsCH6Vwl/fsLCqrnlGhmc0Gx4j33KmbMCc&#xa;65VkzcuvbXKPjb6YcHYqEadi00fms/Bn8Eb0474htF06J1G5w5NyU3Jd+HxGCHAanDsNmJ4OWj&#xa;ih8LjwmF7eQFt2A+9DU+kypVcJZm0C5aTZYfEmfJVxd+v++z5mqIHxR0VuAGGc+OmreKK3gmlO&#xa;UNoJ5Pt/Rfn7JftnaUXOPL0xtXFEItQtb9NUqy5hjDITXQITlULOEV5DV3ZbmTZEXHEPQrTCjF&#xa;kRUcpoCOmQgxxNKco0Acr1BwPBFSygkxoxK0C3pmD3e/0LchTi9f9B6Ndg+8IUu4IaJboOKFrf&#xa;ywX6Wfv4D1nWzhZk0ltqbXqLgRjZ1VK6NsdFbeNoX6+9yPWDZtvVLTRR4tO13pikrehtWMPKsz&#xa;XRVjX8gS97DTyilF3i6Is8yGxVc41tVDhURb3MYVujy5NdkGzPgrtLU3l/wPmtu1j4ZBP+Kx2M&#xa;J3PkvN1vlE1tTXe6AziEr/eiHIitOowRNgNEXlRUwfCCm1tr5PutzwhGi75l9pU0Kjk0s3XnSC&#xa;lJFfZa9uaHJk4caDIfsO836atma1taCQNrMazB5o5LKdONmaZ7qAN/0ky85gxeZWgYaKuLO97U&#xa;Y3u++E8IrT8Ihx50+lTvEeOcE9fPF+/FHTeg4+lrhoqLe40BHr6OA5iIeoH8uKiH7oJ1MeiH5Q&#xa;zwNN9Jr6QsWYWelY/oRIdeKVY+PN1akrgRfHITG+7BF0LAun93PqbDQiWL3AGBUJSexcy1iuJK&#xa;3P1HOcQU8JICXcHWIt6xWbxuoAN1B9l5KMv9/IdkNoGcrqlMhpgwUBhd3MeE7Ars0c88NZWszs&#xa;zDZJb8jG04uJ3adp1Iar4NC1I5Y9xsE8dUz3yzPzT9O3sm4Z+eL9qW30qBjL3hSpiAaPtHZbao&#xa;Yfpvhvpe6H3REJgLbCSmZ++wWAZaktM1dVC6kjdZPa+Z5AMB9urJloPSU2p34cq7HVuFwYqK/m&#xa;a+cYTbL3WucYUrKwgLTqJkSD6IFfnv+YYl7eGDqoJdXwNy8VPLBTVc8vCiIH2QKKyfSgWAov0H&#xa;mRyWw92VT6UC7fx9RBdUtuj/ztVF648jJVPnmmfw7VakcZtqt04R3TJXeDuTSP6QNjMVk9YTZ+&#xa;iVoNFLtgFD5GTO6Gvm/p3cFMtgfxWtToc6baArkvGGsG6Sy6XfLXY1v+7DF4ixhr9/cru8UVqC&#xa;l/d83LxTh7/d6VkIt5X4N9z6/+QpenX/Yum6df/m6b16zS9eWYHeJgDeLAHvbFz3zkKYZw6wr2&#xa;5dNg5KmacAv/ry+TkSdz45SnKM1Po5EndeGubszbj424K/w2nyvs+18sx/wM+2/TcVfEwl2xsC&#xa;98jBT8C5SI48eqQcxmvNroGPmRdIwF6LomQWhk2VazqBkuomS6dZLsqkfhmVvnT2kfc8X6zQ5p&#xa;O508JlrP6a/9EIghW09g2e1wcsftxO8EfcBXwH4WsYL0v/zMZpewzKSLvT337lSAWnKf+IKBz/&#xa;QITNPwNdn74N0Njws5DDbFPTyytqje05xw3wngjmFu3YVYRgV5JcBdWK+Ne5bO8oWB7fB3h7/B&#xa;g/ILgmeBvpM48F0TbmP2yAPnwvlgPIt6ghMOdwP9zqbwG0FCFZGAgN4o/jWbcgmX+0+bGon+Uz&#xa;Ylb2Li/Pfvgf+6cOUfi7ZsV1zaBTSkUIHBaeNKgqdv5wO0oJOmG0SVKmitVuzITozasNkyQbpQ&#xa;8bffwgOIuhD0Q5V7lANw8PlHOT9JP1FPszdsJVcVpL2d3N0OJ319nK/Y35b4u98h8jD5GWls8Q&#xa;9bdWp+ejaQp088YL47fOTl1Dl5ZrJLGwBg5ppMo/GizViYcW2f1EhUGFg03bjKtSX5Kg+cFfXH&#xa;JzNjGPsKcdf3mw6v9/djqEJekOkWvVYBpy5PSAGAhURGhqBT55hDDC9vsfEDI7Mxo7CB8dfD74&#xa;Al3H6mwsS2KsDsNoHmsZW5ASjAuQmrZGd9qpYLh78s2kpPj1f4i6X52X16CF8I+IPlZYN1ukyf&#xa;g0emrTWKh3SL4dcXAh8gl9mpeD8XI+OKAHAFU7BahV6fIBMVI0ThYmabfYzLqCkXhKTBDkHqKw&#xa;duMySMkkmotpNepnkAtPMm9UFGQ5B7iKqpky1F89cLGUpb/lOHOjRmyrikkjtapEsSn9F82yKo&#xa;tQiHfv+AAw3CPbr1KgO6Q1XlrgdAZKKYHPbYtUlAgbyV249I7gxvCWg1z9cKqGNsRCh8SztpC4&#xa;IvhVpkU95KANcdDcflLiTCtTAyTMRKQ4scysAgO2xNc6LYpqIU16BYiuQSu2gT1kx37clJYU9a&#xa;5rPXvKDMGSJj3EV1BWVBSDIRf8OftKhhQbQA6QGX0IoTz+PtSb21Mac1zvJtPpqK3k4L1Bvozt&#xa;1G200sVbdoO2erTl8UsoXRQ80Dxu29DPcoGRa7fRyQB8GG8I4m5fhTO0zbdFySuVKU8x45xA26&#xa;bzLBCMlCKlCM4pCSYXkICwDgwIhmNp3FaSUaZN57BMREi/EgadjEBZFksbUITGuncAEY2UbyHc&#xa;OQvGM7+7s+pNxNNvDYbUVM32PzNOqWwhFN45Uuqiu9Xj8esmsfHUFYlBmMQMDOClI6WLRgOuRC&#xa;Ya/tjuUM20QOJuqxxBgGyBMAvdEEq9PIUAMBOv7IkBabeTBdIRAZf7JiSXrUQVMRY58qo1Zpki&#xa;9nl428hIgfMyrMRbbPqyLH8UW9V5CHEu4WwdW1U72WFIV7mWbV92v8QZAxttmq6T4VdPNPKCL5&#xa;YksrYp6wfhFkYi02U5PjYKFyWvNEQ+VnMqCNSsoN36oCuoOE15uA+OusAByc+BEYF8r1Nksoet&#xa;l8rCuccTK6y+hUU5x+ahEUZgG6HVYu6j6JXqjzZEecGmoPrKkwhi0TDZVqK909e5gNd0j9n4HW&#xa;G1Vbjlc7H1YR16Btvi7xUPG/xhzSTUpMZbLYTKX6hl3KKccvS4jVHKDJTX0C5lw0NxXOm3QWcH&#xa;kax8cyR7ObbBHzvw7V+kQwErnJ74VN1hcgk/hMErS75o5bBlBKYw7Dq/SiPysNafqwgrckKL+I&#xa;DWFmFVrZkJcNbNggsvlm2IZJ16hDStHbpXVw8zMN2H4Vk9Pw1D5qB9wUDMi8mjgZH3C2iYDe+w&#xa;oQFAR0oYTR+09DOeYL+XAqCIdHFLm+xhF45mw2zSwoS05lgFi1E0fLqiu4K66LPsfsOz3pJThi&#xa;26GnokSj7cFpIReSskBPp6UtsD+wl+t8MDItqPbwlubp9Y3NKUBD5g5l3R1bAj60e1ZB2LKElB&#xa;Pb6oolN0S6f9LGVyxj9ajyIAiAU7KUY8NYdEfEQP/QXiq6JCvWqJtd9hyQtr0gTJZ7Hfw1pYZO&#xa;6Zq6bGS8u+p6V1VI7mDItAVz7Hj3sflTQwAbxD1fO6LTbxExA72dYnzVIyjaONd8RljhZsaJNo&#xa;QqXqCm276z297VBAfUahsnIB4kB6M9CPRm6CyN3gxG4mGYfk9gjwNgiJRv1fu165voPcpQxagj&#xa;eTvgrADbGWFFMhmho3sMxMY9OcLfY1g/esYSCnSN6FTMlQVRkf27uISdWi5R6xru8PoNnnvjXH&#xa;Z4O7PuZUvmELJZOLlPPfU6dNHzvPnXwbvspIXIJYdKfViR6u0FRv3sLkvfB1g/lB3p2s8BkIQ9&#xa;jz341WlPXCtge1e9/hu/1Vc6U4wXTHwvtIBnSHJfmIqRAAElUvXcmMGaHRl+wscHVJ+3duvWiM&#xa;+pNvP3QGrS9+NmQaCF+4Gvv1vNoIRRPjYEENAq4N+1Gvr/ptX8Y9mXhaGTi/P/616p9V99B8OP&#xa;DNamTZfAJl8rvgJ8tghBC2HGydaijs02ft4qEqs5U7It7TJkQ9aycwdVFLyDugyf14d2m1IxJl&#xa;XeKYZ/bI+7fS2h6ZtyxtzK6CT3FM/VnR7Z3zuBV2+Yha2tsrgn4356OjGkOofA+lWTatMdsKSW&#xa;DrGuuf7wmnEaY7uK68HAgmkylZUjj8zQlCh5R4VyBdim6EqcqsXEWpuSY2qsmM6xknncgrG3yo&#xa;a1vuBSYyxOZDevNZsppDrFIxgqlL8wnIcVT1kkZkwZOpwDljYmF4trUEYsDMKaOKoPsbzKyzjl&#xa;atKbMXZPMkw8uyTeAOMyk2tuTBIrNIT3pRjLFP1jgSGWLaGYbosEioGLDP2rKSDuylp1aYw6fh&#xa;NNrLcNxItebWzhAozZ57g/5CdtSdyx6uTEIM9QK4OpiKPEMfouWwQTSGbH4YhbG7isk3XtnjKK&#xa;or47I/lROoeEVPY8difscUorGC5/EKzqztGhW3eS7RyxZuPH1aazkOCsUcT5udYtKoJr18kOof&#xa;HkG8AWPOzPuYUcZu1YGIvmjCN8zzI7em2t8PymUDvXHLuguCgESApvx5Pig7JNctx9gLrMaahC&#xa;at6wBG+fmfbXlUho3lAmvdVHvonNy87/EHzG3GCTusxqHnbSCn9PrlXPMpRNYsmE17B7Wvmhpu&#xa;NWEkcjb9Qd5esR4XS46ZVqitpqJuWR4ZI1H2HKl2ZuERGtVupjICI5Gx7IlNNLmK8kAVDJJAwE&#xa;aaFTqxdjyxckQS12LxyZi1KnvptV1rDQdv05Ra8YIoK+J8nRi4B4cmlvp+NQ0i0rSJ+TeEPziq&#xa;EWblTORaNY/8MavyYPH1SoWhC8olbLZOYOUHeg1hQEYE3hLPfT50DR7mtyfakS6oXBSGEMQvfd&#xa;Ln/HFYzVwEAVFd3Yz1I7ZRWVKcMqE6y0m0F3C41WZTkuMxkaay/1yFnLKk+e9ETV3Lm0LnoQ7D&#xa;xmJQGn30NFlMh2KhRtbqV4t5q3aZfImFMdwVximwhYKugrYeslpmCodFg/IZKFlUrTYgC8GT/N&#xa;7PsVH12coXzH0Itj+nxBkgHH8eztFIm+2cknXY6MmIDXldUXvXIx5aBgtvHwH0OaVPSgiIAumS&#xa;E1hran8MAVFbyjDXloRFoA/Sq+nENOyKpfzQu/dbTV//YwcA1q1dZ2XRRs6F0ZwizNU3JZf5wc&#xa;FPvdep/W2x+kcpuIbuQZLJfJps2cw8CzZNiza5gqs9Vuraks2Xey1hQRo5Fly0jqiDT+HYmOeU&#xa;SvnDtGbTsyU0bg75aB6tMo0QKu+FfLIPWRbk0j+j6QbBLP1v+7ZRhKAPb1VhleBDyNotZ6sTmN&#xa;k22znzA2nZop7Tj7ilaxm51UQjvJPm6vl51D7eIQNjJIqE8LflhgCdwXtAQcU0aWF+AkW2ZXq2&#xa;N1l9qHHjdBzdXnB5R88yi4YMPrJKzGfxfYQ7uiSpiJGh7oFKmH9chaHLAh/inEUvqIJaBLZm3I&#xa;L6PwgdqgE+yFzF0t+D3vAUtNb7iJjXVzpoSMC6nbUB5yM89NxSEvoJ95qa5VlldoXNyarh5z5p&#xa;JXTfYejDWTU02Y47Cu7fQGCYRlD+gDxk4XuJmjE709TFqZa9LMcV38/kMFJJdnwAJj4xjq8QL2&#xa;8SJqiqgqxE+QRK93ND2TI1lufRDrpikgVWy22YGKMXIORGn9ab4cxP/hHmX7wcUBvx38ImSYM6&#xa;DOM5HivdsBnNM+WUj0g0hjQy4D2v+wBUt9mNmRNT8n/yaMnV/qrpVWpb03pUoPbnrldAC/9jXs&#xa;ZoXbQWxe4Z2NzBzE+bUKNe0KRi5sI+gRfnGWI5L9Vwmsr3u+2rXbFq5M9PSie7jvu7rPMbHINS&#xa;IdGCQ3pGBZ0axi7s+iq+1ZyO83D7Y+T6mhHQF86h34bEsdFFLPis+RXkqfpQSkwl2Qf1/jqAA0&#xa;llaBAwG1wfzf6gT/XMWi7umhoo76a8MkgV0GD0FPg6tYZRoocTQo6RsaVh6aEAghIQGUgT9b10&#xa;SHJF72RGaXJyiUla61aFWjXXKbqvVgJ7CWBFZ7C2qV2pnSU1V1o9bTBTw//9enLkmJvh70IHrz&#xa;S+4nm6esLe6jLvLPt2liILXdLRDWaF81uqUTLbWPGBOm5uEmOHX3o3rJuXqsN5mlcVfyWTm6K6&#xa;0KFshv5XpLjnCwi6U/Zex9C7sL81UIDls6H6DILR/SX3R8Bcd+mvO0b5VvGZnSpKIl7mGZgtQP&#xa;v1ddF4NH3RnPIKBMkw8R19LMuk3zmLwynh9zWpB2uLIe1bsEKRAijDxwhoKjNchG+aQm/9ChTq&#xa;xdhFJRO+KZq0eOtmROtR4twvlmoT0zp/GdBXZNrsRPJ+VVy52d1sYeBeENbGxpDXOtXW67jUgR&#xa;bQclttwstifrVG/cmmXuBG6tnq2tehQwSMz6FjmsNuIScMs5thRLyQR7x8AfhESDoMFXlWb1eF&#xa;wmxBEERLfEiFxvpvAGbTZ7Vp/+udpkKRyykr5wsc87bjvKMMqDGenTJfwtws5y7asJXGIMoDsJ&#xa;I5hkQHeDFFern2lX+kezxqbc0qhWNXsZcUAENI04bCwRKHxBCjUlaa2bVzplyA+uyji1M3A2XR&#xa;oJewZpP7L0pu8dK1LpLw1Lknql1mZOlMMX7KQ/WCpJNr1xyG3T0zfS8cwFDPQYO67m6qArhMP2&#xa;rNILkCSlSKEk+paoa1vyDR0RzvaNW6OUsrN7KuPI7SbaRbCcfX1NkMCayx6KSbe9bJJK2CXlM0&#xa;gEJc0QquYgxpaNGkNoQZih3iehPNKwKU+bwddIxLSFlyPGf+Hbq1tbwBuGqsCNFbmkUUoPS797&#xa;XSaEQkr2kTEdZb2lRJk/aFVDdBWsEjJnN7sVgR2Ka5ENaSAYxdGLqkN618ljzZKmU9beGnGcSL&#xa;S4La6xHGsqGRnPTnjNrkUjTct9XXSpchu2buO0Lyn94EOmpg/EFGL3MgGrJ0mnrbX1wrVqsxeU&#xa;MqtSX61OMokhgXC0OEz4TjC/pkM6qiNUa0kg7Rr8TPAjgdteKYH9hd4/JEvmoiscD0abqvEFgQ&#xa;cn4fSOVJNg1NTHMIJNFZYenYK0waVDiegItUU0b8LGPAWKMzROkeEmF/Q2HbzEIzQDX/UHtnuZ&#xa;YN3GrQwrEFifyKGI+Z62U7XMz4QQdgSLH9/fxlQTDS4qTjyIY0IcsDcH0vZJ0rcrm47XqS/1hr&#xa;Ud2iuftV0nxIrPt+2Rw2TcKy09uNemNco+FdYROOlXM06mJHGvBtqFPL5sXmDjwasOeztUrHOQ&#xa;DQOJnxgyr/UF1qshckKYq5KTTfWIIvflVbzCkR9kZ2ZxbcbCj+z5xbXq5UpUWFbudXrkZn3DJ8&#xa;sqR64m9e4TqdigJp18lK9d32m1mbdCUCfJijJfTdepYMUYEAcXKhnewJtknYyLRSTVHPOyFHpB&#xa;FpFjyyZ/UwYhdWMKm0KA5Lk04xYfgNcalbPugTEKk6LkTlxPk/viqNSUy8edvQ8V4CGgp3lOrI&#xa;ZQCiVfblf0zpC60qHFN4B46s66cuC26ucMs1vPpPDLZFYNIXZafPJ29affqlcUhNOmQcb41Nu7&#xa;GdsYQdcI2J1hRXYDWz2RW0Y+/2SMNo0kyJIIncINDKxRcamYgscszI65er+6qw/Y0+gYzyiE30&#xa;kJq4+xFPr9N82GhFu1u58IOX3NYGh6YMJYXch9cy2iw6k3qJhrT3QMgcmD+BIr+GNyu0fH5dLd&#xa;eR8Y/Om9tX5jmfJCIfq0tSxK+2BHuInMhtDS/fQkDTjqKbrDNdcykN0DNeDVPOTLlxSKm4IZ2T&#xa;5kK/ttcF8m7MHR5BmHBPekASSVlV+5X3BnajY3dSbPG0tiDoXyuPxi+YOucXJyE1oki5+VIad2&#xa;p0S8C09bxDL7188ZddfOJbWzE649bN2GrKaenjTsviGfOtza9Vk1Lbgpi8U4rZpwnzgn2NDSYv&#xa;pZlR1X4aDVewAzVEGqpIxk0pgrSzwKf+IN4mCcpsMKx3iNqRrSnei/NGSiTzlBrRnqLCKELQ5N&#xa;GhjqCmu20Kx+EKAFjz/mxD0pvUezSKHjcLcg0cehq1WjGUM97Z8G6ySXJbvoSV1GKuy0U6TDwj&#xa;Jb7MO1LeMxl+8xGlt2uIHNIGHUIeqoRhjqOMtwMBrL8mAxLzr90vpkjRqtVGdiNA406WgBO3UE&#xa;iy5exmZmU/4R/vUn+ImizUWEmHzhBaCJulfxHMP4HEdQnHL1rGwRs0Z5d5ZZidHYvaPaBeMtWU&#xa;yYAMcC/guFK4GeehiD2TpCDW4smyPggZGYc9KSIhIzJQk2NTqP3r9zQnuidm+Gi39ib3sHLgeZ&#xa;Hj7V+RcZ06tvCNriaj+WJybeIOWA2Xol26jrnus3Q5xH/P4D2N40xrx1cJjLABQsHHd05piBsw&#xa;J4gxnLjogvHdha2xw148ZoITF3qzwkIfu2rzqGgxfGwQenC+W1zTfe+6w6yREIdgPWrVTDW5QO&#xa;uPGoPUJS+t9057nGFhgDdvz6tiXRPj1V9vg16MyIiFKuqU1gCwrStwi+ICD7agiO1/Q3gXwavS&#xa;f3pIs6NKAaPRrfCZZS+5/42SQDd+A1o7GoK8pb0Zk7btkkrYcauGC4A7IHsm0bzRm1nUId1dXX&#xa;KNc1vbHcpRNv/XqANRkYYrtnnwFtdqilDlNQ4GcEfCx0SlC/8Ou/1qweaA/w6S13qgPjtlBbqW&#xa;APcxcMKe3tFVlHySdUs/LJelUVwA59FGFHIRdlRisXyUawYcMnuGGZS7hjExd9QekUnCkqSGGU&#xa;ssKGT8RTycqMEpdkHjqSwN2DKaq+IZ0FJuUsI4nFMOceAjFzpgfrEGGFyln32DX0qUp+eX2lyD&#xa;llkiowv77ID+DoLoDZrYA5iswa4I01hjux9HlipGrICWaMumqO2T2hK/8MazU+8TvUhtw98igx&#xa;MMSkHcHCdHnIzG9S5Fkb1Hq/AXzelv3QGfo19T126ysFi9Vz6QTbWnDMV1Qv1XD9gL/v6DzvtN&#xa;BPQAIBTSD+O1Di+P8DSv9l61Ky2pk6sjrCrw2EjdpKLPXixkVzxUR/sTgtbR8UYi0pIGsK2mU2&#xa;XTf7vtVabHd2Cl/+836ti7f8j/U99Xk8mbOTPWXe0q8q8keXdBgEXkBw7vTe5oefZofszG9/jp&#xa;jl4fIzu5gMtZ7BcWaVfoHtx2V7eUnxKbaxwJuKso45OnxIuFDD6frqNkf5jbGSmquJlzOZzlKN&#xa;MRtKjoSFoWFFjrFqDQJ/icqOK8mJKsVc7vpe0s4xVAbbGev3+KzXwR5nJkGHmRSE0S/VP2lRjN&#xa;RfLfJYyfYdPA9ieNJp40yKzq9YQAxZuGPwgWVqnpn0p6t3VcDPuLFF0SkY0llmW2pe8rVBgoM7&#xa;k3z+/h4xqAHCOaZOYkD7mX8ZqHWaoa10vDeI5+S9R/Oexb6XOJFnCV8YQxDXaDtJbo4qifuiYW&#xa;cUJBuFBoyqGEosg0in45zp8QQdf+/+2mmH7k3LnLViGE02c1mkroHFWKR0wFfMRz7AYx1lbGS9&#xa;XuQEGks2flJtsJHEaYxm0TMrSUIhdJNhe1TV8l+z8270vjJMv1i/S2MdErtT0OA0TmGud0YuJH&#xa;g7yMsG7IB5WHBZq7nmTuK0FApKjbzTVZJxauueLOVyYAlZgyE954pzvoydNdEvxnNji69pH1mX&#xa;aab2i2t2wtSJ3UhcGCgbORTWcFec6jNS0iVQg0XI8mPLsaAiaW9HwzbtA6zSfYLQu0Vq5de9IM&#xa;LORg0pV/kIjPuYLqMeWKEiYURG+VLRaUkND+Fc4EQjRQrRMH6H71jpMJzFgSxWkV8vwyAR9S2k&#xa;hOCFZaZ5FPTYr9oEZHslecj3wLww1cKJylsrG+1El7r1BPF/ECl9QKsZNhpMEQgbfUel3QGXmq&#xa;WZz8PHkaMRytTxilSI64+LmvNgZNDpX0t10MHpoLEKaxvxrFq3DndRQFUw1tgomLqCzrQ2mFY9&#xa;ydK9lrsDcedAJd+4g9ZDvewSq+MrSn0XKzJAMRchYi0Qjbx0ULxuVLu7CKA3t6I54hluiPCzjt&#xa;BaBYv9Bv01+Ew22UKbpHqeud+B4MY/jads36eTrrfvmGcM7EmagnLaEPIcjXXgIDNFQU9BX/D0&#xa;9JXKq4R4DyfMNhMPyRQKVQreVLHX02U8bQAcnGwSOs2eyaZMXGXreU3oERe6CC3Ieuv27c3boz&#xa;sewU9AWQw9R0F5Pb1sb4Io9ns9rQfpjrEVBvgaZh4Y9TMKuqlPwBRG0zo6Tq3vzF6HQ1+1hljs&#xa;3vJ8H5/5clPPsv8FOBK6ix7afuo1eOC58oZrI5H+sr5QHnT1rjSm+vVCQM/P8TF2Jro97V2jEC&#xa;FSsjjZOsxFHGVAIGFdnLfm3C5ocjjjZZD9fpauo4tf332sNw3j/AjZwmaLrQLuo9Y91G7hEV10&#xa;JqSsNDQ11u7vsfk9AYP3PklUFVHclKu0Turs6X7LMINJ0YtNdYYnzsq2PVDcPqIuEN9i4zCWAB&#xa;P7Ji1NvGEtaPhE5pxtjk7I+/UeUlaX1JKQX6bktcJjF2tee9kTVwo1/EzDE5R7dd5EPDPj1OID&#xa;9gTyXdS2Zvc7FZz8Vs8i2wMkLn6V90SJaOmTIuscMkaGMGuQua8K/2uLCFDTNsEHlM0GYRNKJ7&#xa;pWUDFnphEzB5oG4F1FKNcn8oaCiQPv9AL+wa3U7LoD6wW8TgUVdO6vSXnNC956YI0qRPxHs2O5&#xa;KwRxX1Ha3Xy5ECj2MWUU++yg7znbLbvvBGMHHzmS+DVyldEEf7GKYjekvLuSTPC3aErW72hOlK&#xa;zFMXNeA1v4xR+V0At2ZT82joA2qrpuvpC9Qtb5oh+JzUucwnWcKGR11QndTF6HDNDu/+rV0jJn&#xa;eGCnvN8I1BrU9nVn5BQqv0J6na95ZqhF6BdvwdBaFkUTSVJpO511eaSji1Vg6eoKvPq8pa3J26&#xa;L+/PJT3g+NVAf5syCe6CtvkQkJZN+fhdR7Yt48ZX+NzRP/dmz+P+oGrP9xWU15TQ2Fd4oj/n9R&#xa;9o4xvn17l+8uG7+ybdu2bdu2q3bZ2GXbtm3btm3u/p/T/eQ+p+/N7XTyzcrMfL8+c66RNcYAEG&#xa;EALBoBC1wGsBEgJJZaebSOAUrR+YzFpE2OIV82SVjjCSYpLpKvx2FP3JJcAhMu70tTT+KuXrkk&#xa;FFGJQGkJeF6vOe43TjeHuf7+nyACCH5GZ7K0DqPpLZzyciePM9H9qcbtUpy17TzNees1iYvSKc&#xa;r1nrsvBxmgI3MqTbTWlqyaC1NGTMe3EmWGZy1XRkqtDz6ClRzjfRM1aTX1Y4mFW0dsgqfuPLGM&#xa;LDb4PuutZmc8LJRQgNBDT+riZCnY6/snXlvJR0nZmd3Djs1dz7tEYExX2Pm0Q6ua/FKpjMPodL&#xa;AowoSaiRx0qSNzDTOn0ZZcwYljSEOi4b4bxAigQZYtdkyuivgyIevQfEa1oxqDHFYdPpNNrJAd&#xa;7NusSjkiiXy5F/h18lZcyiyyrCSAUGOgWBnTgEcE4RUdBvzg8tM8jEx99pgmauqmMVnx2BJnkB&#xa;cDaGhHFsfQ38ZQLugDwWnHcwkgCYtCMsRc8XZuU21Tu85KaD1BXVy6PVVoUcS4PaJql9oZdvjU&#xa;A6vkWwGdPDemYNjUfZOuyOSxYiFauonEZy2TwM4Mda9Q5aP6zlf3Fgr8+W8FpBoGEZFk39MS3t&#xa;F3O2ivefJErFqmpy4KR81ttombadVUmKj8LrUSaMm2GQV6LXv00ZoKrrIZrX64LrpD1q78PDxy&#xa;K8oXoNA3Q1eC31p667Fz6vMGXwLx2WHoKYGtjCSHtFtPv93LqNpCitYw0LLFN7RXJoxLyoxkdc&#xa;bORWR2K4udOy3mFMerVB3sH4FbOZtZsplD3UXbDlUKgLqPxtX7KXYAz7MMTUMumTDpV2LTz3Ni&#xa;PnboTivNcI1nUB1yrTLqzDLmWbViDpmCKzob2eSUin/llDtVg0za8Pzl/HLIMWdr9ctom0ovfe&#xa;iQzFBl9nkBozgxSYXC0m8euwSPkxqsdoyuTkw3B8ihzPRjbcGeVKiqKoJ420wuDmDMbwJzNEws&#xa;6tZaCFuILa8YsZZ+HTU4vkIpdRrSsLIZix3hJCMOjHqkaSCARZONV8lA2cZeg3VM2wRgB0f90C&#xa;Bo4cu/oZiTzN3DMMRqw1MImy2iUrpmFpsQKfU6u0aip6aEoFAoeVfN3YcWoj3+ImAiqD6hs6Y8&#xa;feifSK2lVAimVXvUWJmUUslp+2jHZmKNcLY9Q6XDQQPS2GSzKmin7bg+CY1qwyvv4fu2CJkHWg&#xa;QyC/uByeSysekuEd5X7UFsVHoYSWpLIqaMAgFnsxYCSTsNChjPZTKfLozzj9gf1vF2EQzdl2zz&#xa;fyRdXO33jsUPNvpan2weaxAxSx20tsibuIIam8jVTi1QC1h1d4CWUDRhPhtBWeerW17cKk+9O3&#xa;OI0AI3flAisKrqWQmREDpDdgi2bK8Wzx7qegufHb3C5i/y3SHOoBrQ8aDzS5FtcFN9WHLLkeoe&#xa;5goMdcSY7i5hvriQLttK/qVV1kf8NI9iyLjzCge9dUQs2XxAgXeuMBIRAKpRg8h/WZS0/qotDh&#xa;pdRy7C9/QhTltjjBj4C2VvtLBZbJJ4ELStnIQKpJCroL1sw5afo747a5eZcADcCKN3fMbzPLjr&#xa;aJ6l4dcU0tloRVEPZEvLUPqXFvixEsjqi3HBvzAh55LiSxT+cDbPzsjQB+aDpt1PKhq5d+ABQE&#xa;Rx6BcwJwdJxEyF29yUsjMwQWO6Nwnn810a5hPth+/xV8znVlV2AIFIbEmpxR8Wi/II4uffyU8S&#xa;6pwiEP/Adgj6/w+2GP+fsP1fvWOaUB44ywk1f8QyVtps13l7RjBsouuK5zWIY2gPpcG1G2JscV&#xa;tMtMdwpKyX/oCLLQ7KxNEgJ4ICS3IMJGAjEaAjIsFjB5Ea15CA2xsQBoP+qYOZbOhcJ/Y2Ze/M&#xa;3DZJ/K7sNGdJEWvpwvT9vniurFB/vlBdrlz1On6d5ZEXcf1iS1zhMCha7FQOBdhdXsvexmB+dg&#xa;/JMNeuhD056Mg/hW161bAVpKRGpp+8lso4nwUw9yzfmNeTyhyvY1rhMJGRGr5gTdc3gQlOH5rr&#xa;jB5Z2ltvTh/hLiX61rf1s0xfXy9V/65vVfNF5NC3qfM3lt8QHJfuBLjrJUWWpUtoozbLOOMyBm&#xa;Eg2Ec+s2POr+Xh6bOLKYc1qxbRbkeKYh96cXXTzpszgWVOq/hzQNtCPMlwXdExmz4N51tMyQQ7&#xa;N6VNbG7HYGphpXvgK6/nGZ6zZVjqOff81mqAvJO5vGkxChILK0Yg62/NLqeyL+rkbjCSdR/AYF&#xa;JKvRgvSiir1K8v4Wswk7XVvYauqnDxpQE0sjFMl2dZjFR0ywwnq3qrakmcvo8JR6WZqT5hqxXi&#xa;xbkP0RgbUxUbMxMlq6ai65mREWYEF+bJB/FlmeqULrw3DYmLugAl6pdc1cGtMrUcCJguk1irnQ&#xa;tpUXVNqmSIP07OVVKFbgIWHxoXBqQJ31Jg7VmrsimZLYtoaMwtCZVlcJTKQwcWLTiXK44KmRSJ&#xa;iazqpBazVr08af+A482oUzSBE1TFv5VKmG7oCSypiEFXLApgi2RHqSrhvmOLNolnIFlKEXaL5d&#xa;PKVJaSuCERpkbG28rAkIN7iLqz2JUwUxbOSHOnpcjKRl/r0/JZlagll3BX3KKEdC9QyJAaDpm0&#xa;CnWqZuznvUKXwN5oHxZ0qFC5K6TCTIwWbQQamXnAHGxJq7dzb1PUZ0yI0DIXL4RlDZ8NMMmumN&#xa;2a0y+WLL4nuBJE3IvY84SKsmD6epHZXY+s3STlSLymUxZBgrakfuSJxFmOwPHWk88bw8sjmXyq&#xa;YOWlxX2cW80LhzhrgDCK9F2dRKCFXqIQu+dfxxQz+JOtV2qLHQbkNPQxkvMbbMTwEZuSFGj4SN&#xa;H41MQtmESEny9MxZfgrBfMsZ3IZ24vhqfCv51xWfHC5KDqcY01GVrp6Sl4rvLyHRRenhcyyHr1&#xa;bfHz4cYCDlkclhCb3UZwbE3ymYvTwfwEKZ6ggoUk8uXHy8hi9DPWMXjL5kqL+cUz2hemhBewld&#xa;20B5g+YpJS+YJceItGmcWwXzztjlu+LBwjEOlyC2c/zxqfwEo6FttVxFlQpbUy4TVCFWyulhNT&#xa;xt6QFrxZTA14r9PQyJdFlRuO+NRTo1Gjwo7jg4leF1J9XRB8RdVY9DN+LUYzzqDhWOt9UMX2yg&#xa;jJ41pEkDJZJvfIGRp+hM7RBwijcQF1PyF21beU6OXbxzzewVOHIDq6323yeaX1EDNnE08LWc6I&#xa;2qwur6wsUblI7MwmmiWwRBVz6meQLugQyIIt/gGalCpZDR1UXF/L8Fu8EvcgNT7PKOM8g6Vygc&#xa;V2c3Qh2FZAL8etqdXFwq3D+gONKy7EtY1n47q0zZY2lJHDXazgyKDnBeQde+6FXdUM7ZuakHX2&#xa;GR46MUl+03+cuL5Pis8rT2+8n0axkzeXy0ArwG7FtrTZG9T8cmuQ+K18hhrGArXAPzwwh7uEbS&#xa;X8sivIA91NN9KOOM5gM9CeAOsPyl8rSfaB+lGflyLVKJMhZXnVyEQh68omTQZL3VXavS7tTzZI&#xa;aJnCTKvFbwA3wl51y+iNYHNH6+Z/meCAXqo8H0oK/Q0We07qWVYn28Fn80j5lCqzKErKDa1t6H&#xa;ZGekthe1VttUCry6PzMe0VB4Aw6/hesdNyQxJ1Ne0V5kSErjVxXrLytKdYYahVPrb8w0nttf+A&#xa;Wj8U7xlDqLp+AczHWbwYa3mdNPs7FojZNBc4tYNY78M8jb2itHq7hPhpKjmkMkvqr1Tvw3zvXK&#xa;9hqB5xtgj0mWvkdijzu5abhbbqb8VkP9m/hIDvXAnN2N8KanBp3bYRIzLQlEtCTrfT6gvlbRnk&#xa;lTOrsio9AWuBIUP2Z72iiX/7d0ivqHQyOdAdvCrwM3X5WmotB+maU2VtlRX7Z0DEe2aMQ/Q+zx&#xa;vP12txATNTohrohQfU9XFhykm37kn6WhTSaA+9nt+J5z2XcZvFQtoD0KkRFxQ5KJQP2Vxb+pqs&#xa;gn8mqORHQwLMCQyOgRPUW9XRn+4lqTxzxhtFikr+5JoV+hhn9ScrdzN6etIBk1RWOO9apVmkVp&#xa;Tr96vkzALhzx6CzQxxqqrqhXNDIHI0LDUl9O6BJSdWyWXJT8cxbWkG+8sJOtHrO4x89q2T0CfP&#xa;nsKUOoLRi9ZczfbuZuV/8GeHqTgly2AOJZ1/Ua5++T+L9QV7tE9pGuubUi98Ph+xeaBUJEaela&#xa;9OOT++1XvvwzfOYlF/q9QchnvMQSebLdCcL1cWcXZH7S1cFjp+1lQ6VW+ZRXlcU6IqNEZkTV8O&#xa;77ee1uqOFMcfwvHZ7UU5ug0zNqxC2W7FtlZ2JbBD1SgWO1v8Dt/UCbQ20PeSvKdXgeYQbmOYlj&#xa;A3qInsiAy2HP6oy1MqLXRq9O0+QUPB1cwA4uWds8BPjwcyI+XOe6DboVy69lxSuwlP19XcEwDy&#xa;ThE67u4SX+MGdGi6qVxCGfPY00Elr1kk05/6DniEiARMtumnZj9AKrRvag6H9Sm2+2ba2LK/jk&#xa;mgkDBU8BqM/aI60SzFMi7cCp108k02njFRP02fbmMrlI5QuHBRwUuyTgxD9gw9iyJ98rjiohEb&#xa;d1PtWUmnThZnT9k9UeNAfaHcZem4LCqh1xg0pIXUl97/hv5GejaYkBh5Lsu/c52jKZ8krLgTZJ&#xa;SawlJ4I3awhmxoIfWK2W/hC+EvmbsNkB1htgzhj1007H78HmtPVLNReDPTPGCIhUH0QRrB6QJ3&#xa;5w2xB0rNF2c8tUWMWn4eUID2x2px0c+ILmKtI02REg7i7k+TGzE+24mhW+kEbM8axVZOawjtz2&#xa;5WIGCWs6j8JZpiDde2ocHkz7vjlRHlbqX8Mv1M4Sy6881rnqJ1VB5FQfiFfan6Zq3Aa3hlP6kx&#xa;Hg12ifGRN7Abf8fwURX7WwPfAn/IF5iSKEGU/4ojMdwHlKIonqyoVwMH5ht+q3ZOjqG6Iovkt/&#xa;yL5uiJNrmoTcwEJt4fDf4hFM5Pya6vozapwfGrRNTXr6S4uLtFmdMsMmVPT9DQ4dAyH1jAcOFX&#xa;9ETc/WHBSaMHqYhKxE1V90tVb+U9zJcRZlLfdREL1cTBiss+5kTMVenQg6Ownp8kz7TMuLlSsv&#xa;wDFH7vVFtdFrvYmtVGkazYLhpz4tl2llQ6Jf3hQoPHlkl1ybECrPh+ycPvYMfc+/UwG67qV+G+&#xa;yzGZL6y/c6O1SF/9h0f81etDXK8X5Wk7yOxu0iCqmcZQhazMa8ZFWwD9sHRJUbh2wNy7igheIF&#xa;gZDm/IxBF3lk9R4z4LegVd1s0AJh0NOofz7ywitiWbs0RosDu0DGFnIPsk+7gA0z/7th6xcL5O&#xa;8OPbaA/oUpP2BwwYoXSLv9BBxS3uKVSbQOOUTC8fDF4XUXR2MBcqiJdHy2rCV7yA8TB1AHcGLq&#xa;ZuTSQKRIWVwKQY3RRIC2rigfLzVNjl1csr+IXSPE0tLApUKpnAxXlWoKrIOdOeSdpx8y9GXHLT&#xa;uoJn82a91c/gXQPN1Htg6twcXMHGiS2jYoWdk/nKwJFzruAoc7po8y8x+RPApoEdRArgS8mAau&#xa;yyGeMlkCT6vUENFqQ7XOLCcLHzDO/xS880nuFXBU+JKHNAdtjwy5dx+6cyY8MzDlZRsE+vyOxQ&#xa;LMN3JBVlRE6cP1Gr1tOJwW1FvT12vfn3Wu1nnTK9Ye/OqN53htmjiwKDrrShOfoZ+MMAfThWZZ&#xa;yyl/4rpKlWHXr1ZHP+mJMtf46h5ge0dv6hS7ZtMUInWyeefT7gI+3bKxwhu4BOEExct0Sa4ESs&#xa;LeHJHnHY1lX6ng2kZuDpvoprGIYRuJRigxYesGAXeG0fq2Kd2yRq0bqWp9p1qGZgF0XT+uw0Oq&#xa;wY0M5bsA1YuAH9oeNx72TJUfwwgsKzPabYPp1yC4PDWUHajLmBGAQBXFu3WEcvsAtvBCUcPjmk&#xa;voxB8mIt4IF8OP5zP0+ZVKHrtMWYwwGfXoueaSpu2eWFyiH2yBl4ZMkp9BC7ixZrMm8y1zXm2z&#xa;32jOXRHQaSFx93fjJSr3/pjqWLcyswDpaLJacc//O1p4J0vXyfVKw5sTqi+DMHRO4Ev0upQ8qW&#xa;2kY1JryBbVfnmsSVmBUvuXN1RjXvR8Qc8Td3wi1k+mUFc23iKs8DG+2NEpg4b83QEHshJiaXEF&#xa;RoY1bwTk7k8zHAPbpPDR3l9iSQpKgbvXxG21HTbfg2agnBiXrmdZaPhI/Kyv1b2cvfNGxxoED1&#xa;afUMVdl3vv2J/cyTYhx/jn6OOj/RB/ub1qvYJvDndu7xQfiJ4pvXC7pXGvMD4mnijb0pzi8dZu&#xa;Iakg+huuTRgnbjOakE7gma6AB1Q6p20cwrMePM1qrI3QK5OyztPYBuH+V6T7wsfbcU7Ye2WSi1&#xa;pYBqgzXxHP88d6sPt6WZeINovwIVbFRGIbu5L2IrJ26ht1eCHg3kOj6Yi2f2oyMyalPsvFfsvD&#xa;XWloPeLbOhRfDW/am3LubJDyFddO4AQaYGDaSOhMpbi1QrmAS4tGSCQroOD4+8me/fkyONU64z&#xa;oad+YfqCB1iWSkmr6LN8r8yyNi/MyOrCEt+Rifsink5uAGYRaqbxSJpsLoCQhIpt+DuXyFPa/k&#xa;GSPHlGkbu47BN8qoJ//GjiFJgB44ys88tNc4BHRKzu0vQB5wLWbT9+EIicWDNUtGvNdE4norjf&#xa;ag7H7f709IUnALf1rzbQunTgcr5x15TwuiWV80k6AlG6mOtYrKOrYyxV0mZHRGII79EYTeJnnr&#xa;QaAtEnNqVNN4jq0oSOkE0N30BlBbfzeC2pS7B62JVs8l/F6nFZxUM663GKWmrsY2k3AaNFwA7S&#xa;Vda09v2Ojm2vfe3NFJ2neKw7Gg0FGw1UrIM12vYIN0weN57rfKenPNCTqSayy30P8Bl141kl9M&#xa;RKY0PtAR76dRgQKXB3v+hprMMtxu+ETblRl+J+UeKt3GEElKy/GTRccvUROwwDZm6O44FX5zSd&#xa;Ich+RB1bmlnyVv6tX1ZBVgcwMYLVG7ODuIK2xbkIv3SOThFAql4en3/F+P1QCCTm2v9auzrFBt&#xa;r49kEWCAOhc+5L9vsBFViazQUO/3xXCyDk34Wv2511/wX7+U4XkPn1hRmQ+f3FGaD9/QUWsPn1&#xa;RRqwmT1+4wJ+6yRx4+bw+vmuFwDx9YUaAIE7Mfrlw9936PdD1YcMP5gIfxMOkuPUtwjPcREAgI&#xa;jm2oPj98fdo4Xouj61B/5a0pyf/fpC7Jv9/qINcM/qd//+sg14/fqyGDVcbWurb2vRN1rdkGD2&#xa;8wN+t4BAGt0/9CmCabcKjuvIJPx7636uzpUp+M9BM5FqibZR6PMlynDFIblBwd96yBHn9vvZc0&#xa;j/jvInhzloYPcU+QZWejttleACIiwj7rFSN7yCXexNnJ5DT4D0KyP7Z+cPclzX339HizjC6ZQb&#xa;IP76lU7031UKag2u/4gW4fwPlULB3tnSxdLeTtLOxdTJwcn0nyeJvrmpi5C9oZOJmKjc/+bqyF&#xa;az1kYWR/Ejh7KBpN4L3PAYThGyw+iXpi2gLTJICFgBpdhg0/0DpDZo19F5v/Kpen2N/mTdq2wL&#xa;uFycLP3g+Zbls529osMwuf/tx8nM7Ux3m+U5m/79mavvD+EAusuMMz7lPDmRmVU6i51iZh3KV7&#xa;C5VZWWZSJuGLsZFGqVEho2AjPcYKgqu0P8m7FpJj3U8Vmso+rC+Ty6k5hwLJ5pqt1lnuLes9mq&#xa;mJe2sWJzA1g+d5+LXTUzVY32AsPtU4TvCIvpyptMAMowdAQrHta23uOlwUvVNSE7s30q6kUSE8&#xa;DCFGyutuxmao3g8HvWKfFS1O/Pb0tYWtyU6g0tRmU1WmuRXFYMJM3doPt1JjAClXNV3QdCVOgj&#xa;QxrhHTqmpVfrDrNcs7Tw6rCTxoM4m6DjN5LBF3gpQTHaVOeMaQgZ5eKh55GD1C9Cb3dFEl8pCv&#xa;laDKUUNyN1UCCe0blmyrJ7SUzbNVxBSG8TG2FlEM3bxPmrGXiG4CvPaSOOlG98kUIRNtRoquu4&#xa;Mxd8Fy1wU15IIwFBEUd+ym1SYZyI/MVTWL4jSCVGAciCZ/hdEmkJBlCogmgULGKJgsx8b+nx5P&#xa;gSExRcHXK2VG1+rNe8VkCYo0gfHCQAxVrX6Jo0tDHzcNVMuJtm6yWCgjA0QKzc1rcgNZc9xvpC&#xa;Jl1ObApe0UkM46UmfolNdTuDdSqEnFSejnue9IxVIhbU2FkuJsZR29UqjFCqWdsbqFLbZZRWXj&#xa;iJQQaVNvwWq7WG0mdVZuQSI2IPdobpieeyx0lUuXItiN2GjgVcymr4nE4z1LbAzZqBzFfyOE5r&#xa;hGNGlCH0kUmrTjdpCCx0zQw7IpgnqMtJqBUuO7Ka28TnMVtyhKSEKK0vs+ZQtYyJzkjCRqcg45&#xa;Kixpb0818pfC4zac3W3CczsQXj55GrLnlCCLZDdMtpJzbKi6dZoaSZXUpqUT4azLTcsMn5sXOw&#xa;c00S7lbYNVYYKneE0p3jg2nEyVLLivk/WyfoCfseNkE6NirJsdmLvy5WGKZi6AVTFfs6AxtRL8&#xa;q03Wn7fSqSO9RPMtHmpa4haVRMu2LcQbVrGK88xW5It8L3yDpMdQQ1874CuNLw+XF38aG24yjj&#xa;KjKrB7X98fmGzeFA75yhDzfrzzuYjuSaLIOuyFWVkWmJ6EGTkVB97ifStO57MhszZkYrYZi3nt&#xa;QK0Lf2EjOK5wcCarALxDG4UHN4CpTJHR9Gzxs9JdAVKV1FDjwLhxDHMVWVHSqmyj3BzmQLWn+5&#xa;0gLdMwCxsHEbiywRxbjn5S2//yuXGkuiF45bwk9UH+aJJNjySkusqZYuQWZ7dOem58PCt+AO5k&#xa;X8srQgn4+SKqL2pYzlOdGD3yHqSHEp4WpIkIceDy2jOwB+A7kR3RLNwQxYaS4dSgGYilWc/gkB&#xa;lFvkkCQET5qyficJ6Vb2K/pbmkNEmBsOwYEl3ESKU8x71DsRwYHol3wWrCFP8RO/6dy1jYwr/Q&#xa;HCaXOnrBL4J7onkM4AdZtwopcQ4kCdc2w2/MLXBecDx3FWUIQ/JcK5JVaIGjLhtBfQNuRvcsBR&#xa;MmTrFqp4hx6m3vac+meKr+uf2oDDylyxfWk3n3pSkxXPyKpXlHse32tTo4AxwIA1xgMivJdeJ5&#xa;I0hiowP1GWxgj2vzKryfDzNavojL24vBHaj5B2tFwEtt3SUC28otWgkEXYrChyekm2g8K9CfKH&#xa;ktJ1hCKoSf+MJmn+GU32/PM9cZyVl2JAudxm7jFHCFsnrPkGN0KR73FLWGVJGt8WVxmVw/U96X&#xa;mBSS93RVfzN+SaJPXuJ9eE4QNygokPxzc8c9HkY5xXp3TIvx7cY9OYRVLlUdDnsGisu4i+PLAH&#xa;lR+8iOiQm7x54d+Wid8bASgeYL9+af6HZQKqke8/8E78f8L7/wR5MxeMgcpyPfNn9/oWSWYnaN&#xa;sXKND6VVhIMwEJARkjwYk0kgaw0ZYNm8m4GfuV3ZuG7WeZVvX3hlXUt2a1bGW1qIJEkZ+VdvPf&#xa;DS3pv/ifvtfetruXl+KeJ9NZzuzrwdiwPa8E6e2nzM5mJ1NT6c57lbV8L6C/dCJ7hTU0VtFnzb&#xa;iZ7j3KWLNlj5DOl1ZU6HIwp4aguIAAW58FEAX5JizN7EsL3fR4k5z9kQzu9mTZfA4aL/aA3XdF&#xa;7gEeZDNqUjCh+ZOPk5qPkpVYOdBqR6pXK9Bk8ib3pSZXG9udQINiMteRgnUdph3A9FXMqUSFRw&#xa;VrxrRZYblOT2URfcaVrRR++CrpYr0fqDdNtow5og7I0ioPyxxuqdi8wYPDz+ZOdqyZV/hqgw1d&#xa;hvTQxZ8hR+sK9pg9axnzl1Cj8xwPfRcKbKak6SHvRBKic1SsXOkHrs6OcGFlXOCbAlTwg/YyDL&#xa;G0RQ2LkpKvX/McbCRKEVvHkKg7zrIK7SD5PpiUquiyZJvI7R6yZMikkyHdyZ3TYNhSx0gg9wrR&#xa;J4n7h/k8hs3Qj4a/YWjq4mHPq7fyA+HR2/vAowArpkrbn5+dyulzeffkTTNvm1ZfUM2sq3bWZb&#xa;Z22j4OjoMtP99RQVHqtHrVfcNUKMKKgHvdUINDABidomCyr16DiAJQLjRpA7HAh4zFuFx9arc1&#xa;6fqNAAsniv25aNr1tta6xwyJkgFqlZsg5ABVkpSdPcELBKpGpVD6lUZpoLafarkCXS8bAYXnNw&#xa;qBMLUnKWpboJbgYRxw89LEZWVf8tIEdXWfWfDyKbOHN00ixtQy3sywp5isvItC8LTqkWu9DE9G&#xa;FDtZw1HGZHenrJumG9wx0jiiPLFqbSg4uk2IGCpLORhnTxhuvi6HxWKw+fnOhKWPdIja2gj3Ts&#xa;kATtqkDlcVym0AYhfBrqMQaH5a52UoU7pH5FPbwCaH7pa6fKWBYSp0dl0lhtuAnVOmjn4gS3vZ&#xa;fRdnuNHwBrY8YMopXt8Ijc5MEhTlTIwiqhgCvDDdw5lLvdefIkNEw3CgL/iYDtWLYCZTsKb8Wg&#xa;9Xhz7LUqFN7BKvF9h36NLnZWshZ5JEybsVHpYsu85eCS+ZWI7Aca7yF7U6ZkGcoJU6lUB5+cKU&#xa;IXQnSZQV5hwn+tMgIinq7U3Qtnf4oOAD/+3NzzfcZqD311LJluLVNi7ci26HmltXQkPuawbeT1&#xa;dC4FynJQG3imc1sD0ZFBr1HX3SiBdyeQ4bdL8wZKaZWSOw/wyDYRllRtRzBIYf9dZQS1c6bsIM&#xa;CrZ3MnSrUJLvPtvMjVPuEFm5QyfLN7cGHOWGFH7EM12BDk3PzmA0DZVtA2Tiq+PiRJ+Y5bVQUf&#xa;ZVVusAhEYeAhM5NwjE9WbHXFFv00eYZE2ES1mfODlOdYJuO32G0j5e+eBoekzi74G88N8w+xeY&#xa;UJzG9WGaV/KMt0bgVEFI4MWwExhtmEnMcxgeGFNGCv0GbEGcsCdMc5hTxgy5/cDgMJg0Rg6AoG&#xa;HYFIa2tH4lcBcMDq3ODasM7LFyrU4rbauNGhTd6Wdubo5pt+XlJneWlUTuFrdl9taVptZVlkUB&#xa;TetVVdaYzEwtt6VV1pYlQPPGxnD1ybVs87PtUGB3wqyNzBy96GIFDC9k9p0sV1zpvQK5TybSdb&#xa;Ap9wfTedD8Dclx360CRTgXIc1EvKZeIq7Bcuqiol4a9uZBt6NUBqPRvW/svCcdBwh/nkSpTc1A&#xa;3J731g+jst6AAVggqYTm8elW3qPzs2fiQUONY0KH0biLGwWy/nVwKmLL7FS1DFh2jfZJmn7nnv&#xa;oddkqNUshlEVfvaUkcG0lRH76ld4jCgIxzyb6oM2Uul9eCTmkCoxqYOuUd/tSIvPA39Bc6KdnF&#xa;0U2vM7sqvETz8OQXbhFpwXZ9jsftDh/YT2ZnWWAZby7+ETyCkn8FueQ4k4tpFztX0pSrgr44Wc&#xa;bESwkziGJLVSIaUDN3ttxIYfl1+c1TvuVFgy6V1tyFkMgEM0dZXlAIJKPGsAFrEIPtcb8dmCii&#xa;3sQeHOwKQ15GMbCZ8oQQnOHxO8nsKorRqndh/RsX+UyBcy95gunoVX4kwbLwCV0ZVFkPMZD5IQ&#xa;66Wh7k4SRGlXFdjiAqyH41NoaNiQNnkCxsjYGCsFH2aTw7/4IjZzE+ip/OZF5sfzLsBaaNWV1I&#xa;vypsC1NbhmAQNL0DgUa8jRk2Ip0hvsyQcbAu7zlXzZvlIRlqXLNTapYHZmp0JzQYU2ibydAznU&#xa;6Y0K4YuCxsBmZTPHJ1Ef93v4GYYA0oswrYi3JcoNCbGvimBN5tiUhxYOY7cL+mUFYIlR7pAhc0&#xa;6QZGEzMi6orbQwQ4mPabNwRIRW6dbL+bUNOK283GeF5iPx24Cvg+G5j74yurDlKCvZKTjEnmYZ&#xa;hTAp+UTpMP0aaAmoX8k8NgG3iEJ2m17r1w0PuXQAQVmixU4XzawCrEOXqOJOdkGVI9hCQAO8wY&#xa;Sl8U+mvMXstYVtnWCJ9sjeBT5a6P5sWmwqqLuZuXM2FI7bFgonNV7JZzQW3mi6vkgODG3RCL+c&#xa;99WxnVSRldCRBVEtpR8/jxo4CFNA/qrEL/jjCn1U/7IBGs8rzJcxIL/8xOhIpJ+bpHPuGpZ2k9&#xa;lv7dksiFQAe/XLbveQ6lapTi9vTZ2+kdptd04IEQR4UHcU8xRq04FUjUeHB1+pMBTyI3T/HHTG&#xa;qe2fKr9ZLBYmLFm1pX+mpPyMoMWk23kRk40WSNf3fJWv5B9Zub3rcbdB5cfVFbYeUekiqZ0nu7&#xa;gRUjx7lW9G1+YwwsWayA+MobBTL6+8BoVMPVEh5C/4ezHguPZqMee38lGb9rW+OpS8RbKgKBlN&#xa;tXYzBxwR5nEQl3+zRgketeaOBHZ84kp/lhOtgTK7d40igxlxINLS3FiGUp52YaNeVXY+p4533R&#xa;akzNctasbC0HtI54OWNmG1/NHkM2IomorFy/vPKpgRNF5V6Qjw1sxMysUuTUEESii8EKSSK0X6&#xa;zIdDEpNRh+ycqv5F8R/UeGYPKIQSjHmmD4xVvp0tjy8NA5RH4gESiNeMfuRSZcotK5Jef3FlXy&#xa;/aPn1vpcCUp3kmCrSLMaXMlRZEosfy2dNnW8Pgk4aa8ZFH0lXVhKEE64cxT3wLgqz5/U7qhVFD&#xa;IwQQyr3TOy2HV/U58NrfeID8vvfWehlR3A6XMgk/t5SzWNF7FuPyP3Hg6c3ndS7US9Oqb5xCGd&#xa;eeL0Rey6Eyb3UPnB9c4o/cRnqmBuFnZ1RPL/tkcDDOb++ZuZ1G7y0cGSG2waE5G034qrA7g3Ns&#xa;pg2QBMk7TZuqQo5KNc2kfCY9l2y1L1EifIKojLUiXPRBDFPzR3sIqGBcyxycmqe3tRIEfZy5Ec&#xa;1gXbpbNVIOEqSA0z6HK//xmK+H2b/4VGVme1hwSSitU21WcHkoqtYXzldj8u+cZWAweFv++OfW&#xa;Me9SAbtVIMA6qb5d9fy0ESJtU9G9NXQLZLqVFAawv/0YEXctwf3lIwUbLZpli+SZTRO1Gz2Y66&#xa;dA241BIPMQalO37JgBYX6ayaKOdub9ZzF7OxToYexqiuUSjTVVE0aWJXQxHdmjg0uGyyytzgtt&#xa;WS9S7VrbS+dWFwYFLAaMPV4hUsbSn2Bc2o0OmIKtd2UR9yR9qojHw2srNfjSIGshVfO8UPsa5C&#xa;9Eyj/d17ZM2oaRLgwg1X/Ia0K1kOd0dz9dv6/Tuyp2NMj6LKMaEJvEtkhYKMR2rFImnFAhrSGn&#xa;QMa4EhWZAtxDCNAHOkY0XPEJ89JFt2fw53AQVeaVtzH4d92GTRhmSxC14Z5Vx0AeWfCbVsSbQk&#xa;W3KPN/oUQK2o7JplMCqLddmPlArBLTQJFD0CEff8/NayAX3BC0H6GwxDorE4Znl2ywK6bEtCAf&#xa;LPoQpCDhLyW7tpe2ufzgsHXKKW5bI593lj1uvavPulUe8z5F8Di0q76QcNX5co2iRsMxDuxsut&#xa;KtKZLzWfHP5CtpKVEJW9B9CgG3KSqL+iSQkadmrQgI5SHTJq39iWo5zQ1kgippkAoB1DRjkFi3&#xa;ISiUTcPxA7wHSivS9tDnjdU3RtA6ttVAM8ThVhT1abJklxu4oqtwnbezPbe1Pb45iVXJPTyoeu&#xa;Ysun8g44unorROgBoSvSRINz/P1ceduY8BbuAMAsfkihWt0xv0V6gBs7nH+Zwxofn034IwDt1P&#xa;jwQCX5otipfOGv/GLyuWmRo2bwcYXTpR107EOk03wZRdyZXSvRU+8rxRdJ3ra4lE+BQkSAm7+G&#xa;e5w1lUAy2hwfJlmCtktrTcxAqS3iPGt7gPirAs90RRopFmojUceobpI+AdocXh4YHotFDBgf8g&#xa;qvETHwhvlgRi62EamRtipgDm+iVsWwSkWQh7vSDKJpNqQTVNc8mbxgNhY2bru4k7vyBLTJ+BDk&#xa;JpwvDBwNtCnMcv8wJOP8JsDNyKhgyaaGT90sov2IMA5xvFBZUk6OdN5V98Q4W0IOMD6m8me+nO&#xa;TxyZNJeZr4z2j4Ecu3nx/V+qHymEihVQ+fvgmrL988n6CL/MKtsrJlr4FUp4A+gVNOT4BFLlkH&#xa;fYNt5ShuMtZl86QIDYftoAG2uWazgj5FQ2HPHQbPuHz9G/WEVlTeG82U40DrCAMUqVwdR78Yrc&#xa;NAAPIHGM2XZ47fL73f3fTCrxi4IRvWynfle0fs+h6oNcjOtm/QJH+BnEcd4Gi6EMFH1PcRlG9J&#xa;eEbicv9q66mNw4ye1ZFvcux3Ep3fFjpvi03M5PdGnS35ozffBr/fGWpAvs5Tvv7K/kEYRHIZVN&#xa;KBn3RE0AnE1PjN/hvhLySQNEwwDbdhMilIJe0ogQ1miHR1TN3Ih5mGNS98qqY/3KWNtEG3LYIN&#xa;IsTksw73Gl88v/K5dE75oy17X+rZJHjrpsobk+/6Pnwmbk4+PcT1faXLB1qC0qvGX/jZ+VTgwR&#xa;X+QfWzSki8hh+8Hqm1ENKV1sHVs8q1hm0lGP1S+tZjki3I3Tx6hOoHYJ/ZMiM0ZAgIKIap0xZ9&#xa;b0WReofBRQcz9VXKN0NlgaJon0ZODKic4Ny35txQkOBhlQRWt3+WETV5Z2TuS379ETHygr0vk3&#xa;V23HC9F0//3A2U77QZ6TBc1da/N24fHBF9oGdcsoP9Y+YU2Xjclmq/BeuWfmQRUThYbeHWB+T9&#xa;9oKZnx6hSUbKuqjX5tdNOLF1gGDywK3Ob/HKCnG3iapuCwEBn3CXs0Gb+7v78irHKkJ/qp7J6w&#xa;boLr4b1yCCe48QfC/LqmhoW8OF8YfT/Wv1P+UBUTkBL6t18p+ZNKWh+2y9L3FfffyWe8lffQY9&#xa;OmvYczOhzeogGxpr9tlJneJzfiiRPGc44LR7gsUGWWx5BEBJixaKHBRV7LDFS06YtGw+zOs5HZ&#xa;GDeDSGROmk0UYuvOtp4NKiTulspS6RKkPIkwOgW8yyomKErQmRACJq8wbWFkmZVZHYwlM7BXGF&#xa;XmycwTvGDPa41bRZA6CgEFg0xrbwfiNwaQydKQPKIFPDXYqaPKSfsTaBhfeRzWTljX7Ka1bljW&#xa;UloEIK/RruOCAeSWpPz3YpcD5wP3AgcEFwasxgjCqjOq6qQcmup786VFSnRSpShgxZoQ2NdVmB&#xa;hnZ16X82NTUE7qw+fDGzjOvAcZA1kUtIlsqFkd/vXROyQ6wYD4PEKGIVVTjJZ4/PGcDdUcCtUX&#xa;XnbeYk9pdlJNvAUoSpq4JtHTibBtHOAtj73TziK25PKVD+Am9jBGPYhXL8hPjpI6kzdzhq202U&#xa;Kk/KvoEnyNkHIOIKiLJY9TcfNn9OugxTFmtmH1ykuO8DqkrWCro3EV+iIBd+yLxFoWEi448cNi&#xa;1gJx06tywiLjI3MtcWqV0/PTAOMbdTEE4zDB086uSSzthOpkS5ALqYK9nBF6IvydSUduaGPI7L&#xa;lpPos26KWl4OMKspDYFDlRHZ0dVU5iLukcm1xZcpQj7Ya8TYpeZ2kBzzldRigNK7mOrwssw00c&#xa;cnmreCEnRMFdHQZonDFcM6a/9KJ8Azm9k8GwglBfoax+AZXVCudaB+WN1ebIXRAaphKLd+Yr5y&#xa;vlyP46Oo0B21WaY70zNdvbZyEerQoe+qwy4108eZFlGURLLzXcZMBdJBPbm/x3hRSSqKCJkqYZ&#xa;ReCPVb2oDrk3NzuBx9vxaV2shZn+JIkPAM4i7IU79H6dnY6NaT8nWIMqWLu3DCuw5QjMF0I++t&#xa;yuabihH35ZczLfMRZ4LR1x7X7JCzqG/1OtgCXTUAPAdh+LSU0z0BE1GmfgKWggZ9iN8+37M5FO&#xa;nCeiGrcnTKgqz8IJ0w4VhIPX3N6fZyDoxeA92w5QFm2azkUgMGzREdJ+SQxadnmv/VRzr+92vC&#xa;4uvieUqw3oELSNGemcQg5ljfLGGUNGFYNkPwP6/5mzyHSXkoe+TjNRUXRz8SJv8ukUc1x+4EbW&#xa;a9dJa9njRkLTKYdeJwiKKjI0e0vHFrGwdOv2L0/XC/7eHfFDOejeWF/Sl5b2ofcsdas3Z8lF3I&#xa;F3zuWJCYH/P8aG9xhs11D2CIL/L7PsYViSVsUQNKXhg88pLtsb9Z4qXUjzAA9h636fyjtu5HzD&#xa;rcqDcueaHPwrpsb7Iz3ADtbA/eH60etgNBLA5QgamdcHaMKRZhjrBZ+acvHgiyR/shdsxH1xoh&#xa;yNT4NfuXd5BCjyHw0RJCb2rdLZJ1nRq4tTjSdYqeaS7a5WqPzaao7kHwEqbAwFscf9JjdBM9m5&#xa;SWpn534N3rKI+77pgf5Du/Xo8Ak88tQXfmdol2D2OwusfGxWAZEx4zuTtfF0lGxpWHMNmTnt0k&#xa;22LMTe7pdbWM+u7JJNu56GuIqXXw6TW/uaRrLOYW8en1GkZj71bKzWczG36TGbduzE2EzIZqNu&#xa;NPgHPL8j97VhNuhZibcemN2xYjL3jKLbT/7NnNtBzjtNih/9VOfXKaZEbBGlp5SJPf3O+Xb/ls&#xa;avW8Uw6+iT+TQ+ATOKOLuEk5E0baJp8nJ+nYDcolfJJE4BM5A0LAI37Kw/mMhohD/qiCwCd8is&#xa;964ETIIXGRKQg7njpEyo7PjhtbKUTKTsouNbEWKVBcf0+DEIfMTsnOTT1z5HwJxvFWcuMjnUc/&#xa;WlvE84meQy82ofe6ewz2o3L9m571Lo3AJ3jm/mcPAc8nck6f9w1M6G/SWRVEr4SFDKKHAiODap&#xa;G+2dXDXmN01LCRSwx6SYF2x7xb1PL5ie3TLPOdDwg9w50QCD3TnSi4ns0eKXjPWp80XNdU0Czj&#xa;C9a1FMgn7BW7Q1+fIEgti8NYXyVs10YfNmw3G5aXnl0TO5TznOp4kL6pjv1aoaANj659tFvivB&#xa;3bxma0W+Z8LMZ1tljnYt0qHcjtPi3gR5bvm/WrI6GdHo1e8Fcj7xtchy/rnOB79eKbT6nZffYA&#xa;euz4+5f/V8y7KxN4nzeOvg/4BFTOED6PKCjcbCBbIL8VR4w5V8TTKPmd6C7xW6Ok+WVVo8LF0C&#xa;nlkx8xPDKo38g3Z9Kh/e+/7Qvv/y7r6mC+Z19F/fWLm+m/68TZLY7/oROT/YdOLGfvYvgvnZhE&#xa;39nU5f+V5PavXi6MbXJQslCAw92CSnVqQegvMYtK2nk1mWQlYKp8jSZW3AEgsQEZrnSCF7Prbv&#xa;6iW5VOxEurS2Xda3un5m1zMgGi+QvhmSzOR92X1t7J/1VnqH4X1PfzlEWTPKJLmVgYa+6VYux+&#xa;JLUweQwjV341oQcnlOe74po1jD0eaDlLttiPDgcHvB3LnTnFveg0Q5P6B5Wy1cZ7JVAGXkq7o4&#xa;S8dJUVC0xrdQsHrggsehqRRQQUC1J4z4HHeVqHBWRVc7b5al3FfHn+vdya6bbYRWSeZm5FUQnt&#xa;4TxQkwpunTlWgEgZvTCLUiGu589lAyUQbWphSEJTQBvNnMtCA+2t7G/i+2k89lwXOUiby7RkvQ&#xa;0alIYUcgidVZMA3/sZ6mdBlfAJ5R6R96MMokHL0RcKobV8Y+xoioE1UsSXk6o/ff1Tf0ljEpqO&#xa;shrItwkzg9c8JTPYQdAsZigT+6kPs91QAkcl9KNqcn524EjQcUIFSITZttF0x1UH/X7vlIrmTH&#xa;eqzXM7DyZKGRls0HxYQYAVeDYexXAfskcO+R2cf31iVumj4nKgDE9y0CBSqv0SQzTP59FTwUIC&#xa;7pQ4yItjYHDod41ceE4brDcXjC+3S7TiLudi5ckvxOaF3poHdyNeGlC79KwRmp8jr9PGVe/ETr&#xa;occ+2K9J2+el7V4JOSG43Y23M9ZihCe3EcM/oYRuL2BTl7y7rUYS+FdhlAW8Or1f7lvWL0orNI&#xa;N81xMyC2mfiTWieveo+JpRaT8JzpLOJVIp8mEK1WKan9N6lCUnFPbpCzRPFZPW9LD4RSYfEePr&#xa;QAY6gTWFv1VY3zskJ7+Xn7csxAhNRcZVStycYQER30YJZLiiUa6sxaIUjQhUqv1CTXk+0cY9Rb&#xa;0YQRgKEXVnHom6WKT7b+hPu+Md/YOkE6TdY4E81OZl5EzYk8dj8T20WdXpkRkXx5HPaW7MU6Wa&#xa;7jEgk4ghxIkcbLzOGcnhU3cGpSz4VF6YJ8qMr0wgONHc1F/Eyk2l6VLneCu3xDVFfVnHZs4esF&#xa;wK3iZZ4JMl2AV43YE0Z60py1BSKo4DIkd+YOVITGjSMxFxUGLyq27ckZiQHpoawp1kL6sktLpS&#xa;yxZACJjub8XXhDybUlXJnV/GR9BfLml2W+QHIoYzfsSLG6cmxWWJFfC9es6mo1o9GOTUEvKdLm&#xa;jIgBkyOv+jMcBLRZo8N9ReU7Ztb7iSLV05LTnKzeMAqd7VzCOd4otz496awmWJBKEtyfCQ5nq7&#xa;isIbAZZyGKnasoyvA46Y9zMXP4Qbor58gQ+m6jNzwzL6L+qtt115iR1Dbs2svPWhi+L8oq1L4Z&#xa;w/tV4ubdDuM4C1BhfEaHs/Shm1sKx7hmhK86GAPBYRCCKnwE6lBLuGpfssW5vGTz+kR6deAJ9v&#xa;YgDv5xoNERZ0MrceAPUWYdiKkfkS7opVwZ0l1k+rkT/1TXcQ33T8cxWr1D6zkZIchjmADtCCfU&#xa;CYsorqg7WR3MGJXkr6o0uUJxj/HTKMXMgb4kySU0zTU0RTICO++zthi0dpm+rN4rimyyf7M+GP&#xa;/FjDiyyaFNeCkzfJEwBB0aMycfTqLm6PfORmfWgVegml1zsGByAk/nVr330JCLfBxPu/AAeY3V&#xa;MEWB3Wx0i2is5GcMdZh2r8hm+ISlrPP57TuRNlNRVUFkUKmiAv9WDHzFYOYvvMrwrf3KyD+Osh&#xa;XSrQM4/VsU6dFxQOiHPcxfH3MJPYFQxvCFOEJVg7Abxi25LH+Tl/YGpr8ksPMDSYsVYdfXysc5&#xa;gPBDBnPPzepEUXDonaty/W8qQ8+hGgiB/frF/x9+PVJ1rv9bKv9XzpmqtfqmGGK3NTcAcECKF8&#xa;KDJbFtADrUb7kIQQLXBlWMIcRYDLbBJaS3SSTmRJqelDuHv3DLck5YxOnrYzVzbj9hyU09HlCf&#xa;GEpPben+MjOVzV3Y+/f92f0X+124IYPuQU3ngUOOThPvNrMtdY5zeyrzRIu2q4cUsPEZHVdLd2&#xa;MmzaUaYzq8HIkI5ohNaRrLFQ/9uSo7phan6iRzq6dTivbWPG8Of5djaH7hyYmWwXQeWyhBfgjh&#xa;P58KOrImLU+4vA7ZzziLVHKxOJsdve3DcPZKv6PVQmfaqBGjXTTdtzkrDZgt0ksYH4TSbxJqj/&#xa;KvSYKSJgEDQhm/q5mzsploFzunGbIsntbamBsm5lDpneirUyc1Fw8XYwuVA8uHxsQeCYQKYBvc&#xa;x/k0OyXOXQrFxUC7oTvyJsL3aUPT1Jl0Q6nT/1JjmS7kNFbiuZ/QEA0xccxvYTAIW8sJgOcm2e&#xa;+gAbIIulN0D9WSVEDr40VG5JPzgqlh0Ydequwxf8042Y/XU2/du6EOObaj3u7pSmmvUWLAsyHB&#xa;AhIDr/mgzYuP1uKeppn6Y5meSDKCJxwYkcGPOTuO0WzMPyXyhl4322je5JDqKAxXUueBX1308W&#xa;BBgr26YODjIDsei7ih2DG0gpECJ7ddCcFWUbriMpl2BiFgkWuJ6a05zIYz15/b6tJmLlErKoPj&#xa;MDaCeeKGOTaabKYL1RgiKDHxD1MC2ZpyC7f4DSW6LGsl0swUrDDBs92o5+OPxjLZcwNZ+JIZgz&#xa;qB7gzLoM0SkCByEyoOxXztdblO/hgkanbu0f7LOx2RI7WIzo4jR1pjPb4FikvClgGLdrFnMVzT&#xa;ZJCgtX7A7yHNdp4CTMqLgaBdJ/JgFTrmwHwfqaO/DPzD2xtC5AoNLZRwVxwIixZM1lsAcPKygL&#xa;ImB1dX+FNiGUXZSGiMu0vxhvMoBLerGNQTqg2FEE5dkRgoGz05Z0ihIaYGKrNY0pqO4ssuaqht&#xa;xFEIMaTL/22zNTDojEINV9HSUS9eSCTLYLSy7mKv6i7DiKo2JNTiB4f+JPW2ncBI26OxvXMk18&#xa;Zch8Ohy6qbyFZCS51Vs6Q9kSU6OFAav2g+qivtQfoiUUrKPUtgfl1hfOdtlm4cKBH+G5yqILvB&#xa;gj7vUdwlLzGngSCtQo5fjXHDsvn8Em16HoNXG2GutSwmllf076xRXYHQZR6/iSnsXlda25MbEP&#xa;q5TJduQStk9+IXdD5efHMdv7wCjPGFgZUMrpTlrANroDlGhAGC/5vxp7cWap3/PD2OJEaQML05&#xa;FCn45Oum+FjeYcaun0WP/r5t1kxwK6UXNHVIlylLS9wlkN8RpH7NvnpgtnF7W/6otYhMtIV0CO&#xa;dUcNngBh+fCjF/vih333X3aFsipu9v+HrvAG/rdPI25o64dt5cqv34pM0fpG0ks3CLi1xE+4AH&#xa;VL9NFleF7tzlJcLnqCoCjaUgFewMuHdVEK/l5N06Lnm+Xr/YZ1bWAt7hVu98zu904UeX8AyP6C&#xa;39swJX/Hf+84EvmDIIiin+sB4x9WnyMcteg066qZxUi1SJYUUPPsIp+TUiWZVzTGJkMG6+hP/5&#xa;uwLZ7c1rNuivX/VQ/x14cR0c/wE81v8suvqvlbKpi4ulnbnz/5MqTPK/pXsl/1dbLFIWR7QA2Q&#xa;6FUrMYpGC0gXU1Ba1IcdKvlDwUm0z4QUJMKOZzk4HiV2/rzd559wpaI91unuXmj0wd29d0TOH4&#xa;M2gETueTqZ3Pzc/N1ET/n+9rhF/m98TCTMmnxQtJ0+8rdIO4owzOxRpq9BrFDdPe1J2NSBjCLO&#xa;baKw9aDXnp7SYTn0SEYw4TDc6S2xmnntU6Uh9Kbusu0aQ5OCdkraxhs+osWBjwtwK81+WMWVWT&#xa;rFCGobyPalLUKBgzo4utTabTjzZGN2ir2T/Z5LrccShjFiaQ6LaVY7ZhewjFlYVZRzBbJyUzn5&#xa;haRqTizrC8qnNSxQDnfiOJImuxGXRok626KRPRlKdimxSa6GKMNZp3v3kGOPMAwzy63dwD1VW4&#xa;UAmaUdx+4RGHtzxbaxRR/a5LM9vdr6ozEn2i9yNj0YKDX/ATkHuIwua+PjsKiKKV0Yg5ynUIst&#xa;6Sn5DCY+PYpKE7T3RR0RxWE1qmYZvEZIqy94xl3IaYWI3A/d5wSpLCNCp5vJ2RGgOSoWyOPFdS&#xa;Xi+h7c7VSrC4rB5lmqLZ4ewFILqwEFZkUkLswvEPQ3X8eotCCHKTHCEk8+Q6SnNRYoYNceE+ah&#xa;qY22yRM3MZgyFDe11qJD8kXWME9JaxOblHnD1a7mLmqFmDk0x6A55UVdW3wimqexmU+8DL9w1q&#xa;FI8RYKFB9+sXGj6E0CdEdONnEKrs2kW7TNOxtPXlXbbVFs5gRKYSJHQCUKiEpRNsjqKwsiOtqt&#xa;6ublauYr6YHYGVgTOGwJOqpRxUHeSHbC8Y7iythphalJLLfCp8EZx3Ra5QlliEBVC8x2ctsN5W&#xa;0COMhMawqxgvETO1wJc1mqbN+6gyRMQPzMV5mLQFhxagQ5e4wkg7Rgp4nRdw9dL3uDtuy/yrKF&#xa;MHJdGYXdeYNW0Ve7rRkQiaVpdpPb58zeqCf9ZNRrQcKsyv+9PsnDtYWmKabWop2jNVKzBHSwwP&#xa;5PrBB/BcBvLS6+0lqT+g2Dwoo3UwmJ51aRNhTw/koV4sjQeXL9FDsLfUYHLokVJQztLQg5Larj&#xa;e7LaFu+edr9OSsRmjBHSRD4cR/h3Iqwi/Z2M4SqA9URLOSoG4NFNw9CGdoNkPPNX/Xx38Hry3z&#xa;tMxc/ai9w+bekkL0Gqxppz+xHCmZCEW7R7nYWbQQgg8kaVD4L8V+HKSpPe1mLoaOj05KO2+9yC&#xa;cBEn9U2rocrPJOqEvqZJIUno+rPTN8MSttLr8qFPdYJEBchOdjohSkBXSUBaJoMsJyWgG/L3qQ&#xa;vZMWGMZF63NXas+vuXRpvM/WOyIG0YUibpRf51ac8/ObCRO+Ua+r4Rb5o7whducyCCD3GHJGFR&#xa;0J528wYhfZ671/uwG5k/cFuUj5c/mEq3qhZzgGYtwqyj89l9X3DPmSAEt8Bb7AZbXHNQq62B8k&#xa;y3Z1xPJvb95o/wPhvxZ5CSBISm+xbN5jZpDiOv6x7e5G4sO58F0nn4u/BVfxyewwdqMsF5D1RH&#xa;jp6V4Vq17vvSDxDAxgGB4wHGBIlIAiVASIUOMBWS+C4GeUFhZE8U34W/CfUs2+w83FHi/aQh4g&#xa;hT3VhAuAFi5kbA9luK9gByPk1dVbA67tb8TpAxfk26miW6MOb5Db6k5PJIIlQtk4xGQGYc5Svu&#xa;drXNdFIVCSJeQLIbL8kSWe6lRVYmInGujgjWF0vpsUZAcB2i9456T4KASD2bLfQ7xJq76OH8zH&#xa;UaU+m/fcGu/YAC32u379IoYPxAuy/1HaV0dVvbxfA4LSpaR0dzfS3S0t3XLIQ4N0g3R3t9LdJR&#xa;3SIMIhRUCQFBBfuP7uuoB6r1/f4R8Oa7H3zGfm7POcmeeZzYvt7lmNpfj1kO5pYBx9LWfjN5Qk&#xa;EvN0AsBbr22lUzSUCx4eIZKspQfxgh/+0uueL9MhMlcB6tKtABWt2fVfDGL/DlCVbfUAds/17K&#xa;1sSXTs/+93I3kzIwOjH/KH/zaIxeS6NogNgqqWlKIbfVTFnkHR5S2eEStPJfI4oE8CE9vY2liw&#xa;+8US0j6uZq5pfDx5Y1xrodQ7E2PPHBiavbXB+u3m1uZWd/Vrf9hLxKV7br3WPJXDlq59oCfNul&#xa;xF2ck9UbnYDupA6WK+T6euHjob2CMWRm/L1NzUIAwC42jeLixKxKtkxww70aN6w/vkqUhaGHu9&#xa;Kkbj3pFSR+scY3d28X+8QOTjJxRG5q/Gc6wi9zLzhASJtIrB16LZsA5tBFAwX7Qx21yNUMZpcM&#xa;QedEYNxaSBpREcV5+Y6+oPN7tFgeEcqbkweoop5NpK2zTGZDRZYxKW1RcxyBaagjFgmHIhi98f&#xa;1RIzEu33Bf6ea9fok7LHDcztDDZU71/uU5UPjo7pgGSv04YbOslppUgRxUBBkz0tX9THxBfJvh&#xa;x6ESmM+QGwwLV0MTlw0wdgswL7oJdpoTZQeMXmmuEJTbRrsQDG31QLUZSWm9Rt6lgtkJf931jl&#xa;4KVkstJbNxHvqzOIUMCrYp8uEhwImEMz2LOuqnSg+ROM9Y9iWamx2ZAYwhP0MdiTJZHCowqANN&#xa;pVqmr0oc38PWXFx4gTcoEDbkVlsRJuvhCkYnlIcFUnGY+0LoPzqp0n9FdnzjcxJJoEjoW1Vxei&#xa;UjfCt+KIgHjdSrgHy9EFe+z3Yhkkhwj7B5TCpyKWCykxe3GxDDI08HiDQlKMP2gOT4Rf6b+hwL&#xa;ssHKnThOUmUz8qfCUEpZkZCyilN28Sushh50bpJK2TCD3mWmL2KH1skTOnJx1BQAEy2febsLyd&#xa;KaHqhjydAWVUam2W+9YvqZp0ii1nWqjEmZKHE0XyXU7tTyzQ8x9NHzp7JOCBilWKOHvHw6K40Z&#xa;OgXcfN2u8VLYv2w7ODen2BWvsNLoCN10n6+/KkTxQjOqMoWunNIFPfVfn2Wg3ivfzqjxI8e1Ad&#xa;+kQZKt1AgeSZQZ0TRBhqXShRFCweCG55jevoRbainaUV9Cx5V/ZWOXBn+x7wYQ+nbYRk0UadmV&#xa;gngRB6dyBzX1eF+YesT/FdgmECO8U8iaq1F3aaT9lPBY3swjQvZZ6PdepMWabSkSF0pldNiPaX&#xa;CNi150a8Ld8pI5QP4qHqA1a2EWwMBufumzUPMkq7+ZoSsBFP4CF34pjGi4iNnbjaE4DSgkz7Pe&#xa;D6RMYkikXyH0BHoSPPi42YUiRiu3mFCGXLlOcZXpocdifhXW7KaiRPkQiA8Tg9/hS4L9XoaBO0&#xa;2LXLMwe1kAqGNE4bxoQPYkwVmT1C7rrQXf0sTvXl4dlxxBnUtPdMN/4huq9QMcQxfQNUhvA3br&#xa;Q5lugwZAnoCwBG5jlya3IH+ik8PtGygcyoqrgfDPXHTidoL2LINbD2Y8DCZCXVhWxEyWtWWR09&#xa;KRvLcp6FkkqSac0od6n5lpPpoDNkwHLNp+UYKyBBfcBLIi/80aiF3nfvTBL68p5lyizsGniQnu&#xa;MwF/IsvAemonpOEC9PB0om5Cor5p8dZ9HNe8aEaoXTbAg3CJcVSrh5SQGMwLQjr8NcMVOdZmEP&#xa;UlTxlra5MnrZF0gtTj21GC/8O3Q2M4BIuXwSertoROejG8+y6gSL1jYokNs1WREdWkTVsvJgQI&#xa;VSfvGhVgUQrblWgcKPtuseSX6/lo0b3WF65CrOnYb9t7Rc9v+uutC/Lrlg+rHmIvZuzUVtbsRj&#xa;0T3FEFM4BRrU0STM4BqZeIY285nc5DD0na9FzZdeHjvXka67yxfl9PzWvvydxFlSbxreK9ncHq&#xa;xvOhjmNDn+6yKeNr2LttHUxOVYycX1J+7tRZjheolCeZ07nMnRz+ll1Rp4ZpmdjKvUqDRji4Ya&#xa;0Rj8p8zmK8pG8gcaOFOH67hhveEpB9Jk40skeLNVqc3kBsqSwhkH3prU91m+W45mDeHyT+W1QW&#xa;rwh3dNg5ETSMjMvB+ZSYs+8mzy1Ue6soOHqs59nJlE3qL+ryeizbkrqJd1VpUW1o2D0nV17wtJ&#xa;uXaP4WbHUH6M7Y/gvAr+K1p6QUpGsPwJ46zanzMfhazqkQgt0jFPnGDlLafo1z3ShBsy6caf5R&#xa;rYh+icOjbbNTy05TThaHpfA8wqJUdvBSHNNgahfniY+qT5uTiNZW84NIRTeKadkPwKFJrlDJYA&#xa;dKPyc4HrkguFse3hY0bfFKzsDmuOxg8kxNjJwU9jHQKkGxC4qH1q0CGEDBS6rPmCtiWkcAIzOz&#xa;cgeQtRcpg8kWPG590on0boQqN2UimahhIE0fmXySgUE8gox5CUrTw2mKIPahx7GyjEQbN03xc6&#xa;uFq2/Bi1sz7MaFr0r5KL4OuSC4GJGt6xgZGZKQT3LGny7CYAie1981y0rFeE/u8GYD7ONKgnVm&#xa;zPknfLgXONUiqGSeaoGFrJTs1DO9qri8ErFK3ETivMZz22csZ+7V2p/C4LWmtlSkWmjVWJ0dcO&#xa;pclfz9x5pKFZq49tPcXLOQAu7FLCXfY4EcWfNitcVVf6LC+Bzxxtw4bQW6GpLAtKU8R5FVP/sS&#xa;UVLB1jwQC5veZ430ySUA/7Yq5y6HIYNCymI+50RlGdt0D5PpmKrqsZUHO2koikXmajhNLE6GRh&#xa;8VkFp/Z+EUB5Oy9sJhYtj7OXbdBstkk5eST2CBWfZTv4YQ+kEG7mh/wPJO8KDeqL9KQVjFVCk5&#xa;+EYikmFkvGFk/sfSViwgkp7ex2YaXaMeQu0IzVA7hBxQU7ZoSkuMc3fFzXpi54Mvn0HfVBrkjV&#xa;pDkkYlmx02ORSNpPjNsu909gAaLWcNpU/QloFHwZHuvx6eMnYoInBiAFx1muqi+1ICW3KX4wvn&#xa;zzgw+L9upYtmQaNSJTUO/YhBvfwAn4Ca89a2DLGnF+P6TeuZo9OQsDcKUeCwFseiswmma+Z6Ed&#xa;I6SJFlcOkN4ijuKRTR8ykUaJDcx+lFZOYUHEWWweEkplZ24I7pK6qc2vLcX/RAEsbMg2NFAyZx&#xa;+RparfCpSEmuF1OP86bFX1kFVqRCihZ5hU2PUjat+E+/buVunLKfLgVn2rKg8a7C2VrODTOXyV&#xa;Hg90KxhA9BNvrihcDs+NbmKhSoxRWVf9Y6IhCFsyAqg1aU9U+UJWl8wXJDOE2HCPXEhyu10UNZ&#xa;rI9+GO6UAECOdmTp7EAiRKcwpz3FPRbp4r4E4gYehsytJPlD509YxT1Z58awOOATmwx/ifIeq8&#xa;VfdYZbZgBKDz1zhrpHK+zHF+5qAcad+jwubJyTd9pCHjy/IRyp4YMk1YPp54wUE1x76Z6fDVR4&#xa;tvee7AiFeeh5Ni2Xu5kjrPUfKnnYJLjq5LL1YYGfn7UDqw4F2gHzx5lRokYljdJgdNHmdts0z3&#xa;eXaVmCVkklQLb2RRiLc+sBadpICbqRJC5uVYUQZ/n+hO10F8jiuyzQlpVcLTftKquh4JvMk8Cb&#xa;y38FHuc9Up4rSRucrLacvgiQxtbEMXuHadvh0e0CZacCS7Kz3e+bIvgGkuPSEPG0O+tJbHrhIt&#xa;fguB98cX0OwI6ESysUiR5qsPcCa6DFFpm8fLlsgMRgJpSkS6SugoQrmTe6CKi3SfRGms/RUZz1&#xa;WivHW/iox1bhVeFHhy31J4pl9s3eoZOugBDIz+lvwf7Cq0r7cx3rELP+iE5qCgVaGuKSCEEX2t&#xa;ollNmycZ6TklTzPHhkvGbsgwmBMNE+cxO30Z0aK0I1hSjC8HLL0kU513NyGDRtXeszVZX7Q7nt&#xa;04GOb7dnn8wPPtqQJBdPEbF/e5aCbutbM8q8Zh/jEa2sRw0leNQE3LR6VFmlZOtsI+yJuJJ1qO&#xa;ZpyarKlfntM9GRsVpZhOHtEASDwdFOV5LOGM0FuLYeQgzTXO7K6uMT1DOjrJ4swUg85QMz42Kt&#xa;u3QQGzLYe4jjFIyrxqYwkQ0Lh0xoWxh7ZHmogtiy1OOjqrU3KAUvwSt21YL8kDYTxtNAJn2k2E&#xa;QmYHAYpr24WrMTj/BJMiDqiuA5pYi+q+b2s6tDOu1njtzrnlTKb9WAJxESBDBBsp4uxCXikj0v&#xa;DW5ytMlzV/Ly8mTNd+MP/CqxmgV/SX1JzwZ0D0d/70zTYB7ZnQPs2xTfxiCu0B6YfNq1RsEL2a&#xa;p4tE4JYl1AV+fkxVxCasTYTW8pYvoaIIlxIOX7kCZFwuK8LBcT60JXP0IKuBF9rNS4kXc3F65X&#xa;RgK2sZmOuB67xDX6hBgKe8Rw6lz3Zv9kDasAFU7zhUT6WNh84R85JoxTVPib5xEVT5jHDwI0cW&#xa;7BItUUESFSSQh9KduUDVi7emvcdfi0+fqjE9P3c5hb+Raki+3kQJyc+ca7H7C+RiO5TXcrzRa1&#xa;1nh6HWqm0pUkYNJgsaOoTt6OYiHTZr6dqS1KkSoJvnGORiLymu61h9QMsLiogFwIF5HVEGOw+8&#xa;5jd925Bon/n0+1y8HU4QBnXYEK+UJiN71YEMfVPYr9nYz5cRyGCSaeuMvvnTSMlVHCQkLYIPRE&#xa;vv52EpGHIekllZydOepu0MPiA2wrB8ebZDYd0wkbWLR8u8Gr0b9byXPKaAFSIoedBGKQu3Eie2&#xa;NBQmRaKFAJ7efIyf3nT/NA8Eq25+KtjbW5fZfyQV3pgqZJHgCnjjP2uOhcKKIgWjFsFVttxAFe&#xa;OMGBHvq+1DO9rDsFXnEw6JLj9p8zidsqNJHrGqaLxNWqbPoxssWW9JdsctfHr5E+H0/cfHfsRJ&#xa;BrRi4qzx2vqDCWmleV1VGjPKz90/Dueoh7Q0fq4hzscOsRsPcTgD+EIabzcMhSn0BgGgajJ4d6&#xa;3zIJdjLrYbtimKQ0kG6kFxkKhQtcvqn4O1YzGN+UFLe2KajoJAwtGvDxtGh0wEoZLR2nTAgaQ2&#xa;X5N0MDgPVtwcSjIdqWKHn3QVtxZIgQ1onfvAEXrxNuUBHrTgdhGmFdZ2uoXspxrQeWuQRXhzyR&#xa;T0hY7xRTGGh+fgLTvBfxATr9ajMsipTzQDIPIIsoUnC1GfMte5tiwXCV2Isb/h74RuWRsAdPSO&#xa;QUMfjZM4LZCwhCqBE4pk+5gE90DxxsbIYn+JUeueJ/TYxvLICmrF2X1u/bnxDchMlCacmeMxpy&#xa;OlIE+kRrcI8THznJLFm9KF3jW3M5iGiV1sMuMDJGvO5uDCWAL/foKBxgNKF5ZQxnvPK6A/YX5V&#xa;cThXFG1l1BbHEgvDKjNbUSrDWnkqYCRAGmaEV4iDoAiHw8D7DbcbZo4dvzOJVb8wgOKVMOhiJ7&#xa;DLLtJv1V35soe3rFjtIgT2oZxuSXuqU6ifepELkrzE1+BcmZgTPpH8ngqrzhMBa+GlC230YSTz&#xa;QHnh3maCgrm/7qrEaZlIWL4KkWNuhchxZrcFlOsXAvr9rsq/9VPA+CpYlrFyMLrr9vB3lsJ3IY&#xa;0rUtGYiIAk1p18ahlSqEiSwfoopEYmoA8GC575g6F3Lvv5HP64Y5F2IPDos/L01l9ZCsb8Eabl&#xa;9CbDa9zn8++PBnVefPv82FPPjd6aSjXy6CyG3Mhh/EjmvUNqi372UyZ356HSeXMexeNc9mW6/i&#xa;wV4EcEOUQLZAhtu7SPdHRGxXnM8UN+5NgakExl7PHVC1ElCWEubFGfscOt6N9sF9jniO2Nn4Xh&#xa;QuBaFMn5jkP0PNXA1oA65gtIals0fOGxqMUixKtqspG7lv42kj+Z30RHW0+tvkj91UtOI1WCWK&#xa;t+xbjiJrHVqxXOCV6qRtIhLMu/8GjGedHh+Tdcr5W+Uuza3UM5uO0PydEewyVP4WroxZ6M5AQJ&#xa;9V1qDkkIl1VQyDEbOewQDX3oWITUn8k3QAqFBM3QI59QO2gv2V9+842aqsZ4d7+2F4err3xT0q&#xa;AYBcJSJJdMa/wBqWo5KsdU1wMZiLEONx/sBI579EZV/tNQiAU7Y/xMkDixl6wjpRIjOuNjAZ2W&#xa;TvfEPsBSEwAdXL3M4uh7I5XVvgZbSCNIb1LPe8/XeIPnLvnyD+YRN6YFS6s8OQnn1Mzt84F4cB&#xa;Bp4jZiv2U0remkwe3rjBCgQpRC5N1fKhjx/uE4u08T2qYe53Oa0SNi/4oDdQ3sYdiqokcI9I6W&#xa;Rbl7SeG1NnRetdbPdPdEUGjU0rQP6Om+KEqExgxiR0vd+2hUW5SMgPNWxi6f0wL3kx6Jl6ONQi&#xa;+g6lPWzic4klrNLmw6uE0LdH/aJUHbkMiv859guXjb1CCy61C/CyoWkKF9fKuSDeNrJgLVd0Ft&#xa;uBbUz5hJu7wD0fD7ec8UDLnsya0s6zT2eOYT4TQGELfw9jUVdCEtFBJrQcR4E9jt7Qg16XOVR+&#xa;+DsWoGjftnxKNGbDoPJFnqMGKc3JRs/WhY3fJWhLRUP5xxzi8OXGmpe96s/5j5Fsok1nctBSVJ&#xa;xnCyRWDUXWupIPtWXVgN5LrCpA1cOkVHeFuLsTp2QSHlLP2mGbP9Ql/8pw3gaeObasLR8/TSpB&#xa;1aMdPJdG19meS00obuGGw1refgUzswleil3FdaSv4YrvJKS13KAoTzdq60FKU36BlMXBbv+uta&#xa;SECsloOWbcxTlxgzbRspiCDv+T0a59kySfhxRps9FH4pE0EV4tEv97hG+6wEOVMT23Qgj4RtLq&#xa;KK4ba/2njMPx3jSZQ0wVuKTZ8w8CQNF/MOIPTCayp6BjOMuEQwMrGNbMI4PLtLVEAKQVmgJyhj&#xa;GEoshJXtSHGE3KsvzidcBBWNRTw0NDi33iZkuFLH+Dr0vQ/7JnU4Vxcfiw88C/yyhawDKq8sVL&#xa;A8u4p3r4XvfRsmghzTqn3pMY6RV1HjEsTpqNROzF0vebrlSpbp/bgfh16QjXNIv+y2wTYhWqET&#xa;LehVoq7T7fIQtjBHq19zrYuR4xMNmNPuPpW+5KXLVWWoxzmVpzRMquUTiPdXEPXsRl/GzW2WtJ&#xa;Lr59CXRlMUfcU4xGjpNshosEBTQFGQwfgum7pZwNTLvSe/NYtD9us6sRqzKM0R2NqaeEorYaQT&#xa;3XhEU0B/+kynDRTci72OUwPMYutefD0Pf9Xm84Icjx4QWb9reoa2wVnt0nwbJxHDJeLDDe5JaY&#xa;qsFcCS8o7OtZa+zYtUX73S0irYf8vuov2FlhpYWTvL6ZsbGfyQTvDPxiymv2bdxEyIMoqgYJJg&#xa;+VPTYsJmcRhdGChKcxyyB5jYxqBB3+C5qfmQV5cP3perSO58/mw4/ZkdWHg+CF9LZu8Xb5fc3P&#xa;o11b2l+f+O0zb2eISsXPzmj0O7nW3H7ZXF2MN2U4zR2fPQVevXV6u8zeJpeCm8GKtoNfPqWyJp&#xa;CnpsmXbcI5ENN9lL13KM178Ea1REt8SqMOG4h5G/svPRLOo8aMRjhR/iHht2moJftiVD3cJc5W&#xa;GDx8hKVAFqH2E6BRCvkbuvicEasjBAHrBl4gxst75h0QGhs7PwCr63lDIw/VADBU6rLW/pOqjG&#xa;hKWfGKy6KgUlSF7Up60pGGnLKZggzvx6Hr4aAyjkSMe8UBR8QbiAyLmbbGS682xdVoP2UUVDp1&#xa;JcriLbg2x3uFjK81dZkc0yx324YpIK5OF90EtoUSJA5zSV0XBVI19rLQHipK2+8xxvY6sjbKE3&#xa;6mOW/i3SsUzZq6xrg1GdpYw+i54A8Q4KpMHRiIdvuCsKhpJB2PA8aE6q8kIRq0j+4cGcsaNigh&#xa;kxTFVi1JKU4R5YjCSYqGKS5b4kucI41Jj8QveG9eXlM8cbFFLZiqLPwBZRZzawILjeZVmOGBp3&#xa;M30qCoHK+oyYG0bnLPLIV83Q77Pc9pvBcuXOZ0yl1c2fSZfwDmG9IuLmfdcrALHS1mLAyRHkTL&#xa;edkQ+75C7lcRhBkphGBQ/Hj1LmEUnm7ZSsoVSNcmzC9JaM6ofN457Zi7Lj0NEoOleLY0ft8Qpl&#xa;F7S446ygkSomVns/xoxn9A/1Rq+CVZBjEi62hELl1ZV3AGyyRkmNVUgdq7zXfCRNTL1CZvxkSb&#xa;voOhcBf73Au6HaZ2hptSUCMnkwSWr4smx6tlQ9Je2UH6kPYTRgs4N3usTgQ0/FvK05hUN/YWdv&#xa;FU3cglF4fy4qYueXTUL2JyWyWny14vce2K+gRESovvZ86YsaX/AWF1ejox+Odtg1MDgejRag4h&#xa;/ODbtuo2mqG7Z8KsVE1R6jICzoFSzSPp71VEkCSFdD/FwqRmxyYGo2+2Sn8bQpDTrKzjU3T5KH&#xa;XMY0KzpplbdYo8EUnFk/4yyDampXukDkxfuUMQRedQ3N1bgXqInH+iNbNbIPKDv3NDlUopmM5V&#xa;2t3/aazbtNIitQ2uUMojHL8b1XrzQ0u0h6tjQRD3GoJLBzn5UWfN8VfHRhe7iCgiHpBT+m5W5a&#xa;lAxsAfm5g/3oKdrOFLIw7lDzfCD8dBfo60sbIkatx4Vhax7dheI7WiQsNCIk5R+Dxe34Gi0v8c&#xa;KECjLLH+TvN2x+rXK59+5QpmQxR6VNG0ZSwJFUHKZoYv9ilG1HiIWc4lD4BQcX5jmUtibHwxfe&#xa;dgLSxwEBXX2UNlFO3rVCCVLPQXK20CDeMNiZF4edAm4k8CvgtOYwHL742i6pdF6ndM0cdHWHmK&#xa;Kjnx7WSVe+NieCwOKLwSB8jSEwG2Q9wm0jhhS7DMpU0xbr2SIs8QwBRhp75dapPYf7FEfYtyZe&#xa;8fKwOj1I6nCdsCkgZsR6QmwnzHLZhWPv4Zb+fMKMW2Ch9AVWUvcHNsCQCZ4eVYsfEru24ol2O2&#xa;RSWrZMh8w4cjUMPr3gJwIQW0/H2B75rJoTxYXZ000h8bCtCXbunRauUZQpjwf4+QkDcpkjAffK&#xa;eymen60f8vWxy50XjAUwXIpSh2mebtPbYr7w32Pb3s+nGI7+eEaMGbNOjzj6/EU4WdAWW6DVgq&#xa;+T3GfS2PZaloA3wu2OAKLc75u9HXO8CsRQYGCVfx2SgUM8AvtHf3nRM2KAmGBg9pzXVwFDgt1u&#xa;P6rxd+G97L+NtKubKmOPLUbZdwXQeaXxbLdQWjF/+/jtzi7yTY7rQ72aGeeXL9HAwJDlvzs6/9&#xa;O2cf+d40e866QOBbaBJcf7YGCMiGBg1LfwBph/M8XjR+DXUF7SLEPfPqZdPXJZeDAwllvAyVy/&#xa;CXzH5uQuw9j0HF7gFQMu/N2uJ/P/HgPTj8Bl97ykk1jQ2bGugJ/AfT8A+Ke5if4HsJ2Rvbytlb&#xa;WRrb3znS86dx88h1F1lssVQdrV0iC8RXIm9a8kP38YWOrKV9+WwcBI4L6b7v3TOlX/u8//0lcF&#xa;xxQZDwpO0PgV+MYPc8mk/T/O5S+ehlAD617UFcN7+LvdNzb4/e7/ZD4JIN1kh0HPcJ9crXEGhO&#xa;/OCv80FbNb4FYAwFWIZWV7y2zh7z/a/cuCv2bJkqHY1LgaQjTc9+P2f9qJ1X+yyFoZ/sP0H8Px&#xa;D6EuXbySmSHYu0QNwD8j+smkXBNBsNH6/HxE4K5/RvSTd/I1UQ8yy9bw1YjmfxhRl+efEbH+nI&#xa;iHaXPu5yM69/szIrafEwmaUsr9fEQtIX9GxP5zIrOVhV/M0VHEnxFx/JzIeUeiHP+KyPkHorq4&#xa;PyPi/DkRfjVEgALq1YxQXEn7LSL+lF8S/Qh1fcv/Tbfq2x+WC2U/N1j59Vv8Gu+m5+ltlRKr/p&#xa;8dr++C3/QJuw2u0Pg/m6jeBb9pO3NbAl26/tx47C7LTb+F2yyB/X9uaHOX5eZ9iZi3l/zIr50c&#xa;bqJc361481ouzlsoyUv/Hzct3qS5Tia4WdVFfPvBr//WjV93w9WbBQlktwCzLn63NOwm5nUpw8&#xa;2c39uYHBDgv1nYcPcT/WZeGustTMoH4L8XM9zNHb4bC99M4bgtSbPwP+v2b6e73Z3EmyeJtwNC&#xa;FFTw/1orv8oPuUlyfSh5c7ed6RbJAcbPJ+Hfjyhv4l/v2d/cgeK6hc+C+3P839vBv7tAb37Xor&#xa;3F40n0c55f7m7JS0Hdv/5H0quf4qvg7ZIc/OrV/wNQSwcIJSf+b+0gAQC/NQEAUEsBAhQAFAAI&#xa;CAgAIQR8TiUn/m/tIAEAvzUBABEAAAAAAAAAAAAAAAAAAAAAAGxpYi9DaGVzc1RyZWUuamFyUE&#xa;sFBgAAAAABAAEAPwAAACwhAQAAAA==" ID="ID_1955155713" CREATED="1553730048899" MODIFIED="1553730049021"/>
</node>
</node>
<node TEXT="images" POSITION="right" ID="ID_209340361" CREATED="1521562135195" MODIFIED="1540216035600">
<edge COLOR="#7c7c00"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      An add-on may define any number of images as child nodes of the images node. The actual image data has to be placed as base64 encoded binary data into the text of a subnode.
    </p>
    <p>
      The images are saved to the <i>${installationbase}/resources/images</i>&#160;directory.
    </p>
    <p>
      
    </p>
    <p>
      The following images should be present:
    </p>
    <ul>
      <li>
        <i>${name}-icon.png</i>, like <i>oldicons-theme-icon.png</i>. This will be used in the app-on overview.
      </li>
      <li>
        <i>${name}-screenshot-1.png</i>, like <i>oldicons-theme-screenshot-1.png</i>. This will be used in the app-on details dialog. Further images can be included but they are not used yet.
      </li>
    </ul>
    <p>
      Images can be added automatically by releaseAddOn.groovy or must be uploaded into the map via the script <i>Tools-&gt;Scripts-&gt;Insert Binary</i>&#160;since they have to be (base64) encoded as simple strings.
    </p>
  </body>
</html>
</richcontent>
</node>
</node>
</map>
