<map version="freeplane 1.7.0">
<!--To view this file, download free mind mapping software Freeplane from http://freeplane.sourceforge.net -->
<node TEXT="ChessTree" FOLDED="false" ID="ID_1869326925" CREATED="1521562113754" MODIFIED="1549009837144" LINK="http://noUpdateURL.com" BACKGROUND_COLOR="#97c7dc" STYLE="oval">
<font SIZE="16" BOLD="true" ITALIC="true"/>
<hook NAME="MapStyle">
    <properties show_icon_for_attributes="true" fit_to_viewport="false" show_note_icons="true" edgeColorConfiguration="#808080ff,#ff0000ff,#0000ffff,#00ff00ff,#ff00ffff,#00ffffff,#7c0000ff,#00007cff,#007c00ff,#7c007cff,#007c7cff,#7c7c00ff"/>

<map_styles>
<stylenode LOCALIZED_TEXT="styles.root_node" STYLE="oval" UNIFORM_SHAPE="true" VGAP_QUANTITY="24.0 pt">
<font SIZE="24"/>
<stylenode LOCALIZED_TEXT="styles.predefined" POSITION="right" STYLE="bubble">
<stylenode LOCALIZED_TEXT="default" ICON_SIZE="12.0 pt" COLOR="#000000" STYLE="fork">
<font NAME="SansSerif" SIZE="10" BOLD="false" ITALIC="false"/>
</stylenode>
<stylenode LOCALIZED_TEXT="defaultstyle.details"/>
<stylenode LOCALIZED_TEXT="defaultstyle.attributes">
<font SIZE="9"/>
</stylenode>
<stylenode LOCALIZED_TEXT="defaultstyle.note" COLOR="#000000" BACKGROUND_COLOR="#ffffff" TEXT_ALIGN="LEFT"/>
<stylenode LOCALIZED_TEXT="defaultstyle.floating">
<edge STYLE="hide_edge"/>
<cloud COLOR="#f0f0f0" SHAPE="ROUND_RECT"/>
</stylenode>
</stylenode>
<stylenode LOCALIZED_TEXT="styles.user-defined" POSITION="right" STYLE="bubble">
<stylenode LOCALIZED_TEXT="styles.topic" COLOR="#18898b" STYLE="fork">
<font NAME="Liberation Sans" SIZE="10" BOLD="true"/>
</stylenode>
<stylenode LOCALIZED_TEXT="styles.subtopic" COLOR="#cc3300" STYLE="fork">
<font NAME="Liberation Sans" SIZE="10" BOLD="true"/>
</stylenode>
<stylenode LOCALIZED_TEXT="styles.subsubtopic" COLOR="#669900">
<font NAME="Liberation Sans" SIZE="10" BOLD="true"/>
</stylenode>
<stylenode LOCALIZED_TEXT="styles.important">
<icon BUILTIN="yes"/>
</stylenode>
</stylenode>
<stylenode LOCALIZED_TEXT="styles.AutomaticLayout" POSITION="right" STYLE="bubble">
<stylenode LOCALIZED_TEXT="AutomaticLayout.level.root" COLOR="#000000" STYLE="oval" SHAPE_HORIZONTAL_MARGIN="10.0 pt" SHAPE_VERTICAL_MARGIN="10.0 pt">
<font SIZE="18"/>
</stylenode>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,1" COLOR="#0033ff">
<font SIZE="16"/>
</stylenode>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,2" COLOR="#00b439">
<font SIZE="14"/>
</stylenode>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,3" COLOR="#990000">
<font SIZE="12"/>
</stylenode>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,4" COLOR="#111111">
<font SIZE="10"/>
</stylenode>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,5"/>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,6"/>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,7"/>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,8"/>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,9"/>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,10"/>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,11"/>
</stylenode>
</stylenode>
</map_styles>
</hook>
<hook NAME="AutomaticEdgeColor" COUNTER="11" RULE="ON_BRANCH_CREATION"/>
<attribute_layout NAME_WIDTH="107.99999678134928 pt" VALUE_WIDTH="134.9999959766866 pt"/>
<attribute NAME="name" VALUE="chessTree"/>
<attribute NAME="version" VALUE="0.0.1"/>
<attribute NAME="author" VALUE="Gergely Kiss"/>
<attribute NAME="freeplaneVersionFrom" VALUE="1.7.4"/>
<attribute NAME="freeplaneVersionTo" VALUE=""/>
<attribute NAME="updateUrl" VALUE="http://noUpdateURL.com" OBJECT="java.net.URI|http://noUpdateURL.com"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      The homepage of this add-on should be set as the link of the root node.
    </p>
    <p>
      The basic properties of this add-on. They can be used in script names and other attributes, e.g. &quot;${name}.groovy&quot;.
    </p>
    <ul>
      <li>
        name: The name of the add-on, normally a technically one (no spaces, no special characters except _.-).
      </li>
      <li>
        author: Author's name(s) and (optionally) email adresses.
      </li>
      <li>
        version: Since it's difficult to protect numbers like 1.0 from Freeplane's number parser it's advised to prepend a 'v' to the number, e.g. 'v1.0'.
      </li>
      <li>
        freeplane-version-from: The oldest compatible Freeplane version. The add-on will not be installed if the Freeplane version is too old.
      </li>
      <li>
        freeplane-version-to: Normally empty: The newest compatible Freeplane version. The add-on will not be installed if the Freeplane version is too new.
      </li>
      <li>
        updateUrl: URL of the file containing information (version, download url) on the latest version of this add-on. By default: &quot;${homepage}/version.properties&quot;
      </li>
    </ul>
  </body>
</html>
</richcontent>
<node TEXT="description" POSITION="left" ID="ID_752418840" CREATED="1521562135104" MODIFIED="1540216035317">
<edge COLOR="#ff0000"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      Description would be awkward to edit as an attribute.
    </p>
    <p>
      So you have to put the add-on description as a child of the <i>'description'</i>&#160;node.
    </p>
    <p>
      To translate the description you have to define a translation for the key 'addons.${name}.description'.
    </p>
  </body>
</html>
</richcontent>
<node ID="ID_281132702" CREATED="1521563587956" MODIFIED="1521563734014"><richcontent TYPE="NODE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      This addon is intended to ease the creation and maintenance of mindmaps containing trees for chess movements.
    </p>
    <p>
      
    </p>
    <p>
      0.) Template is available after addon installation from <i><b>File</b></i>&#160; --&gt; <i><b>New map from template...</b></i>&#160;choosing <i><b>template.ChessTree.mm</b></i>. Any additional information can be found in the template.
    </p>
    <p>
      
    </p>
  </body>
</html>
</richcontent>
<attribute_layout VALUE_WIDTH="134.9999959766866 pt"/>
</node>
</node>
<node TEXT="changes" POSITION="left" ID="ID_845634758" CREATED="1521562135109" MODIFIED="1540216035330">
<edge COLOR="#0000ff"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      Change log of this add-on: append one node for each noteworthy version and put the details for each version into a child node.
    </p>
  </body>
</html>
</richcontent>
</node>
<node TEXT="license" FOLDED="true" POSITION="left" ID="ID_1331637895" CREATED="1521562135113" MODIFIED="1540216035338">
<edge COLOR="#00ff00"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      The add-ons's license that the user has to accept before she can install it.
    </p>
    <p>
      
    </p>
    <p>
      The License text has to be entered as a child of the <i>'license'</i>&#160;node, either as plain text or as HTML.
    </p>
  </body>
</html>
</richcontent>
<node TEXT="&#xa;This add-on is free software: you can redistribute it and/or modify&#xa;it under the terms of the GNU General Public License as published by&#xa;the Free Software Foundation, either version 2 of the License, or&#xa;(at your option) any later version.&#xa;&#xa;This program is distributed in the hope that it will be useful,&#xa;but WITHOUT ANY WARRANTY; without even the implied warranty of&#xa;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the&#xa;GNU General Public License for more details.&#xa;" ID="ID_1555852289" CREATED="1521562135117" MODIFIED="1521566722845"/>
</node>
<node TEXT="preferences.xml" POSITION="left" ID="ID_136508631" CREATED="1521562135121" MODIFIED="1540216035346">
<edge COLOR="#ff00ff"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      <font color="#000000" face="SansSerif, sans-serif">The child node contains the add-on configuration as an extension to mindmapmodemenu.xml (in Tools-&gt;Preferences-&gt;Add-ons). </font>
    </p>
    <p>
      <font color="#000000" face="SansSerif, sans-serif">Every property in the configuration should receive a default value in <i>default.properties</i>&#160;node.</font>
    </p>
  </body>
</html>
</richcontent>
</node>
<node TEXT="default.properties" POSITION="left" ID="ID_1494843788" CREATED="1521562135125" MODIFIED="1540216035353">
<edge COLOR="#00ffff"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      These properties play together with the preferences: Each property defined in the preferences should have a default value in the attributes of this node.
    </p>
  </body>
</html>
</richcontent>
</node>
<node TEXT="translations" POSITION="left" ID="ID_461099033" CREATED="1521562135130" MODIFIED="1540216035360">
<edge COLOR="#7c0000"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      The translation keys that this script uses. Define one child node per supported locale. The attributes contain the translations. Define at least
    </p>
    <ul>
      <li>
        'addons.${name}' for the add-on's name
      </li>
      <li>
        'addons.${name}.description' for the description, e.g. in the add-on overview dialog (not necessary for English)
      </li>
      <li>
        'addons.${name}.&lt;scriptname&gt;' for each script since it will be the menu title.
      </li>
    </ul>
  </body>
</html>
</richcontent>
<node TEXT="en" ID="ID_1779268052" CREATED="1521562135133" MODIFIED="1540215919911" MAX_WIDTH="322.49999056756525 pt" MIN_WIDTH="322.49999056756525 pt">
<attribute_layout NAME_WIDTH="155.99999535083785 pt" VALUE_WIDTH="123.74999631196272 pt"/>
<attribute NAME="addons.${name}" VALUE="ChessTree"/>
<attribute NAME="addon.${name}.updateChessTree" VALUE="Update ChessTree..."/>
<attribute NAME="addon.${name}.pasteBranch" VALUE="Paste branch..."/>
</node>
</node>
<node TEXT="deinstall" POSITION="left" ID="ID_1510539068" CREATED="1521562135137" MODIFIED="1540216035366">
<edge COLOR="#00007c"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      List of files and/or directories to remove on uninstall
    </p>
  </body>
</html>
</richcontent>
<attribute_layout NAME_WIDTH="52.499998435378124 pt" VALUE_WIDTH="271.4999919086697 pt"/>
<attribute NAME="delete" VALUE="${installationbase}/addons/${name}.script.xml"/>
<attribute NAME="delete" VALUE="${installationbase}/templates/template.ChessTree.mm"/>
<attribute NAME="delete" VALUE="${installationbase}/lib/ChessTree.jar"/>
<attribute NAME="delete" VALUE="${installationbase}/addons/${name}/scripts/pasteBranch.groovy"/>
<attribute NAME="delete" VALUE="${installationbase}/addons/${name}/scripts/updateChessTree.groovy"/>
</node>
<node TEXT="scripts" POSITION="right" ID="ID_836008002" CREATED="1521562135167" MODIFIED="1540216035376">
<edge COLOR="#007c00"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      An add-on may contain multiple scripts. The node text defines the script name (e.g. inserInlineImage.groovy). The name must have a suffix of a supported script language like .groovy or .js and may only consist of letters and digits. The script properties have to be configured via attributes:
    </p>
    <p>
      
    </p>
    <p>
      * menuLocation: &lt;locationkey&gt;
    </p>
    <p>
      &#160;&#160;&#160;- Defines where the menu location.
    </p>
    <p>
      &#160;&#160;&#160;-&#160;See mindmapmodemenu.xml for how the menu locations look like.
    </p>
    <p>
      &#160;&#160;&#160;- http://freeplane.bzr.sf.net/bzr/freeplane/freeplane_program/trunk/annotate/head%3A/freeplane/resources/xml/mindmapmodemenu.xml
    </p>
    <p>
      &#160;&#160;&#160;- This attribute is mandatory
    </p>
    <p>
      
    </p>
    <p>
      * menuTitleKey: &lt;key&gt;
    </p>
    <p>
      &#160;&#160;&#160;- The menu item title will be looked up under the translation key &lt;key&gt; - don't forget to define its translation.
    </p>
    <p>
      &#160;&#160;&#160;- This attribute is mandatory
    </p>
    <p>
      
    </p>
    <p>
      * executionMode: &lt;mode&gt;
    </p>
    <p>
      &#160;&#160;&#160;- The execution mode as described in the Freeplane wiki (http://freeplane.sourceforge.net/wiki/index.php/Scripting)
    </p>
    <p>
      &#160;&#160;&#160;- ON_SINGLE_NODE: Execute the script once. The <i>node</i>&#160;variable is set to the selected node.
    </p>
    <p>
      &#160;&#160;&#160;- ON_SELECTED_NODE: Execute the script n times for n selected nodes, once for each node.
    </p>
    <p>
      &#160;&#160;&#160;- ON_SELECTED_NODE_RECURSIVELY: Execute the script on every selected node and recursively on all of its children.
    </p>
    <p>
      &#160;&#160;&#160;- In doubt use ON_SINGLE_NODE.
    </p>
    <p>
      &#160;&#160;&#160;- This attribute is mandatory
    </p>
    <p>
      
    </p>
    <p>
      * keyboardShortcut: &lt;shortcut&gt;
    </p>
    <p>
      &#160;&#160;&#160;- Optional: keyboard combination / accelerator for this script, e.g. control alt I
    </p>
    <p>
      &#160;&#160;&#160;- Use lowercase letters for modifiers and uppercase for letters. Use no + signs.
    </p>
    <p>
      &#160;&#160;&#160;- The available key names are listed at http://download.oracle.com/javase/1.4.2/docs/api/java/awt/event/KeyEvent.html#VK_0
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;In the list only entries with a 'VK_' prefix count. Omit the prefix in the shortcut definition.
    </p>
    <p>
      
    </p>
    <p>
      * Permissions&#160;that the script(s) require, each either false or true:
    </p>
    <p>
      &#160;&#160;&#160;- execute_scripts_without_asking
    </p>
    <p>
      &#160;&#160;&#160;- execute_scripts_without_file_restriction: permission to read files
    </p>
    <p>
      &#160;&#160;&#160;- execute_scripts_without_write_restriction: permission to create/change/delete files
    </p>
    <p>
      &#160;&#160;&#160;- execute_scripts_without_exec_restriction: permission to execute other programs
    </p>
    <p>
      &#160;&#160;&#160;- execute_scripts_without_network_restriction: permission to access the network
    </p>
    <p>
      &#160;&#160;Notes:
    </p>
    <p>
      &#160;&#160;- The set of permissions is fixed.
    </p>
    <p>
      &#160;&#160;- Don't change the attribute names, don't omit one.
    </p>
    <p>
      &#160;&#160;- Set the values either to true or to false
    </p>
    <p>
      &#160;&#160;- In any case set execute_scripts_without_asking to true unless you want to annoy users.
    </p>
  </body>
</html>
</richcontent>
<node TEXT="pasteBranch.groovy" FOLDED="true" ID="ID_1708118480" CREATED="1522494712280" MODIFIED="1522494830917">
<attribute_layout NAME_WIDTH="146.2499956414105 pt" VALUE_WIDTH="134.9999959766866 pt"/>
<attribute NAME="menuTitleKey" VALUE="addon.${name}.pasteBranch"/>
<attribute NAME="menuLocation" VALUE="/menu_bar/addons.${name}"/>
<attribute NAME="executionMode" VALUE="on_single_node"/>
<attribute NAME="keyboardShortcut" VALUE=""/>
<attribute NAME="execute_scripts_without_asking" VALUE="true"/>
<attribute NAME="execute_scripts_without_file_restriction" VALUE="true"/>
<attribute NAME="execute_scripts_without_write_restriction" VALUE="true"/>
<attribute NAME="execute_scripts_without_exec_restriction" VALUE="true"/>
<attribute NAME="execute_scripts_without_network_restriction" VALUE="true"/>
<node TEXT="import org.freeplane.plugin.script.proxy.ScriptUtils&#xd;&#xa;import groovy.swing.SwingBuilder&#xd;&#xa;//import groovy.io.File&#xd;&#xa;import groovy.io.FileType&#xd;&#xa;&#xd;&#xa;import java.awt.FlowLayout as FL&#xd;&#xa;import java.awt.event.ActionEvent;&#xd;&#xa;import java.awt.event.ActionListener;&#xd;&#xa;import java.awt.Dimension;&#xd;&#xa;import java.awt.KeyStroke;&#xd;&#xa;import java.awt.event.KeyEvent;&#xd;&#xa;import java.awt.event.KeyAdapter;&#xd;&#xa;import java.awt.Action;&#xd;&#xa;import java.awt.Font;&#xd;&#xa;&#xd;&#xa;import javax.swing.BoxLayout as BXL&#xd;&#xa;import javax.swing.JFrame&#xd;&#xa;import javax.swing.AbstractAction;&#xd;&#xa;import javax.swing.Action;&#xd;&#xa;import javax.swing.BoxLayout;&#xd;&#xa;import javax.swing.JComponent;&#xd;&#xa;import javax.swing.JList;&#xd;&#xa;import javax.swing.JPanel;&#xd;&#xa;import javax.swing.KeyStroke;&#xd;&#xa;import javax.swing.JScrollPane&#xd;&#xa;import javax.swing.JFileChooser;&#xd;&#xa;&#xd;&#xa;import java.awt.Toolkit&#xd;&#xa;import java.awt.datatransfer.Clipboard&#xd;&#xa;import java.awt.datatransfer.DataFlavor&#xd;&#xa;import java.awt.datatransfer.StringSelection&#xd;&#xa;&#xd;&#xa;import ChessTree.Notation&#xd;&#xa;import ChessTree.NotationTranslator&#xd;&#xa;import ChessTree.ChessTreeSettings&#xd;&#xa;import ChessTree.PositionInterpreter&#xd;&#xa;&#xd;&#xa;/*************/&#xd;&#xa;/** Globals **/&#xd;&#xa;/*************/&#xd;&#xa;chessTreeSettings = new ChessTreeSettings(this.node.map)&#xd;&#xa;/* CONSTANTS */ &#xd;&#xa;SUPPORTED_LANGUAGES = chessTreeSettings.SUPPORTED_LANGUAGES&#xd;&#xa;DICTIONARY = chessTreeSettings.DICTIONARY&#xd;&#xa;&#xd;&#xa;LANGUAGE_CURRENT = chessTreeSettings.get(&quot;chesstree_language&quot;)&#xd;&#xa;&#xd;&#xa;ROOT = this.node.map.root&#xd;&#xa;&#xd;&#xa;/* FUNCTIONS */&#xd;&#xa;&#xd;&#xa;/* Static functions for ClipBoard handling */ &#xd;&#xa;static String getClipboardContents(){    return Toolkit.getDefaultToolkit().getSystemClipboard().getContents(null).getTransferData(DataFlavor.stringFlavor)    }&#xd;&#xa;&#xd;&#xa;def showPGNFileChooser() {&#xd;&#xa;    if(guiPGNFolderRB.selected) {&#xd;&#xa;        JFileChooser chooser = new JFileChooser();&#xd;&#xa;        chooser.setCurrentDirectory(new java.io.File(&quot;.&quot;));&#xd;&#xa;        chooser.setDialogTitle(&quot;Choose directory containing PGN files...&quot;);&#xd;&#xa;        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);&#xd;&#xa;        chooser.setAcceptAllFileFilterUsed(false);&#xd;&#xa;        &#xd;&#xa;        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {&#xd;&#xa;            return chooser.getCurrentDirectory()&#xd;&#xa;        } else {&#xd;&#xa;            return &quot;&quot;&#xd;&#xa;        }&#xd;&#xa;    } else {&#xd;&#xa;        return &quot;&quot;&#xd;&#xa;    }&#xd;&#xa;&#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;def switchPGNinput() {&#xd;&#xa;    guiPGNClipboard.editable = guiPGNClipboardRB.selected    &#xd;&#xa;    guiPGNClipboard.enabled = guiPGNClipboardRB.selected&#xd;&#xa;    guiPGNFolder.editable = guiPGNFolderRB.selected&#xd;&#xa;    guiPGNFolder.enabled = guiPGNFolderRB.selected    &#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;def getNodeFEN(aNode) {&#xd;&#xa;    return aNode.attributes.containsKey(&quot;FEN&quot;) ? aNode[&quot;FEN&quot;] : &quot;&quot;//: PositionInterpreter.FEN_STARTING&#xd;&#xa;}&#xd;&#xa;/****************/&#xd;&#xa;/**** M A I N ***/&#xd;&#xa;/****************/&#xd;&#xa;&#xd;&#xa;/* Build Dialog window */&#xd;&#xa;def s = new SwingBuilder()&#xd;&#xa;s.setVariable(&apos;myDialog-properties&apos;,[:])&#xd;&#xa;def vars = s.variables&#xd;&#xa;def disableItem(item) {vars.guiPGNClip.editable = false}&#xd;&#xa;&#xd;&#xa;def dial = s.dialog(title:&quot;Paste branch ...&quot;, id:&apos;myDialog&apos;, modal:true, locationRelativeTo:ui.frame, owner:ui.frame, defaultCloseOperation:JFrame.DISPOSE_ON_CLOSE, pack:true, show:true) {&#xd;&#xa;    panel(id:&apos;pMain&apos;) {&#xd;&#xa;        boxLayout(axis:BXL.Y_AXIS)&#xd;&#xa;                &#xd;&#xa;        guiPGNSource = buttonGroup();&#xd;&#xa;        panel(alignmentX:0f) {&#xd;&#xa;            flowLayout(alignment:FL.LEFT)&#xd;&#xa;            guiPGNClipboardRB = radioButton(preferredSize: [150, 20], text:&quot;PGN from ClipBoard&quot;, buttonGroup:guiPGNSource, selected:true, mouseClicked: {switchPGNinput()});&#xd;&#xa;            scrollPane(horizontalScrollBarPolicy:JScrollPane.HORIZONTAL_SCROLLBAR_NEVER, verticalScrollBarPolicy:JScrollPane.VERTICAL_SCROLLBAR_ALWAYS) {&#xd;&#xa;                guiPGNClipboard = textArea( id:&apos;guiPGNClip&apos;, columns: 60, rows: 6, font: new Font(&quot;Consolas&quot;, Font.PLAIN, 11), text: getClipboardContents(), wrapStyleWord:true, lineWrap:true)&#xd;&#xa;            }&#xd;&#xa;        }  &#x9;&#xd;&#xa;        panel(alignmentX:0f) {&#xd;&#xa;            flowLayout(alignment:FL.LEFT)            &#xd;&#xa;            guiPGNFolderRB = radioButton(preferredSize: [150, 20], text:&quot;PGN from folder&quot;, buttonGroup:guiPGNSource, mouseClicked: {switchPGNinput()});&#xd;&#xa;            guiPGNFolder = textField(columns:60, font: new Font(&quot;Consolas&quot;, Font.PLAIN, 11), mouseClicked: { guiPGNFolder.text = showPGNFileChooser() }, editable: guiPGNFolderRB.selected)    &#xd;&#xa;            &#xd;&#xa;        }&#xd;&#xa;        panel(alignmentX:0f) {&#xd;&#xa;            flowLayout(alignment:FL.LEFT)&#xd;&#xa;            label(&apos;Language&apos;, preferredSize: [60, 24])&#xd;&#xa;&#x9;&#x9;&#x9;comboBox(id: &apos;guiLanguage&apos;, preferredSize: [100, 24], editable:true,&#xd;&#xa;&#x9;&#x9;&#x9;&#x9;items:SUPPORTED_LANGUAGES.collect{it.value}, selectedItem:SUPPORTED_LANGUAGES[LANGUAGE_CURRENT]) &#xd;&#xa;        }         &#xd;&#xa;        panel(alignmentX:0f) {&#xd;&#xa;            flowLayout(alignment:FL.LEFT)&#xd;&#xa;            button(&apos;Paste&apos;, preferredSize:[110, 24],&#xd;&#xa;                   actionPerformed:{&#xd;&#xa;                       vars.dialogResult = &apos;paste&apos;&#xd;&#xa;                       dispose()&#xd;&#xa;            })&#xd;&#xa;            button(&apos;Cancel&apos;, preferredSize:[120, 24],&#xd;&#xa;                   actionPerformed:{&#xd;&#xa;                       vars.dialogResult = &apos;cancel&apos;&#xd;&#xa;                       dispose()&#xd;&#xa;            })&#xd;&#xa;        }&#xd;&#xa;        panel(alignmentX:0f) {&#xd;&#xa;        }&#xd;&#xa;    }&#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;/* Handle received data */&#xd;&#xa;pgn = &quot;&quot;&#xd;&#xa;if (vars.dialogResult == &apos;paste&apos;) {&#xd;&#xa;&#x9;/* Update attributes */&#xd;&#xa;    PGN_LANGUAGE = SUPPORTED_LANGUAGES.find{it.value == vars.guiLanguage.getSelectedItem()}.key&#xd;&#xa;    switch (guiPGNSource.getSelection()) {&#xd;&#xa;        case (guiPGNClipboardRB.model):&#xd;&#xa;            pgn = guiPGNClipboard.text&#xd;&#xa;            break;&#xd;&#xa;        case (guiPGNFolderRB.model):&#xd;&#xa;            dir = new File(guiPGNFolder.text)&#xd;&#xa;            if (dir.path != &quot;&quot;) {&#xd;&#xa;                dir.eachDirRecurse() { dir -&gt;  &#xd;&#xa;                    dir.eachFileMatch(~/.*.pgn/) { file -&gt;  &#xd;&#xa;                        pgn += new File(file.getPath()).text&#xd;&#xa;                    }  &#xd;&#xa;                }  &#xd;&#xa;            } // else no folder selected&#xd;&#xa;            &#xd;&#xa;            break;&#xd;&#xa;        default: break;&#xd;&#xa;    }&#xd;&#xa;    &#xd;&#xa;&#xd;&#xa;} else {&#xd;&#xa;    return;&#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;/* Initialization */&#xd;&#xa;def translationNeeded = (PGN_LANGUAGE != LANGUAGE_CURRENT)&#xd;&#xa;def nextNodeStack = []&#xd;&#xa;def nextNodeStackAlt = []&#xd;&#xa;&#xd;&#xa;def pgnNotation = new Notation(pgn, PGN_LANGUAGE)&#xd;&#xa;def nodeNotation = new Notation(this.node.getDisplayedText(), LANGUAGE_CURRENT) // FEN is retrieved from PGN notation, not needed for nodeNotation&#xd;&#xa;&#xd;&#xa;/* Determine starting node */&#xd;&#xa;// Search for starting node with ancestors first order &#xd;&#xa;def currentNode = this.node&#xd;&#xa;while (pgnNotation.getFEN() != getNodeFEN(currentNode)) {&#xd;&#xa;    currentNode = currentNode.parent&#xd;&#xa;    if (currentNode == null) {&#xd;&#xa;        break;&#xd;&#xa;    }&#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;if (currentNode == null) {&#xd;&#xa;    currentNode = this.node.createChild(&quot;Starting position&quot;) // no matching node found&#xd;&#xa;    currentNode.style.setName(&quot;Starting position&quot;)&#xd;&#xa;    currentNode[&quot;FEN&quot;] = pgnNotation.position.FEN&#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;/* Walk through PGN */&#xd;&#xa;&#xd;&#xa;while (pgn.length() &gt; 0) {&#xd;&#xa;    if (pgnNotation.getMove() == &quot;&quot;) break;&#xd;&#xa;    &#xd;&#xa;    /* Parse ChessTree specific comment parts: Odds, Freq, Opening */&#xd;&#xa;    comments = pgnNotation.getComment()&#xd;&#xa;    odds = opening = freq = &quot;&quot;&#xd;&#xa;    &#xd;&#xa;    &#xd;&#xa;    odds = (comments =~ /(?i)\s*odds\s*:\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*;/)&#xd;&#xa;    if (odds.count&gt;0) {&#xd;&#xa;        comments = comments.replace(odds[0][0], &quot;&quot;)&#xd;&#xa;        odds = &quot;${odds[0][1]},${odds[0][2]},${odds[0][3]}&quot;&#xd;&#xa;    } else {&#xd;&#xa;        odds = &quot;&quot;&#xd;&#xa;    }&#xd;&#xa;    &#xd;&#xa;    freq = (comments =~ /(?i)\s*freq\s*:\s*(\d+)\s*;/)&#xd;&#xa;    if (freq.count&gt;0) {&#xd;&#xa;        comments = comments.replace(freq[0][0], &quot;&quot;)&#xd;&#xa;        freq = &quot;${freq[0][1]}&quot;&#xd;&#xa;    } else {&#xd;&#xa;        freq = &quot;&quot;&#xd;&#xa;    }&#xd;&#xa;    &#xd;&#xa;    opening = (comments =~ /(?i)\s*opening\s*:\s*([^;]+)\s*;/)&#xd;&#xa;    if (opening.count&gt;0) {&#xd;&#xa;        comments = comments.replace(opening[0][0], &quot;&quot;)&#xd;&#xa;        opening = &quot;${opening[0][1]}&quot;&#xd;&#xa;    } else {&#xd;&#xa;        opening = &quot;&quot;&#xd;&#xa;    }&#xd;&#xa;    &#xd;&#xa;    nag = pgnNotation.getNAGtext()&#xd;&#xa;    &#xd;&#xa;    //println pgnNotation.getMoveNumber() + &quot; _ &quot; + pgnNotation.getMove() + &quot; _ &quot; + pgnNotation.getComment()&#xd;&#xa;    //println &quot;      &quot; + odds + &quot; _ &quot; + freq + &quot; _ &quot; + opening&#xd;&#xa;    println &quot;********************&quot;&#xd;&#xa;    println pgnNotation.getNumbering() + &quot; &quot; + pgnNotation.getMove()&#xd;&#xa;&#xd;&#xa;    //println pgnNotation.getRemainingText()&#xd;&#xa;    //println pgnNotation.branchingStarts() + &quot; / &quot; + pgnNotation.branchingEnds()&#xd;&#xa;&#xd;&#xa;    /* Handle translated notation within chesstree */&#xd;&#xa;    if (translationNeeded) {&#xd;&#xa;        pgnNotation.translateTo(LANGUAGE_CURRENT)&#xd;&#xa;    }&#xd;&#xa;    &#xd;&#xa;    /* Process branching */&#xd;&#xa;    def numOfUnusedBranches = pgnNotation.branchingEnds()-pgnNotation.branchingStarts()&#xd;&#xa;    if (numOfUnusedBranches&gt;0) { // Branch ends&#xd;&#xa;        numOfUnusedBranches.times({&#xd;&#xa;            currentNode=nextNodeStack.pop()&#xd;&#xa;            nextNodeStackAlt.pop()&#xd;&#xa;        })&#xd;&#xa;    }&#xd;&#xa;    &#xd;&#xa;    if (pgnNotation.branchingStarts()) { // Branch starts : at least one move is assumed after one &quot;(&quot;, no consecutive &quot;(&quot;-s!&#xd;&#xa;        if (pgnNotation.branchingEnds())&#xd;&#xa;        {&#xd;&#xa;            currentNode = nextNodeStackAlt[0]&#xd;&#xa;        } else {&#xd;&#xa;            nextNodeStackAlt.push(currentNode.parent)&#xd;&#xa;            nextNodeStack.push(currentNode)&#xd;&#xa;            currentNode = currentNode.parent&#xd;&#xa;        }&#xd;&#xa;    }&#xd;&#xa;    &#xd;&#xa;    /* Search for child node matching moveEng, FEN match is assumed */&#xd;&#xa;    matchingChild = currentNode.children.find {&#xd;&#xa;        nodeNotation.set(it.getDisplayedText()) // FEN is retrieved from PGN notation, not needed for nodeNotation&#xd;&#xa;        if (pgnNotation.getMoveEng() == nodeNotation.getMoveEng()) {&#xd;&#xa;            return true // found&#xd;&#xa;        } else {&#xd;&#xa;            return false // not found&#xd;&#xa;        }&#xd;&#xa;        &#xd;&#xa;    }&#xd;&#xa;    &#xd;&#xa;    /* Process pgnNotation : node text */&#xd;&#xa;    if (matchingChild == null) {&#xd;&#xa;        // no mathing child found, create it&#xd;&#xa;        currentNode = currentNode.createChild()&#xd;&#xa;        currentNode.text = pgnNotation.getMove()&#xd;&#xa;    } else {&#xd;&#xa;        currentNode = matchingChild // matching child found, advance map processing&#xd;&#xa;    }&#xd;&#xa;    &#xd;&#xa;    /* Process pgnNotation : node[&quot;FEN&quot;] */&#xd;&#xa;    /* Update FEN from pgn even if matching child was found and its FEN was correct. &#xd;&#xa;    FEN counters, enpassant, castling infos are guaranteed by starting position search at script startup. */&#xd;&#xa;    currentNode[&quot;FEN&quot;] = pgnNotation.positionAfterMove.FEN    &#xd;&#xa;&#xd;&#xa;    /* Process pgnNotation : opening */&#xd;&#xa;    if (opening != &quot;&quot;) {&#xd;&#xa;        currentNode[&quot;Opening&quot;] = opening&#xd;&#xa;        if (currentNode.children.findAll{it.style.name==&quot;Opening&quot;}.size() &gt; 0){&#xd;&#xa;            currentNode.children.findAll{it.style.name==&quot;Opening&quot;}[-1].text = opening&#xd;&#xa;        } else {&#xd;&#xa;            opening = currentNode.createChild(opening)&#xd;&#xa;            opening.style.setName(&quot;Opening&quot;)&#xd;&#xa;            opening.setFree(true)&#xd;&#xa;        }&#xd;&#xa;    }&#xd;&#xa;    /* Process pgnNotation : odds */&#xd;&#xa;    if (odds != &quot;&quot;) {&#xd;&#xa;        currentNode[&quot;Odds&quot;] = odds&#xd;&#xa;        //TODO: wait for OddsView class, implement here update oddsNode, &#xd;&#xa;    }&#xd;&#xa;&#xd;&#xa;    /* Process pgnNotation : frequency */&#xd;&#xa;    if (freq != &quot;&quot;) {&#xd;&#xa;        currentNode[&quot;Freq&quot;] = freq&#xd;&#xa;        //TODO: wait for ConnectorView class, implement here update connector&#xd;&#xa;    }&#xd;&#xa;    /* Process pgnNotation : nag */&#xd;&#xa;    if (nag != &quot;&quot;) {&#xd;&#xa;        currentNode[&quot;NAG&quot;] = nag&#xd;&#xa;        pgnNotation.getNAGs().each {&#xd;&#xa;            def nagTxt = NotationTranslator.getNAG((it-&quot;\$&quot;).toInteger(), &quot;sym&quot;)&#xd;&#xa;            if (currentNode.details) {&#xd;&#xa;                currentNode.setDetailsText(&quot;${currentNode.details.to.plain}\n${nagTxt}&quot;)&#xd;&#xa;            } else {&#xd;&#xa;                currentNode.setDetailsText(nagTxt)&#xd;&#xa;            }&#xd;&#xa;        }&#xd;&#xa;    }   &#xd;&#xa;    /* Process pgnNotation : opening */&#xd;&#xa;    if (comments != &quot;&quot;) {&#xd;&#xa;        commentsNode = currentNode.createChild(&quot;&quot;)&#xd;&#xa;        commentsNode.style.setName(&quot;Explanation&quot;)&#xd;&#xa;        commentsNode.setFree(true)&#xd;&#xa;        commentsNode.setDetailsText(comments)&#xd;&#xa;        commentsNode.setHorizontalShift(70)&#xd;&#xa;        commentsNode.setVerticalShift(10)&#xd;&#xa;    }&#xd;&#xa;   &#xd;&#xa;    /* Advance pgnNotation processing */&#xd;&#xa;    pgn = pgnNotation.getRemainingText()&#xd;&#xa;    pgnNotation.set(pgn)&#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;return 0" ID="ID_422247048" CREATED="1575241405486" MODIFIED="1575241405493"/>
</node>
<node TEXT="updateChessTree.groovy" FOLDED="true" ID="ID_728751355" CREATED="1538315999856" MODIFIED="1540215984948">
<attribute_layout VALUE_WIDTH="134.9999959766866 pt"/>
<attribute NAME="menuTitleKey" VALUE="addon.${name}.updateChessTree"/>
<attribute NAME="menuLocation" VALUE="/menu_bar/addons.${name}"/>
<attribute NAME="executionMode" VALUE="on_single_node"/>
<attribute NAME="keyboardShortcut" VALUE=""/>
<attribute NAME="execute_scripts_without_asking" VALUE="true"/>
<attribute NAME="execute_scripts_without_file_restriction" VALUE="true"/>
<attribute NAME="execute_scripts_without_write_restriction" VALUE="true"/>
<attribute NAME="execute_scripts_without_exec_restriction" VALUE="true"/>
<attribute NAME="execute_scripts_without_network_restriction" VALUE="true"/>
<node TEXT="import org.freeplane.features.map.MapModel;&#xd;&#xa;import org.freeplane.features.attribute.AttributeRegistry;&#xd;&#xa;import org.freeplane.features.attribute.AttributeRegistryElement;&#xd;&#xa;&#xd;&#xa;import org.freeplane.plugin.script.proxy.ScriptUtils&#xd;&#xa;import groovy.swing.SwingBuilder&#xd;&#xa;import java.awt.FlowLayout as FL&#xd;&#xa;import java.awt.event.ActionEvent;&#xd;&#xa;import java.awt.event.ActionListener;&#xd;&#xa;import java.awt.Dimension;&#xd;&#xa;import java.awt.KeyStroke;&#xd;&#xa;import java.awt.event.KeyEvent;&#xd;&#xa;import java.awt.event.KeyAdapter;&#xd;&#xa;import java.awt.Action;&#xd;&#xa;&#xd;&#xa;import javax.swing.BoxLayout as BXL&#xd;&#xa;import javax.swing.JFrame&#xd;&#xa;import javax.swing.AbstractAction;&#xd;&#xa;import javax.swing.Action;&#xd;&#xa;import javax.swing.BoxLayout;&#xd;&#xa;import javax.swing.JComponent;&#xd;&#xa;import javax.swing.JList;&#xd;&#xa;import javax.swing.JPanel;&#xd;&#xa;import javax.swing.KeyStroke;&#xd;&#xa;import groovy.transform.Field&#xd;&#xa;&#xd;&#xa;import ChessTree.Notation&#xd;&#xa;import ChessTree.NotationTranslator&#xd;&#xa;import ChessTree.ChessTreeSettings&#xd;&#xa;import ChessTree.OddsView&#xd;&#xa;import ChessTree.ConnectorView&#xd;&#xa;import ChessTree.PositionInterpreter&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;/*************/&#xd;&#xa;/** Globals **/&#xd;&#xa;/*************/&#xd;&#xa;cts = new ChessTreeSettings(this.node.map)&#xd;&#xa;&#xd;&#xa;DICTIONARY = cts.DICTIONARY&#xd;&#xa;&#xd;&#xa;ROOT = this.node.map.root&#xd;&#xa;LANGUAGE_CURRENT = cts.get(&quot;chesstree_language&quot;)&#xd;&#xa;NUMBERING_CURRENT = cts.get(&quot;chesstree_numbering&quot;)&#xd;&#xa;NAG_CURRENT = cts.get(&quot;chesstree_NAG&quot;)&#xd;&#xa;CONNECTOR_CURRENT = cts.get(&quot;chesstree_connectors&quot;)&#xd;&#xa;ODDS_CURRENT = cts.get(&quot;chesstree_odds&quot;)&#xd;&#xa;&#xd;&#xa;/* Globals for odds image updater */ &#xd;&#xa;mapfile=this.node.map.file&#xd;&#xa;mapfilePath = mapfile.parent.replace(&quot;\\&quot;, &quot;/&quot;)&#xd;&#xa;mapfileName = mapfile.name.lastIndexOf(&apos;.&apos;).with {it != -1 ? mapfile.name[0..&lt;it] : mapfile.name}&#xd;&#xa;imgAbsPath = mapfilePath + &quot;/img_&quot; + mapfileName&#xd;&#xa;imgRelPath = &quot;./img_&quot; + mapfileName&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;/*****************/&#xd;&#xa;/**** Settings ***/ &#xd;&#xa;/*****************/&#xd;&#xa;&#xd;&#xa;/* Build Dialog window */&#xd;&#xa;def s = new SwingBuilder()&#xd;&#xa;s.setVariable(&apos;myDialog-properties&apos;,[:])&#xd;&#xa;def vars = s.variables&#xd;&#xa;def disableItem(item) {item.enabled = !item.enabled}&#xd;&#xa;def dial = s.dialog(title:&quot;ChessTree settings...&quot;, id:&apos;myDialog&apos;, modal:true, &#xd;&#xa;            locationRelativeTo:ui.frame, owner:ui.frame, defaultCloseOperation:JFrame.DISPOSE_ON_CLOSE, &#xd;&#xa;            preferredSize: [280, 300], pack:true, show:true) {&#xd;&#xa;    panel(id:&apos;pMain&apos;) {&#xd;&#xa;        boxLayout(axis:BXL.Y_AXIS)&#xd;&#xa;        /* &#xd;&#xa;        Text: Current language is ___. Check tooltip if you don&apos;t agree. &#xd;&#xa;        Tooltip: If the language of notation in the mindmap is inconsistent you should edit the mindmap manually to make its language consistent. &#xd;&#xa;        Otherwise change below settings and click on &quot;Save&quot;. It affects settings saved in Mindmap properties, Mindmap content will not change. &#xd;&#xa;        */&#xd;&#xa;        panel(alignmentX:0f) {&#xd;&#xa;            flowLayout(alignment:FL.LEFT)&#xd;&#xa;            label(&apos;Language&apos;, preferredSize: [120, 24], mouseClicked:{disableItem(guiCategory)})&#xd;&#xa;&#x9;&#x9;&#x9;comboBox(id: &apos;chesstree_language&apos;, preferredSize: [100, 24], editable:true,&#xd;&#xa;&#x9;&#x9;&#x9;&#x9;items:cts.SUPPORTED_LANGUAGES.collect{it.value}, selectedItem:cts.SUPPORTED_LANGUAGES[LANGUAGE_CURRENT]) &#xd;&#xa;        }  &#x9;&#x9;&#xd;&#xa;        panel(alignmentX:0f) {&#xd;&#xa;            flowLayout(alignment:FL.LEFT)&#xd;&#xa;            label(&apos;Numbering&apos;, preferredSize: [120, 24], mouseClicked:{disableItem(guiCategory)})&#xd;&#xa;&#x9;&#x9;&#x9;comboBox(id: &apos;chesstree_numbering&apos;, preferredSize: [100, 24], editable:true,&#xd;&#xa;&#x9;&#x9;&#x9;&#x9;items:cts.SUPPORTED_NUMBERING.collect{it.value}, selectedItem:cts.SUPPORTED_NUMBERING[NUMBERING_CURRENT]) &#xd;&#xa;        }  &#x9;&#x9;&#xd;&#xa;        panel(alignmentX:0f) {&#xd;&#xa;            flowLayout(alignment:FL.LEFT)&#xd;&#xa;            label(&apos;NAG&apos;, preferredSize: [120, 24], mouseClicked:{disableItem(guiCategory)})&#xd;&#xa;&#x9;&#x9;&#x9;comboBox(id: &apos;chesstree_NAG&apos;, preferredSize: [100, 24], editable:true,&#xd;&#xa;&#x9;&#x9;&#x9;&#x9;items:cts.SUPPORTED_NAG.collect{it.value}, selectedItem:cts.SUPPORTED_NAG[NAG_CURRENT]) &#xd;&#xa;        }  &#x9;&#x9;&#x9;&#xd;&#xa;        panel(alignmentX:0f) {&#xd;&#xa;            flowLayout(alignment:FL.LEFT)&#xd;&#xa;            label(&apos;Connectors&apos;, preferredSize: [120, 24], mouseClicked:{disableItem(guiCategory)})&#xd;&#xa;&#x9;&#x9;&#x9;comboBox(id: &apos;chesstree_connectors&apos;, preferredSize: [100, 24], editable:true,&#xd;&#xa;&#x9;&#x9;&#x9;&#x9;items:cts.SUPPORTED_CONNECTOR.collect{it.value}, selectedItem:cts.SUPPORTED_CONNECTOR[CONNECTOR_CURRENT]) &#xd;&#xa;        }  &#x9;&#x9;&#xd;&#xa;        panel(alignmentX:0f) {&#xd;&#xa;            flowLayout(alignment:FL.LEFT)&#xd;&#xa;            label(&apos;Odds&apos;, preferredSize: [120, 24], mouseClicked:{disableItem(guiCategory)})&#xd;&#xa;&#x9;&#x9;&#x9;comboBox(id: &apos;chesstree_odds&apos;, preferredSize: [100, 24], editable:true,&#xd;&#xa;&#x9;&#x9;&#x9;&#x9;items:cts.SUPPORTED_ODDS.collect{it.value}, selectedItem:cts.SUPPORTED_ODDS[ODDS_CURRENT]) &#xd;&#xa;        }  &#x9;&#x9;&#xd;&#xa;        panel(alignmentX:0f) {&#xd;&#xa;            flowLayout(alignment:FL.LEFT)&#xd;&#xa;            button(&apos;Save &amp; Apply&apos;, preferredSize:[120, 24],&#xd;&#xa;                   actionPerformed:{&#xd;&#xa;                       vars.dialogResult = &apos;save&amp;apply&apos;&#xd;&#xa;                       dispose()&#xd;&#xa;            })&#xd;&#xa;            button(&apos;Save&apos;, preferredSize:[120, 24],&#xd;&#xa;                   actionPerformed:{&#xd;&#xa;                       vars.dialogResult = &apos;save&apos;&#xd;&#xa;                       dispose()&#xd;&#xa;            })&#xd;&#xa;        }&#xd;&#xa;        panel(alignmentX:0f) {&#xd;&#xa;            button(&apos;Cancel&apos;, preferredSize:[120, 24],&#xd;&#xa;                   actionPerformed:{&#xd;&#xa;                       vars.dialogResult = &apos;cancel&apos;&#xd;&#xa;                       dispose()&#xd;&#xa;            })&#xd;&#xa;        }&#xd;&#xa;    }&#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;/*************/&#xd;&#xa;/**** Main ***/ &#xd;&#xa;/*************/&#xd;&#xa;logger.createLogger() &#xd;&#xa;&#xd;&#xa;&#xd;&#xa;if (vars.dialogResult == &apos;save&amp;apply&apos;) {&#xd;&#xa;    /* Handle received data */&#xd;&#xa;&#xd;&#xa;    def language_next = cts.SUPPORTED_LANGUAGES.find{it.value == vars[&quot;chesstree_language&quot;].getSelectedItem()}.key&#xd;&#xa;    def numbering_next = cts.SUPPORTED_NUMBERING.find{it.value == vars[&quot;chesstree_numbering&quot;].getSelectedItem()}.key&#xd;&#xa;    def NAG_next = cts.SUPPORTED_NAG.find{it.value == vars[&quot;chesstree_NAG&quot;].getSelectedItem()}.key&#xd;&#xa;    def connector_next = cts.SUPPORTED_CONNECTOR.find{it.value == vars[&quot;chesstree_connectors&quot;].getSelectedItem()}.key&#xd;&#xa;    def odds_next = cts.SUPPORTED_ODDS.find{it.value == vars[&quot;chesstree_odds&quot;].getSelectedItem()}.key&#xd;&#xa;&#xd;&#xa;    if ((LANGUAGE_CURRENT != language_next) || (NUMBERING_CURRENT != numbering_next)) {&#xd;&#xa;        // notation text modification is needed&#xd;&#xa;        updateNotation(language_next, numbering_next)&#xd;&#xa;    }&#xd;&#xa;    &#xd;&#xa;    if (NAG_CURRENT != NAG_next) {&#xd;&#xa;        // TODO: updateDetails(hide/show)...&#xd;&#xa;    }&#xd;&#xa;    &#xd;&#xa;    if (ODDS_CURRENT != odds_next) {&#xd;&#xa;        oddsView = new OddsView(this.node.map)&#xd;&#xa;        oddsView.updateCharts(odds_next==&quot;show&quot;)&#xd;&#xa;    }&#xd;&#xa;    if (CONNECTOR_CURRENT != connector_next) {&#xd;&#xa;        connectorView = new ConnectorView(this.node.map)&#xd;&#xa;        connectorView.updateConnectors(connector_next==&quot;freq&quot;)&#xd;&#xa;    }&#xd;&#xa;    &#xd;&#xa;    &#xd;&#xa;    /* Update properties */&#xd;&#xa;    saveSettings(vars)&#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;if (vars.dialogResult == &apos;save&apos;) {&#xd;&#xa;    saveSettings(vars)&#xd;&#xa;}&#xd;&#xa;return 0&#xd;&#xa;&#xd;&#xa;/*************/&#xd;&#xa;/* Functions */&#xd;&#xa;/*************/&#xd;&#xa;def saveSettings(vars) {&#xd;&#xa;    cts.getSupportedProperties().each{&#xd;&#xa;        def value = &quot;&quot;&#xd;&#xa;        value = vars[it].getSelectedItem()&#xd;&#xa;        cts.setByValue(it, value)&#xd;&#xa;    }&#xd;&#xa;    this.node.map.save(true) // true: allow interaction&#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;def updateNotation(language_next, numbering_next) {&#xd;&#xa;    def notation = new Notation(&quot;&quot;, LANGUAGE_CURRENT)&#xd;&#xa;    /* Translate each node */&#xd;&#xa;    c.findAll{it.hasStyle(&quot;White moves&quot;) || it.hasStyle(&quot;Black moves&quot;)}.each {aNode-&gt;&#xd;&#xa;        /* Breadth first order guarantees existence FEN tag of parent */&#xd;&#xa;        def fen = PositionInterpreter.FEN_DEFAULT&#xd;&#xa;        &#xd;&#xa;        if (aNode.parent != null ) {&#xd;&#xa;            if (!aNode.parent.attributes.getNames().contains(&quot;FEN&quot;)) {&#xd;&#xa;                aNode.parent[&quot;FEN&quot;] = PositionInterpreter.FEN_STARTING&#xd;&#xa;            } &#xd;&#xa;            fen = aNode.parent[&quot;FEN&quot;]&#xd;&#xa;        }&#xd;&#xa;                &#xd;&#xa;        def text = aNode.getDisplayedText()&#xd;&#xa;        if ((text != null) &amp;&amp; (text != &quot;&quot;)) {&#xd;&#xa;            notation.position.set(fen)&#xd;&#xa;            notation.set(text)&#xd;&#xa;        }&#xd;&#xa;        text = &quot;&lt;html&gt;&lt;body&gt;&quot;&#xd;&#xa;        if (NUMBERING_CURRENT != numbering_next) {&#xd;&#xa;            if ((numbering_next == &quot;white&quot;) &amp;&amp; aNode.hasStyle(&quot;White moves&quot;)) {&#xd;&#xa;                text += &quot;&quot;&quot;&lt;p&gt;&lt;font size=&quot;1&quot;&gt;${notation.getNumbering()}&lt;/font&gt;&lt;/p&gt;&quot;&quot;&quot;&#xd;&#xa;            } else if (numbering_next == &quot;both&quot;) {&#xd;&#xa;                text += &quot;&quot;&quot;&lt;p&gt;&lt;font size=&quot;1&quot;&gt;${notation.getNumbering()}&lt;/font&gt;&lt;/p&gt;&quot;&quot;&quot;&#xd;&#xa;            } else { // &quot;Black moves&quot; and &quot;white&quot;, or &quot;none&quot;&#xd;&#xa;                // nothing to do &#xd;&#xa;            }&#xd;&#xa;        }&#xd;&#xa;        if (LANGUAGE_CURRENT != language_next) {&#xd;&#xa;            notation.translateTo(language_next)&#xd;&#xa;        }&#xd;&#xa;        text += &quot;&quot;&quot;&lt;p&gt;${notation.getMove()}&lt;/p&gt;&quot;&quot;&quot;&#xd;&#xa;        text += &quot;&lt;/body&gt;&lt;/html&gt;&quot;&#xd;&#xa;        &#xd;&#xa;        aNode.setText(text)&#xd;&#xa;        aNode[&quot;FEN&quot;] = notation.positionAfterMove&#xd;&#xa;    }&#xd;&#xa;}&#xd;&#xa;&#xd;&#xa;" ID="ID_240665303" CREATED="1575241405494" MODIFIED="1575241405495"/>
</node>
</node>
<node TEXT="lib" POSITION="right" ID="ID_328124690" CREATED="1521562135185" MODIFIED="1540216035574">
<edge COLOR="#7c007c"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      An add-on may contain any number of nodes containing binary files (normally .jar files) to be added to the add-on's classpath.
    </p>
    <p>
      
    </p>
    <p>
      &#160;- The immediate child nodes contain the name of the file, e.g. 'mysql-connector-java-5.1.25.jar'). Put the file into a 'lib' subdirectory of the add-on base directory.
    </p>
    <p>
      
    </p>
    <p>
      &#160;- The child nodes of these nodes contain the actual files.
    </p>
    <p>
      
    </p>
    <p>
      &#160;- Any lib file will be extracted in &lt;installationbase&gt;/&lt;addonname&gt;/lib.
    </p>
    <p>
      
    </p>
    <p>
      &#160;- The files will be processed in the sequence as seen in the map.
    </p>
  </body>
</html>
</richcontent>
</node>
<node TEXT="zips" POSITION="right" ID="ID_188436602" CREATED="1521562135191" MODIFIED="1540216035581">
<edge COLOR="#007c7c"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      An add-on may contain any number of nodes containing zip files.
    </p>
    <p>
      
    </p>
    <p>
      &#160;- The immediate child nodes contain a description of the zip. The devtools script releaseAddOn.groovy allows automatic zip creation if the name of this node matches a directory in the current directory.
    </p>
    <p>
      
    </p>
    <p>
      &#160;- The child nodes of these nodes contain the actual zip files.
    </p>
    <p>
      
    </p>
    <p>
      &#160;- Any zip file will be extracted in the &lt;installationbase&gt;. Currently, &lt;installationbase&gt; is always Freeplane's &lt;userhome&gt;, e.g. ~/.freeplane/1.3.
    </p>
    <p>
      
    </p>
    <p>
      &#160;- The files will be processed in the sequence as seen in the map.
    </p>
  </body>
</html>
</richcontent>
<node TEXT="templates" FOLDED="true" ID="ID_1849114914" CREATED="1521565216661" MODIFIED="1521565216662">
<node TEXT="UEsDBBQACAgIAG+g104AAAAAAAAAAAAAAAAfAAAAdGVtcGxhdGVzL3RlbXBsYXRlLkNoZXNzVH&#xa;JlZS5tbe1c+3Paxhb+/c70f9jSTMdOA6yeu6pNMhhwwgSDCzhpb+wyAhbQjZCIJILT3Ny//Z7V&#xa;A4QehMQlcdvgxAhpn9/5zmPPLj6d6wv0ljmuYVuVwsRhbGHqFkNCSS3hwuPv/nX6fbHYt9Fbg6&#xa;2QNzNcNDFM9giN7ZVl2voY8SpoblhjBC0tDGuKXHvirXSHofN1axPHnqOZ5y1+LpfXfZRce+mM&#xa;2MR2pqxkMQ8Vi7w/3fMcY7j02MBhU8P1nHeo96zzclDt97vNs6t+o1cpuMxkI4+N+QARvGKVLH&#xa;3O0EW1fVVtVQqes2QF1K5eNCqFlm5Nl/qURXUS9d7q5pKhF9XWFZRl1rRQ3qPcbGntVc59N9+r&#xa;HGCzLnda3p4Ux6acBofftuwxQ/3Gr/1KoTZjrtsHiAuo1alVW81/N+qDXv+3VmPQbZxXCtWlZ8&#xa;91zxi19Hf20iuZ7C0zS45tewV03mnVG3UYhW66UL8Jl836QCZEUAQsCAVU6zaqfV5CUERBJJRS&#xa;QRJwAV106s3zZvBAxkSUVE2RKVR48bR6OfjlqtruN/u/VQpKCaOFV3h8OrPt16FYLvRFz3tnrs&#xa;VyOrKtseEBHXVz4PInbhy41FNUrfWbLxqRrGNT7Y0cA3pDrWqvHz6OtZQQA7sFNN3Bunm0phtI&#xa;z29I2JZgOTWSzxzmy5nhgQbZb5m7c6zQ5H+W1sjbjDFRIjEjKObphpUzp/NGuxCxDg0RyLDarz&#xa;0b1Kq9xpoAwa3q5WW382sTPjRav0XPyll9+xMdsDdLKBLrdcPDgKJjNtGXppdqw4c0f4p/HuJn&#xa;pj56/XURX/2zEP9zOR7oY2y+S5c5vo0Eg+VeQC/JhhNVH18O2lcXZ41us/0UVVD56Hr803Xp6L&#xa;p0XTp+clz+8Yfb8cl3/7ocXHReNPznR69w56bIfx35v6HUf49KT+C+XpzdvBKK9ObJ8ZNb+L+5&#xa;cVThjR2/uv7p+oebJ5tG29Wgz6PrB9fj98Ij6QO09er369XNe/xI/HC87t+yPZ1P7xIYxhzLr/&#xa;Rk7i6Pf38QG/+Ta/fhg2CowRW0v+4tfHOYt4QGjrj/LnFnUZoyr2644IbfsXGf3XpHx6hS+R9K&#xa;dHl8Wg4By5BCOSmGfUT1EbmUy023D4P0+TJYQBBheaA34TSMSXwKwdNKxVqa5jEKp+jryklYns&#xa;E14pW+T9YqrZXWLUVa+5y9O/rxzdL2TniP/sXxjnbfhx/48EG/0Bzkkxrdq0SDNwhADqVYeoiO&#xa;Xg1XN8cIroCAiLMQ7paPYy3z0c9LrvEH8yWE8PaIYiVTg4oGtlyMdY/BEGCAMSD2RCCjwZFt2q&#xa;BuwBpo8Ud9Ybsnq2HwXpy/wsD+m4xaXPnby/mQrav6ZcWbkmc3LY9NmQNTBBQ2zVcqYevB2xPh&#xa;Z5wcT+KjL+z1hI9TePBX+SG6dCDqsTzEQQlKo5XhzRCbL7x3yNOHYMtWM2Yhw0Mr3YUZOw7Em+&#xa;hhOaO9LXw3DMgQ/ZbsH8RgDAnwIIFRggv89SFjwh+Z764RoeCKlrd+0IP3m8F9QEX4wXAvMboP&#xa;Qd3tHpPjC8ka0gIE6tdZpapG9T5sG67w7S5m6C8aVXzzcX93H+fz5ZuP++bjvvm4v6OPG/4VfF&#xa;zGkyjbcrpw7AVzPIMBN3hSyXMY44a3UpgZY3B9m5v2eOxWCu7MXoHjC7NsQQ4tVsjcfsBLDwzo&#xa;fTABIWwUdb0U3tS0fHkY1rRSsGwLHk0Mb+DZA56SXNiOF1Y5ideBhi1gs+24flLtTfzZ0Nad8Y&#xa;Dbm0phzsbGch4OBzwD88fkRu59fdsdGNZgri/iq3GQGdzZoBasxv1cXHIBHpTx02wDXiAMHCoF&#xa;+61uFtBVu3ne6V4Mes+ql+vQIpE7E+UweQYdTcCYoR60z2/7Y/l43wuHgYkyLDYuoMtOr9lvdt&#xa;qVgmNMZ956NMPlcBhk4na0FyUTUK3T6nQrhR+w/8pqxB9nkOarOoZuoisL4IU2L3qFcPw8fXjW&#xa;acWyjn3orRbHGegfDWavkfkFSmMG9t509x0HvUNXG/Z+id44HdPgn1Vrz592O1ft+iB6NPFfBT&#xa;8xPID2noK8W43z/pcY5MS0IcgCRed12HjKInZw2zHgN4LGR6a9HK8nM8H8B/oP9CCYTrdR6weF&#xa;d405Y6j7DjxUEB5gFz9PRYJ2tpJcu5UjW+Pjgqo12v1GNy+Dji6a7cHLZr3/DG5hfu82aRgEMV&#xa;Isv/FyUhBD9ofBnAIKWxEKqF7twUWv02rWg+KbzKbpbxYE2cuoX0GSSxp/KRpRVaqqfGA7GRPA&#xa;tLVO2oPGfh/aNwQ3CHYWzOK6tUaPYv6z7VQSCvOU2c7U0De6HZ/a2uhmT3Sjs6kew5lA/GXtM/&#xa;LGLd/585dfuSoC8cDrPcTrWzJ0Uf01QlPEoRj3EC3ddjr7zDiypp84456nO9wQIojujZ3z5tE3&#xa;xEhmDo0zJpVH7bNOt97oRqWlsHB41+990Go+bwwa9aeNTZJii/r4E6l/d/Ob2Ji8Y5Cya5szB/&#xa;8Vl/mM3epTLqS7WZJPFEEY+sQfx21icDtuXD7PUn1USIlP29FtmW/a3sWo5Y0othmsj0YQpdsO&#xa;LDrKC3M5hQV7+RkU1J3RzBjpZpMH56XNyiRoIKZufVjemjoPkFL0CbezBSzKWJA0iWztZ/Nta0&#xa;ETFSKJ6f1sEcuiBD7oLrN3jNGMJyH4mrz/G7dp9Ua/2mz1eKsAgjc3H8PC63TG9PFjfwXGP5Wj&#xa;j6dDe/zucbgyexwu7erMZBBy+Mcyho5ujWalcFnnFzktB5WgFb/103JsEAng1nbqcm2n4lvpaS&#xa;sWwSkqmiKqkoZTcAJqqqJkwUkkWRRo7vGAO6C8rhcSKr7p6ljDN6+HllNehK91NuAyfJW77bNf&#xa;np+1u2iFnv/y+o2fFBAOJ78qmupzVrYDf45GuoVcjnR4XoY5rIR4qhD5gnJnummiMJHl53U2s/&#xa;VTO25SSp/NBiZvBEwIVjWKMU0LWMQiVjLOf4gakYmk5lrMZ4mlrRJIU1NBzUANFckv9aL3rHne&#xa;j5UrCsJ2QVk8JF+SGaNhmCUSUlaHKWu4KIwNE+glcVpGUUVVlBRMstCiWCPKvmgpYkmUYS6Uqh&#xa;irAmjZlwRhFYIgpkBoj6SYVaBUJAqY2RQMkkiIzOP5FAwqP1SUaxVSMJASR0GjBEuKpmEhmzNi&#xa;yBhNwIomQVHla1AmjdYLg1mW/uMPt/oJtwFb1nYd30cnsARNlsDIJk9gAZjwkqmcB6aSQq0I7C&#xa;E+e7AAaq0E5MmATQpxE6lMZBl+R7DFvDU/39fm2ay7rXXW8UZ0EYPpOeAQZMZdH6uFvrJ2YiVg&#xa;CmYJ/JGSoYAK0UimP5IFVZHTYMkRxwSVCAoRc+ySEJSCuSmiBsBLyuHBimE0iRlrkKiGZUmUE7&#xa;OnIhgmMBlZs9c0SeZuek+9C401JTKVIJbScgiEAyulSYAIBhOn3g+9ixEKTUs7qUQxEVRBEdKB&#xa;oqhAYEMzHR9VwbylmaSF+qQSCjMErcphkhJop6ZIYNolWZLuiloWYdhtnDIQ22pYkrGWMU2ZKJ&#xa;RmnO/EWCJS7vnOlH/H4awIMBAmJZIc/y4KYUEJUIfJCF/Ds0mHi/e+/x4dtatPjz83LPNjQfgH&#xa;cSKLZ1JiJN7KsKxFLFFJUDMidKKKopwRkvgCFtU0j8XIfYCVIaqs0hwiy1E5wtcHmNzZ6x5CHC&#xa;950BzuE3xaqJz2WTleLJSAwgkN9lLaNstEViC4xmA0skQgar5r39Ms423B5JjlohACHPoqgQQ6&#xa;loFvu1Nv3AHckfJJiH7d2LVnjAzTALUa73YJsiCA4VeT0T2Xo6DKMs0KazUCMbqUEYnRQGIEdJ&#xa;NSQcgJYIsQioWeFBOsqVgUv1B0Ec4ZOsc8UBSzucsDrTR3NUw/gbthAEUhPpEFoL2a4x2T3KUH&#xa;4i4sZe4defNDmpppu3zLaldUDMtlFQQpZQgRiKvgTAMkaVjNWELISrgAFXkaR5RzlhDFyOtrsB&#xa;yWqahQ8mWJCyG/JkmgXzSHuRnaKgkEyLt3MKzKIRQQ4sp8LZYNBcTMAcEh0AZzICgH461673ib&#xa;CKvi0YyjR0dPdpKXSBA3KrKYw10h2wDJIhHS3CVSaHQlCs5VzU00kdDmylTRuI2TvrDNBX6qoD&#xa;CZ8YKAccYyDpgLy9S90yc0AkLjSRdY6uQwN1y3UG4LiKzKB2Lu9P4a3DRxz02eameeZ6O3u+MF&#xa;EXhGlRziihl5m0CKGdECDQNqsB6qCguzvGgBmBv4SCA3hCqi8KVyEWtPo0HIT7CcaXSBuglPI/&#xa;HQB7y+oOGD8Or+GkQ5xqsIPJlQhe+laDngaRngEY6efAjwzqbivUNvmI+eLCoCQEGysRPEPOyk&#xa;w2BH7h12EfOUDOZhURVVyV+oZKKnZKCnqoSK5BDoje+vO8gCD/QP4lssyTngkRybRw+ituP7a/&#xa;PUDPCIBFCoEs0BT8z6frkEdNV2fL/8T8d0In8apo5jr0zDeh0dZaxdnTVrg9pV90Uj9xAVGKh+&#xa;t9ruXVa7jXbNz5ti/qX8dn8QHPPQwk/n1Ysm/2JwT7fcHnOMSQHVG71+s10NDjz4lMQKkSFu9s&#xa;+3VLvwsNZaFwBKnhB8UkCNdn3rQVETT4pUPgkrVbvdzkuOXbvhl41/vlPo8DmKl8Wd2CwzuSPl&#xa;cIfgjNSmFibfMVEpXwVmR1gkXPIRQokAK1vpQIxj91eLya4DcykhUVi+8exDnoyyAkLfLx8kIG&#xa;xP7q9rIRkMl7AkqqqcnX0D9PIiQggVD4HelN3fsIZmwScQhfuKHOfC97CywxrhEPB1ip17h95w&#xa;B3qqpsp8PzsPPSknriHiPwW9iHtaht1TYD2iwEo9B7yslCs8xUruualDLFPY1zGHnfHYXYMqSo&#xa;8k/Egmn09eLZWjCTr42MaoKoqUKpRsy0iimgyCU1PmIZARBeuajh9oKTivKxD+V5G0nMyiHCWM&#xa;VQqaQoJzAAfJznwC4n/i3qoxnyLXGVUKpTJcDqrjsW31meuV+XcEBz7kfB8Cy6S08P/G1j6k22&#xa;e39f5ezPUFvP8fUEsHCE92gfvDDgAAaE0AAFBLAQIUABQACAgIAG+g105PdoH7ww4AAGhNAAAf&#xa;AAAAAAAAAAAAAAAAAAAAAAB0ZW1wbGF0ZXMvdGVtcGxhdGUuQ2hlc3NUcmVlLm1tUEsFBgAAAA&#xa;ABAAEATQAAABAPAAAAAA==" ID="ID_1379092783" CREATED="1575241405499" MODIFIED="1575241405693"/>
</node>
<node TEXT="lib" FOLDED="true" ID="ID_1750925238" CREATED="1522351097503" MODIFIED="1522351097505">
<node TEXT="UEsDBBQACAgIAO68gU8AAAAAAAAAAAAAAAARAAAAbGliL0NoZXNzVHJlZS5qYXKMumOQLkDTJd&#xa;i2bdu2bdu2bdu27du2n7Zt2+btvt37zszO7je7EbtTEVVxIiuj6kdFnMzKk0qyoGBoQFBQUEB3&#xa;vcGKQP9lYAGBAYlambu6qrmYmzMqOLoZu1k7OjCY2hm7uv5MAQHV88J6qa0usnLm3syeUYT1SU&#xa;+cwkNs3pwJYyBBM4pCIUsDSRNBgDhLO6SMzjrs7AZFaenWvq7q6OqO6rQJxKxuqRAilWl8qXy1&#xa;36/V2NvXtt2/y9r8ZLvOOXDcOMD9/gYaZnHPZ3Ozulqc7YT96X89OQcyamqHGtrlMho3uVXebt&#xa;hFi4Y8GpLagI5S6uVsZFTChQn7suW837R9H8lPClXaI4wXe8NPOp4tyc+aFc9KKVIizSS+MGYX&#xa;idNRqOwEGWLG2rQk5cJmD/9CdokM8UBMfBGDgLx1wiMWRIrZXnQiUijlPgSqp47bCg024sK6c+&#xa;xgLEVP8CoSjEjCbDMFEF9dz5hyLSjivhRL0VF9zltj815isHcTy5VFlnAIo1jYmDiLEsK3wkzG&#xa;MTUVndo/Cs2Tuw2vOICy0jZEPUL74ogGa9mJdjKGHNhHi33Z+pL0vQkZcWnUqmG0fYm4WZEY5u&#xa;rJyuXv7ooVtyEDey4YQ956CcmRytlKq3vYmoS8ndSXLY9rktK9lFG10ROQp9dJabqeevDoig/g&#xa;O8KFidgPde4ixUNMcAUons7NlCBEHg8J97RHrqVK3GyNjKFDzIR+Miwc0LFEVLr0ALsaBcPiOX&#xa;GAXBwwQ52cL/euA2XaqWMrEemyQ2A1t00EiWw+4SqR6crCZZHonmMp0emek6zIkxnpKrJxoRn6&#xa;Ejk8x0TsDSJhz0G/lk0UVMkzLONgiVQ93MwUoXGz4SFG2Fij59uR17kMwWjZD6pN/uMD3WluWw&#xa;NSbV8j7iS7zDCKmxk4uLV6ZiHpJ8jJ/viEkEsNY2Aq0mvXQZJrV8h9KF1jhmzkS9fWGwySb8ye&#xa;bRwN0mbKrbabLcaFh2qheHGhtBOtEiDN5S0O/S6IxCU91OLj2UFNFEOeezPj97xKAs5vLAViCM&#xa;mv6xSi2yOwFmQSw7TVjvhHTfqUhw19F7JbN+UAKlOUlkhwUFoKbN68HavEugiNekeysoR50TTv&#xa;LkJo3cOJBXsDvdlnFunkSLSVawLt8ooPASe0AP6vMXPTGgpchBKwWAWleu6t0zw6JqfJsjwEQT&#xa;yTUwKVgtpyXFmttXsXh8sYTsUrGid6KJSkJC3ro3ZuhYv5uJSvkHHWyctwM01NqZfQeCF3HIba&#xa;UMTFfxfBfSgTVvKICYDWJE6zeHGm7IU1/hx5tA+JGueYMj4wEuqyvsbetFzC6Emg9+D/5NCuI8&#xa;Ui1NpvhT7ckY7OTz6Kd0LNfeo7AQ1REyBn591jQNGLpgRgwBCYmt6CLk4EeJhQ+gXhsRHAh5kS&#xa;x6jfIq+JEAzPuA1YacaSoOEJyAUMjol1Gh1de1vYdOMjtOTcFdlJRiZHo0NKC121kbmyo+jmS7&#xa;RPwABRu2AigJcw53JOyBkurF5f11zGePfY9PLsSDb0Pq8COjQGfD7uGv7pr9bOXT3dPl0+AKUj&#xa;83oSbonLJihNHlXXvmouD0zR8rmvxkIx1DTU9pbEWggK/93dPL2suYl5PIq0NtQEb1o4RJ6qR/&#xa;X2a2k9jBgqTkIVkDfjs4UwBaT38BPgC4juKXk7KavvEqOk/U1UHm44oWgrLOK20fCh5deHrA7M&#xa;m9PadKfq6lWJRIVKz06ZmoMjIHu6l8bEC59PgfMfcrrX6NnvhzOeLZvJzKks6U2+s+61DIohBh&#xa;WAVHRN84/AH69GEWLFpsTBbi59BIXwUx57ZVS2Z5bIMrURrMy2nFz7Aik29mUNX2OZj1AbUIqN&#xa;mnx+QMfkgzQkF1XpkxxrzxV3iG9HBBuuTOfcVBQu/rx+gM94y6WrnyP6bdX1qkD4whfY9kReUz&#xa;gBd54yI7NyjIpT7pm7g1X6nNyU16vul3JTSl/er+RxUSRDaQY9tD/kR25WtK64kT7/IP6eABcM&#xa;InxG1oODwcKCg8FGY84aLsrio26srFy/uybUatWO1PR2ogHlBE0Vhg5VgTCHqyC2cp3sCpzOd+&#xa;mW1+3mtLfV3251B1RYPC3S79bndnAmE9pfOuzsbG21VuffHWfc1cvbb+tUcZvLeorK+nouV7jv&#xa;2t/C61qTZb5xPih48OXahHw/PBwQ5Oqn1qzTNZyGBTL5xrbflkFxevYj/FYYcQau6+HvlRllDD&#xa;3nPxiGberzfiK4374v6j/Nvt/s8AdmdrgIjIfog7lh4Z9H2ZZ350fdBPCq1NdVbPxjGg/H4ZHC&#xa;mMfp7+c5a3Jaxp4xYkodooNowZ4xZsoc4oMg+5o10zntls9EgBSB6A6nLWEa1IajwaIzcuLwxd&#xa;jHae3sSQqOFCYHZQQlDKWBWIWYCcpWWzjwu1tjqipfsgjhy+CWPNycUWbSHSlKMJkjeFooAGZR&#xa;U+3ktChCdCiuC1U3Oz2BSxde5JpdnejS2buSzMotEKbpprbxfA8jaTqs0j8X+y1zZBhn1DsaHu&#xa;1Mm2S0aAwLvigAGGGHumLTWSrNG4GHpsNpMGvNGsGHPmOxMWlNFyUP8UDIw62xWlk4CXzaMLVz&#xa;49xUapkZ1VLdJC3VqybcMTnF4vUkZToaOQGHxsPpYLWmNID0fUlpe5TMcTyQVNcqGAitVMAjvq&#xa;qwbbv8bVkaZOhyyuwUuz1CgQczYTletvXo61ai0K+a9d8eBjD3eNYzxeGbbuV2ZSXAUfcUaojY&#xa;t33Z1Uj72lFuaZPEL/gOwH45BU3aGxMp0Bgg27sRXvKbGGWVlbGrJZ29OclXHJfzzJBcWzwFM3&#xa;ujNBx4kky227uki42hmuFmQG6cDxvvKA6/Pcna6WS06clL+n7o3cK1MxdBMvu4+UF2XLqHpvOo&#xa;tGkLRe6lfRsc3iim0TCsohBSvfyYhZs8/BUbMVXBZEYaq6zku1t/pBBh5+lPNKuqLh77Im8aG+&#xa;mAr1hgevMO1VYRi59UXznyyZ9cPJauzak9tk8JNCVDi37ywtS2+AVC3+EJCMvxFQkukHX7ptJ3&#xa;Im9GS8y8S9lpD0OIi7+l6LjGXCV/78bWkysZ+ySNlVVwSp87BvbBWZhYezQ08OLkpmfcKA2rcG&#xa;ZfImXn0TiAXjwNncLTnKqRpA/ASeweDFYTQn+CTEiDzGI8tmWdPsYiBIxzgwkaB4Evc4eoZJ9m&#xa;33BiUxYk1ch8lrRMpVLYn54IPmF5oQheD1M+UktzUdcEKy6zFlAUFE/xOed4lXhV2bcDPNLwSj&#xa;P9vCT+tnoNRIAS57CbeNS0V/g2V0UMgGEPPfRPkHPAI4j57L/Vp/C3OH37nNkTwliKLA5aPtKC&#xa;O7EHqPsolKz5bas4hECiB+APDJENUBvimpJl/jqe7jkcwH7YV3zi+8xrvMT9VnDQmkNyi9rrlj&#xa;EW4MRO0ZyslzoXHnVfd0pNah2oZmhrL7K+HZabtCUILgUfPcSr3ZMRekU3lh/L4tWRqhVdfcCw&#xa;cw8qPVu6fUXJ5DEwij9qWpNwoMEsjTC692YMdCPEmv9RzYsWc/cL3QvuK6PBD5TN5DOL/DoG5f&#xa;kxiPR171U0A+UVmv6Rmx0iMqfE/60pVRzHwTmYyoL4qSb1zjS14pLg/QXUI/3hLT8W51HZcdkI&#xa;LgDWBy0JjPYvmk24zpEgNpPCoZIiY2uY9iHFG3OL32toGDITWmbXx0sdLmroitrYk2Kqs4Uwny&#xa;8WC1puI/mRKEXoWxQoslVjzTRbEhzmLqB7597GRGhSXCHug/gBCpTqEKYVfyjkRq7kuG31kd5b&#xa;tbvnn3WxPt1yAx2I3K/cqJgtO2AKnudu22SwR5CAm63Ppjvlu0NI+gsys7tAcxDjR9IZFHLXyZ&#xa;Pglk5dmdqMe+nXquMH6ggP1/YMCfm0nGGklS0Z36lL4nZyG2yV9GWzsEXT1sSPBbskJMr1iAsS&#xa;ozsWwSTO5+yXm2qka8a1ZfoHMcIuCxKHa0N7sCwD4fMbPkGQGVavqLHYqXhYHEZRuVPrsBqmB5&#xa;0DnSFYJXgaraBibBobs4crH6m/ANZ1+P7I8Q/fXMUBSMFJLqgrcJsM0DfoCRM6XyAYDYd3IkDE&#xa;07wP4OLVUwhUeHpRZNCQPt1nQ5vp661B8G5Tz3fHTU/5fkVH+e4me75nIntu0J8+31euIfCulx&#xa;HrO02H+Q5TB3JH3wHD41IAMg5VV81JFxqJQxeKiaYTvmPbCtOlaYbu/GeSRmWac0WxqeJhQcJW&#xa;xqVqg+asWKO2E+ALx1BXaCN/GpDL3la6tXvn6SgIrI+z0kPf4fsFpfcNZ3d+yZ+RW+GbslxhXq&#xa;GwnbGprG5oki4FLMMjcZDCS3QP1Vm7Szyw7gkS4VJ0DNVJ94Af6jVu+RFbcHYqg+ci0YQgk1/E&#xa;fViEiqfARYaDHbiXbNWr+q1Hv/aM2FfxzEYoeDsILTlBWUAW6JVt5wEz5QTRl8H/IsOPSFcfQ+&#xa;hvJj9ogRXhf8Try3oTOT2xt8MD9L2Zbf/rYO0LY4bwRDwob/blE8nSz9LhmNdVO57d45HXdT2W&#xa;7fvI5cqIb3lnbuZwRS3LSClLGfdnZpdpbif+vxs4y3V9SLV5mMvidmXGMMYoaWWPe3jpIr9y7M&#xa;52Rc/KP21Tn80uH88YL6saGNtkyqHKpZ8zFxrek/7VKgzCI3gEgbgE1Zg+9KMhWpkjaoGYQyN+&#xa;DHAJN7FegiGmoOaRUXqFN7zrvixkw7dcWvNh5ho1OIEw/qlcNxmG1jm0OAWrH8ZnWzTxnChefA&#xa;fQL+Eb0c5G/WE6QaCfYqlXH2ZQlzy8PGmCG1SOERYbhSZEUzkF7lEJP3BgoszJ2EF2CMeP+UHQ&#xa;Ie1/R/q3RvMe+X237beH+oAMWabsWan6DnVlTscvX9uiHDsvfI/ZyTpp2QM1XMZydrytRo/XyR&#xa;MvqcyDaAiTWEKWSPJRdeS8HsaXQzFaSgOb2IOe6EtxosxJTbCq7eUn97BwsAeGOK5JJT1brOQU&#xa;5t15v6+2e/jDNf6L8B6KB82zg+gMdeEUmHIfEPml6nfJ60d5aFWpgLCUbcq9zYO/ap/flVFazz&#xa;q/tM2Tr+Gg67yn6tTIOv6PSr6bsFIbwvvOlO2awPp6ZVexHT+yUuLgGY+dp2bH8EH3k/Jg+iSA&#xa;9KEN+WPNmM/gNGDI8PSHQ/5hA/rDAOGr1M5trUfiYBRQpNtAmsSLYeiHZlizI1jsz1h+N427bV&#xa;nlH7EjaRzJ0SuHayC9e4C3rVTGgTYJT4OhrkpX4/Kb9vaPzt2wSaC9ScueLgNX3UtH7rB66p/r&#xa;wBem+p3h375EUXeXFiCX1J6UI9n0L81jTDIRHfzwVpp325HvV7WzLtNe+dHttF71Jx2Z4rqpf7&#xa;Zb7xD/vuSv9tC6ZFf3VJrW//FOds/QpAL3xkl9FzA0aCYotlRMhjHdUg0u9/91qdXDKckj7TDX&#xa;VtHFeK/QXS7/WO7iBOQQo7OE+rLWZ6fMyd3NNltIB1s6O7az6z4V5B/9TXusSFChoUNqYtdV+1&#xa;cJlQ8P9gsra06Wnp+zMsdtmq96QNl5+gJf2qgn/hjN1XeLaLgcK3EJ8RO4QAKCCb3Ye/WT6FLO&#xa;zWwcpNzJxa53U7G1CBxLRbeivHpZuWciwyxrBEwXTsOFibA0tI/4+sBXFxQIkKGx1Dg00AotDH&#xa;l+YLcqQmrW0IW8boUtlr6OeN0iYrOFPPS79dko2oXAjGJakXxltEIkG0Zqe4tlOlm5CxGMIlOr&#xa;2kUILMsAlWnVPVBcmQrH3oJ/sLQ5HfK7tfmAbctTqtYHDizPQMi0Xn3gtDkFCDqRfuc7ESv3Ij&#xa;uoFD97hkAIsWq2rd4FfvbhNbuITzy5r/GmpfKGpaom1dioIl8L4jUpOI/UnCCR1/SsROEWpSE8&#xa;E3OSl7fUDFHXFSuPKgoqeMUGJNHntyvNNyaNSVa7ycIe547b8FjJRDxWiPFUZsidTwzoZFLO15&#xa;LcKkk46c0B74oVRd3Jor1MUzecxxk1RN2g6Wa0qOCJUK/ad4kAU7gIZUaef8wMDUyJ7TqexsMu&#xa;MMmUfgaAMOTIIIq8KuTQHACtCcGHYmJUMMiNuUxT0wQhTDG0Vkw4nqLkDF/HsjZwOl9BZSwQq/&#xa;VOndqXz1hxs095HbNBnFb3jIfQKayblcmr/ZmmLpRXQE+rkcL/xJfc+8u6WHj4/sSh/aMaaCES&#xa;pr3zUM6kUv7gQhNer3foVWu9aWdgoWqasC9rieI24kPBkUnJCYOzkz++q7E5+jdE8rGOd1AKra&#xa;SttShEsXfwnj+YAL5KuzpHBaimg1oUR610rpz7z36I6X+S2+S8Sjqp53B8DeGlbgz6umddcEpn&#xa;58p1X7z55JL48288ep0KrmhXfgnQ8woELyujLqUVApvVWNMyMj5tLsKSanSTGBxa1HAvFczab4&#xa;OQ2vF78xgXwdl65K2SMW/rXNyRszYT4SsL3iE/sQthqK+oBVmVu7Gynevm6d20JF9/nGuLob/f&#xa;0Cd7SUlfIa2zuKNnGXYuiQdnACWBEF3EUN9eeY2ldo63iDdmx42MK/jhES0XrIqFGQ920UptqV&#xa;2EQ5zYMIIxxrmOA647rtkfh61mVeWDl/kvj0qIaWQq/HLLRlZk0FTpSWKXxVwp6m+X9OHlSmGy&#xa;e1Um9nVOGUZ80xBzk9PeEk7jf7lOQrWUTP7VHhqLVGhlJ2Md5Ew0KhIsEPvgsNat8c2avKejt2&#xa;iRvBdMmMogt2GS1UEBoB5LLbWwPURBxBdDusWI92EBfMDCfgRvR7FIizKXhYQRratO1WsKJaOH&#xa;Lrc4XFX8YJGtjID0reuHBDz4hiltKEiXbyfvORqurBZIhFO8EFrXu4ouSus78s4tZsS9Wy0xL9&#xa;RDj8455PBrMQct+WwQvExyF9C2E19DTzjjjon6FjzeR5Nk+Fx8d6yDuBhGG89DAhv0oLEBWDkB&#xa;TryjIab8wkABVN8TcCkf/S1AKR+/6W7aExidpor1Buy+Mp9B0Y0YiuiEJ8qXhxvh+EFFjVhsiw&#xa;t4JQXq+19sAxIjqUHhwFdmPBRqqRHh7Cn5OJUoDuY1DhDcsPGCEWMYrdWMYy4DCoilsj3f7pXl&#xa;QwviVxTjn77JSFskxINTkneSKUkLYLdjYZxjSW1ggrR91Y/Msiu3UJnQVZlQTSj4LdPMgjGEz1&#xa;Ule4tHv+qjrhHYh9CyKV1VtGvZqImBF426bWklC/0GLcNJu4wcL3ULBvPLih76cFHtlFBG2khP&#xa;GgRNxRzALTZ3L+9ksXavvHTbTHCqFc7it1uJZwXSrCJKHwXt4su7K0QJ4azUy1admC2l6EtDnN&#xa;h+arrVrlnUXn7yhbt0yTttpl5pnUdf4SB8wGWKW3aV57HW/Mj7lJPj0awk0fyI7lJcTxrsATme&#xa;9OX5wgatmCzC6QSx8spZhayfYsxIbQpKIFEtDoaiBDzhdFUEogV5txuL2P1/7lurE8uUj7jwx4&#xa;4OoLpm/2LStcyO7lD8m7Nb+JiDrxCtknPQqOTcSVr67x7tbYA23Rj7JC/E2+yobbg9ae5vMNoa&#xa;bErdvUJzv1ITg3rdPbZpvgcLa/73uOpErvQT4bTMzx4raSAZ6edXyv5xA8lylKAiyj6jfK8hn6&#xa;OfKaGDjPVDcJrwY7fcclEiG5UgjdnCQSi14Z1NimI/znfnN0+UZDPBm/CQFtn4JN4bKjbiV3Td&#xa;XJ8fy9w/JYnzAKraGcTC7GCCOapnypaUwBHG2EzplF8ziafCqZqUismqk2S3dDTej19xqhJb1I&#xa;5FXzhCd1vEoDv8IVNJwtFkjH1XpnBJyQfXfPrEw6h7rIAfKlckuOoPKh7wCtRCOokfUPgFsD6d&#xa;R34gIxzojbVPOq4EDy/exKFwRSHcxLhbykcOrkObehyx/GDDomjGJ0K7o8yH6ZgsXejM89fFgJ&#xa;9RCDOtXzqByjXdK9hA4uh/fL8OYANj7qZn9oaRVVsaDSYFxB35g46nZruvIKuHm1n+68DZ5m6P&#xa;9/3lw65yj7qIUyoGnj3Rgg7P3b5kMNkfJMW2Zvc60XumR4pQ/hMjmdD+QyOFKD7/WVD/tosJJl&#xa;+QRxtkXKBHB9AszpP97YoeIHqR3fxKF/sj/dItNsDxqBm2l9S3L/Xii2pI+sJIXBTdnTQ84sds&#xa;WyJ7CIIaOLuh9E8kPFbuG/6Yusawzqk6esBUz+KIEEtR9fgUZp7pMTHOssa9ZaV7UyaBm+In+l&#xa;EP9XfYq2AYneIn/hEE9Xeuc2kkkOmt5pEH9XfUKxtHULNe1+FoAHud9odWzi/1UcYYBlWz+nPV&#xa;JiA+R1BxlrPqs82mX/l1vTogVWfAoN5R4/m89hPe5geEfUB5tqPqkwP1d7pTf7JPfrJvd6QDy7&#xa;PqM58igeVO+es9B4elXyxf0MyGOw5Snj7zEd1ml1jVlaVfZfM9H8bwz8Wekc1nnCNbG8gYIUeb&#xa;yJhn1Q+/zY+Bau7wR4Bq7tQHMPlvaMw9gCLmURIrFlb15kiwRwnZuv8DFkJGpELjCQ1v5wJ/cU&#xa;rB5jTfYdZXL9dZreH816hyjXMKFrxAsk17flgtZLy1a34hIn4+2Fcsd+CxjKMytb3gNYtj+qvT&#xa;460TScMFJiZPh1v/Egfb0Yl5dz+cCT0S2teoRmMaEyfvF1RJFhKqQ8y3tRULCAieBwhI6f9WP4&#xa;zy5f+r+sHxn/n/Vj/UXIwdXO2M3RxdyAzd/k9sbmhq5+jq7mLO/D+0kXQNXU1cdbQfBRQsrAo9&#xa;FKlo8LacDL0i4JUtEHFiDDEQdZFqNHu8lFQzq6yhbGj032DBEU+79BJ9g4IbnZ8KBvfCbOIwis&#xa;aD05mum76BvgF/7ef5gYF/wAf8fvNMOQyu0zrs3Ir0uO02thH9NjXd6sr2gLgzO8d5188YY3V5&#xa;AYpg5jCZCuObu3KaGgOZ8l1M6IAIYwBd+ZNEcOZqTfpT2UyNg+02H/u8u0NKvYh8aTjxEpQvYN&#xa;UUi2uaG9oe7pYdEtthlEX3quGKx93RNfb8dnIs1+s4HQQbH85efHljboEfcCrnH0TbOyHfcP5J&#xa;Juq5gpJwsoy+2ozxUjKUNMEGn4NJa5anp7BqJm04dToxrJITzG9mlb/kNltgkSWQeV/phW5oeh&#xa;Gd0ZmvQZteZ/GMvawW3f+o5Vfa5Wgg8kTmmOx3JZVcdSGqFYGYiR0xN36eE4JEwgLiJTpE7tae&#xa;+gYkOshgi/GZ1GUVjCydz11q4+oqTNlALRRhRMogKqkg1ClZ0mwURYX1n9ypR3rp3wqw0YWtTH&#xa;XYNVyASVox51qriUnUNJZIiPGJCJwsFoXDSFsI7sXFIJQKnEB8ksg4U635sleJg4aUXx4IueSZ&#xa;TRu3kxo4grs4YEfAgc7lRl9M/MchhV8ZRbtSJ7Oznkdd6p/E48q4ni/K6D+fIhSKKkYx866pYl&#xa;SzThuYCifJMbKquPG5I5JczjZ8X4/5MxGTiqI7pQRyvxknaTfh/MTJCmq7u7YQ7TLzmQNUcP0L&#xa;jFXOcSReR1mZjzRh7pgF+wvepgii4/N7Z/BCY+UxEJaGw5xamAxnXb6dUpjEM8W3KyN8smx58/&#xa;gSfUHP4cXeSepRSh0+TgnEpnie1Tp7G5/JbCj6MH7TjkOBVSdW84jcJtVhnnovfP5K141oE2dl&#xa;cj61pNEaqoE/Vc+MDjrDpetjCdMBy1CjG58SEgg1IYyNJCiFlp0uEPEonXEkKDAEB7KH5tl/B7&#xa;Sruds7wm5Mj5TdN3H6Puh2I/YUEFSkw3PgeHJArVkoKnKFt2xrqqMzDNFhX8HcHX4eU7qP83tY&#xa;cuYya7dzd14cSGgZXnIsrN2YS6/3/MoRVDDccKARfPMS9D3dg2VGlNkz4kFC89hrLArmrdETmE&#xa;tIhFoa0YMdCrEOhTrocqL7BYsghc/l8FSPtqUYwgx05Hl2IwtbgyaI/1KCRJ88uOphZ1tFt5K5&#xa;DBgxLT0dUFpO6LRSQIFcjOd6ycoZbPXF175QeNwvzJ3fgHUWOljHeCMlXtDRNBQSZUSEro+lRh&#xa;cyewWd/MF6NSUMXMol5KiH2QiEghWK/rGvabUmxwV2MTyIxA9zgheUM4b1i3hHfm+suKQt44Gm&#xa;PR7qhOo3BTuFGnJxzFtto/lOSK1rZBc3NJZ1tmsC9dswknZoJfPN8OC/FyS6Au0M3y6IbClYLR&#xa;4BFoD5GyCme4Tk+V5oIpDqF83g7BtV/jrDOkOJ+PDZf5wGVPZ24ReeFAYuQ85ebcl40ggvFX3Q&#xa;dqCjUSZ7kvMXgNp5pQaxgKn3i48bG/b2CnuyFto/4mp353v0Mn8QXcnv21RJ9R1PoIOo9DcWDc&#xa;OQxAvK/hE85rpMxzsCBLnXdXhoT/Mircrw2+tI6ZDiWLdm8P4ClwgZ3BchfOn3v5GlG44k9SQY&#xa;EBAA5r+SJXqfr8J/JUuS/x+y/B/E2JYH7ae2+jo+3yfHwmgcZBZBT8QkFWSWggQddYOFApVMRg&#xa;QdDczWP9NLJkrxPOzriBIaY4W+znDXU9/e4C6sBH20p6G7Hahp+76ls7211efRseS6n3vb5/2O&#xa;8+H3U4jofX3ve9d1fue6H7ku6PcGDqQl8o7KVd6guPjKIa9co6smylFi0yufeuwjx6E2CxsmtO&#xa;jgLdWQMPm4d0W/25PeeBjuDFbxblPDw2bC78j0R9XxGSrtZEvHDBgMpH67w2G3ud5e1F9T1V4W&#xa;8LYVAV8P9i0/Z6aBTFXnWGdru7Ok0lOfGlRZ3i4s6SnjbsGjh5nq3se8V4oCxV6t4+iuFU/l7y&#xa;LyR8GngpqfmS1UQa2yzWp5ezUcI+caKgkfDAYCTZTDEDVrLS2/8mwF1uxJU/JY2ZQ+2Nn89BYs&#xa;RtYXvVQhYVSnNEKl1prlrKaizq+yBze6ExlfqQZQta5smA+i+WnEIkcNBqPqfxApROxlxBMRie&#xa;3I3rKR91hfVpd3nI9oMShncYpGiCbsDGwwO2aE7a88YsEZHZN5CocK6ETRMsjQBepSnHIljAfk&#xa;gN0I+TERwGj9hYVSy1ei6lWKYGgZF4Aa6n1UQkAHw4i1a41ouyhqChhRyirhIEHEgVlbpwHpb+&#xa;RhorKdiuCH5pYwOtxgaQdArjrpENOFjNKxpuE35iiaKLBTjWnI46uxgcL6BMfyZzZ+HLhpjbG4&#xa;QLScGEfyeUxYcrMZ1lE0GqSJmpohFY6TNlHp1Gv6nIjNWAEsLT5fq7aCtHMMBm0urzVWs0jGO8&#xa;Z7VmGh5JxdkVm9KFYwhnm05r8fmkNHEMBvlKLceRneTaiZoGyNx4R0CysQpneZ6cpboPI8Stp2&#xa;YOU3TOLMylVV2pLIeQh0uUDrthSKmLcdaz0KzcpfhjS4csG9cWXHxxFQN4xJglvG1AjHsmSgeL&#xa;Rozpm2UzeKo/BjmvSxbVKxpagLZpjWyoeqUDRUZhWjkbK4ihA2CdBMXO3GLHGP+maSCGXFo99l&#xa;kCw8gT2yZhBUG3FxG82syPC362cEfAXT8SuaAG4eVEM0ybvedqo+aPLRkU1ix3lbS3PdZUMiSs&#xa;aILUyh+BbNoG8s4Rq0hCRO3VWe1LfNvGvoCdU+IqoYvsDXF1tN6KG129LvbxjDUHpSjTiAUa1R&#xa;FifTHSUfbUcn6DFrqQTyNHp+sIoMdotMY5WwcC9qPQ2or0NTLhCyngQIeeE/bRx2ARaMR6G0df&#xa;2HQLBDdB5ZswiuUCfhq1k1h5t0enaCdXqNG75s7oM1wMtc2YPN8RJMKCi4cnUGAkoaBcsgfk78&#xa;O4NjEbjQckYApbUqpcMtzMex6NxDjIxIXf+DUOg6MEdKJY615GVYTxPBVJdVHM/1k/b1pybEUY&#xa;FO3DvqsJ6D5YzD1lqBzsx4K88hfy5+6dMxqVefVXgZvUUt1yGouRn/2Sn12Okm9QSZQo77cEgm&#xa;Yf1JhJM4FoWVDaf72LHIlQBwwrdq5HGpTRurDf7E+h6j0Bd/wk3g/ChxQj6QxPhIyENnkGPfrl&#xa;K1pbLY4ES8988qRIRh4ow3YzndeQXfww2QsGR95+biwbdfNjzj6kQTUB38BPJzS4MbZFPlPsUQ&#xa;043el2Rg6AJJ4esJoQ6c2AhyL2TCd6sYMEZTwr5kdrGVAGDCN/IjFD9oyrBclEcD7dgpry+cvY&#xa;jZhiJtAjIlnfZUXRpoUpxaCfSIU9oHHlsLw1fjATOPtN/IPoATYUI4ih+oqs/XWy7ZB4aCIKfs&#xa;Az6ffepBz9lxLvkHwV4h/RDigxrjUOLDCsOQ4kxHh9QDxl6H9IMrX33mAebZsS75B/meY9rB+t&#xa;k/e5RviHtdMi9ERXeUbwLF/5xHims728sm7h46+J04BZdq7PADF2jc9Ul7VsxLEflF/pGbPYeP&#xa;8g3o7VQNCczG9JR+IHw+coD+sTXYIR1yxns7itaioxpXBS0Wc1IWPpMBq9QE76vBgW5mUCXptC&#xa;O6JjsiZ/JWUmd/tk7KX0TuIgQHB7vQO3HaYnKVWpQIoYiLcaDHiTWOxpaWRVXqRJCXH/ZuoW7d&#xa;vE4gP0IWT5VibolsBgrm/luEonCghN7GprwWTdUdvMpo7QrTEh2tCBCwVgzpUzm2UxlZSRbzVJ&#xa;O/kDaHnv6if5cxo2iAaZSFodVACDXnWoWukSgsuRTGg0k/KBBj2yHEpbbkWPGyI7M2wmiwcpPD&#xa;/ifto4+hGarl4cMizW3h4Tyj3adHwgWDjlCbUzD1owd3ghM9AxDXEUuNbOI2AnJSiSBoSUsjBp&#xa;82EgjWhsHdDjHGOx2OMZjcUY5rVSOBdf53kDRhzCqCLc89faP+LgV2fi0e7YVlWayzdk3z9vdQ&#xa;FKV6rNG9kQPpJvW1CG/FdHFPgJRKMqJx48TgxaeJ2l+FRFapu0CdveHFjS5WU8kbgifL3g0oEp&#xa;+DxcxWMwthjwr55trCMtcd9Y8wAF0dRfucCU95WDnfnE9WN3arBiZ6hfum25oTSSvHnrGO/EVA&#xa;o2MpxyjbXPReFbUJCqOd4DbedPNoys663Z1zqfmGDFd7jHCLMXl2o4hOWm08Bn8n92KXNy7egG&#xa;T2Y4zlzq8lfLCaYbQcccpYd2xOIl9W+/TCKdjwSkeFe+q2yo2+As88EmDB88A9pRAp3+9CGWyT&#xa;6ddSLt9IF0JPWYGAQOVcyofLg0mcSRRVzKDBVyhAh4yN2d1QjPzcqadzg0PJXMGlIhspEvfKo4&#xa;JLimGezecUKva3iXGKLFbfKAl+Q7kFNnUCqH9Wy7NfHT8e+dzcYiCvfvPYKswBZ9ftzCeabAme&#xa;JD3PDsvOihRwCXHoF7qcc4pNgbOOys+/6ITGimdmC0HekGuq2xgJz2Z3izTqwFrCFE+MrFdGN7&#xa;/Br4yDyTnNYl2IFUtbZJ6dphjXh6Zpne0GqQYfiwsJQmfEQXNwzLwxKL66JfeX0vIYRu+ik22q&#xa;cRjCmg2Jk409Q/+2QWywXPgpuBZaratdWMCFnqThNjHRbydZphv5MVmRRwUb1KWPNN3s7KuJ+2&#xa;Ix6ihi50LKHG5iNiGBJd8f2a22tBQP1a2HtNwNSmwhPyFtDGxX3ihZ9sSpPRI9DXCw5Z4sexE2&#xa;0wem4Bqfn/SXTqVhCFXlnXdJBlJEiv9CytZuBQB2ZlHJnhbVlM6T2/QmtvmCtn6xkR5AYL45xt&#xa;087hSfYm+vNbT5XFSB06k0hO3e/gKdZqGLJlXo9jGhAcH1OBelDZ48YRyZiLe53OmC9GEVnVAk&#xa;dZBPznOFdaICTZK5hucK5+KQc47/bEfbZDcam3Dp3nBkPj4ypScCT+sS6KREkADpLiobFg/GUD&#xa;KJiYdK24+iuUbcwUN4fOF8ie9Se8v3TxNKzeWmVGa0Oij1gwYlD40LrOEY82QkvHQ0/Cckb8Kp&#xa;db95lcS1fouQswe5RWujToZkv2mVJOGih0P27IlL84U/lzzhArJLwP1YRAV/BuMf1Xql3qKii/&#xa;8Uel/6tWrDxXmnmftHWbVNYPsJJpWz10na95LFqNwU9WfbbEztCWfXI/PXWBwFVfK7HfyaPFny&#xa;/jZOf7ZGwlkiB+9djuA2Dwcr/TOm9U2VOj1KPGWgz2dtvenx1I9Fi0XFBcVX5CyO5hsjiLl2/+&#xa;gJ8o3txo3OaDVhbkVlYFl0vNSJYNWcyyPpyi85k6IVLzlfgkjxZlkSii+Za3jdeNoFly+ZdzOf&#xa;buXQdHz56xYPfFP7IAf13BKCGGly1hLtcTcdr5Jbr70KH4QRyPwzHVF5/sjzjriuHa7BTpsGAW&#xa;j7oXhZnkiRn9xi48mykkCFltYTCgisfj3tY1SLyFI2lUfbLUWB+Vc+uWbe0mzTv7nh9VlyJLTN&#xa;lidWRHUS2wybfnuQsckocn2r3CDo8tN2aBkb8wqKDZeIYJT6RnmlHbSzPzGaBElWbfXPM3RDza&#xa;Ox9vmVPRbRswoWyen13LsW4/quEfWlLb9kqTlMiDYxc+3C5N3Da4v+aT7/2b6CGUur1TetDSWx&#xa;Vyq5hpKjg98esMhOb+MsouZfrbdJTO5z5W5b2ZJt9Adbbsuyb75z2+S3oUxar8VqixDjRHqQeI&#xa;UHDYUYqxUOoQIurMgC3ZTgUMy80K6ScgiVbZ3cImTnTCLfMrFnb/JfBdN1WaivWlXdsq9aXd5q&#xa;P5mj2S5It+ppE84gnjcOGCGdAtf1IesGdRy2ibtVlnHDDJ502CRtrItr6Zv8+hg6mWE0C2m/r6&#xa;rr9Kq+KXVv7Ueigket4nZeNqjhat+u05ddZ3kILnzDWCLYOi9tc/MHrujOHZQTFva1htPFiYAn&#xa;VTlrB5c6VqMvA3VbkJwv1acjxNkbJqBzyP48L4W2ohkki4SSO/dHEBpUjeyyKAyqzpr1aP+MiB&#xa;3i8CBiKk7/B7ROh0hxT8kufiwja1Kku5iiKNOuzWwzDhGNaLOMK8+jUT/G1UA/W0TlpbtRQ8Gm&#xa;sWgCMwMOQ0CUhGhAZazrfiMK/WYf6k0wPycebleJN68JEMsKO5/ewNS44YYl+joB9RYEC1pA7t&#xa;WNwZj9wyhhrKN6AZUWVhCsPZte3FBprGA+nnqDSt2d6Z8QgjaIBlWCGHSZB/NMB1sG9SQH21EU&#xa;fiYTaC1fHhgwS6yFxQOTflw0zJeiXNWFb6H+N/Nguzy7Q9KYOzwUiFHjr+ZBbvpHx9QkQTg7mk&#xa;Tx3Mm1ctNQ+n6UI07ejbBXsj+KOOPIscsELwKtVkRv46dokcFD1m9OIsBmvXI5RfFS/IYUb6YU&#xa;8k7yEtQJmc9qzIxmDOGAYsNsrFCf/Qh9aCBDze0AV+r0ULu9pKV8TFH0QrcWUqeGh+af/cXrWw&#xa;4Ma2L6z9uJ+qryxcugjGI0JDmvDU0d3eHrXE4MiuKVhaa8eLq7/tHkHBXGqvPFlEcAhAYWoh8B&#xa;BaDUCYIPwv2Byy6c0giTz9qCLMwRONk1Ffsy5Hkm7qMY+w8s07VsMcjcOC3iz2QjXXYX7kNBMq&#xa;32afWDp+nZd3JSds/ZVALMgIrq4X01dLZ3zcM7xR+a2R3jt1qXXoMC3KfKxiX+eGoCZn74HHX7&#xa;rktCI/ICx7+Si4KIL9kFGEJs+uzvpqjUYruuGg+elABbiX5B79Q4Fzr3XM2UyA7QyW3TorsLHp&#xa;Ctqe8UP786U2fsj8zBGA478F+sODeTdmvpH+TOCb8UuuL0PRTHyMB9mWqxK6rHBNzwacnDqW1j&#xa;5fJfmlYn9h/91CaVI3ZFDeE/dFTUQnVFpWJTCQskReOHUGhltVZXIL/Va+CDzi0KFaadg3Qtph&#xa;vAfJFNvgQ1h+AbURySB+QbiIwA9weYnO8U7G17LPogy+W2g00z+qww9nMd1vaWAweyrFGZDzA/&#xa;vD9PjQzwx6+UTRHwwvx+MIXehyZaphmxaifGhD4UttM+bvHcHUg9WbnfLwFJIqVO20OiTpKqo7&#xa;ZM0fz44fNuHPgRvDQFwfMEbF8FsLN7EQrfQCAGnbVRjfN2jdMWbzWLONdpFeEFIdz5f0LOjSSr&#xa;UH0Zb7o2UuEKEcsWY+3fTN5miUQKAc//NkhRvKAIFHCeKfOnEdWJ5v/yOy0KhhQ3vpBjgT3D8r&#xa;t9LSqBr11S8tVRuowiDKdK2/GI0GEXhuOHV445V1ceYjuYSPIfXJFiHLZU9/vfUfiFbuw0k1x6&#xa;P7glPEvq8PL/nOvwPn8ztnqcfRna3L78NbS+Tfs2tLulm3ofiJH88ztdX/rQNlsMeHhVilw/6o&#xa;/WU+73zmd5BWF9tbegGZbrS+Z4tcio5syiHrMQ3VcUFZQTFZwLCbAR9ua4sLS+mGV78cB4SQA/&#xa;3S4yLC/2XFro0V7owThpEx6QFx2QFQ2cCPkxE06B38qMeCsv9tdeEEDFCX/PvrufUcy0+nk2K/&#xa;m8T40+g6REnUVUJMnpxPr5hacsyKVBADiJSzLrZeIutRYDFYPIvmVBRFGGnsY28vFSmDeKIGc4&#xa;jvth25VAuYq1U4V+imeZjVNYNlaT1E0cnr7AcYpOcO/wkQNmMVzyaJCIhIk1BgEK6CbhHoyyrD&#xa;sgxJwFmXrZSM+PjUlIuUbvzSwAehQX1Nsda+wGiQn5Ztf/+LAQa5qdZ1h2pos0bMzVzznZhuft&#xa;z+VnH67BdgXl18474YbvmBk82qOYqHptaIvY1exOV8Ctk5xUOHfVizjwzM/ai9SFRbZBN2Hz1e&#xa;lHzZ4Yn0M1/ccTgZgjNvIWxaTFe8NbxA4BkdcwCvz2dDf/kETEgSHzGtml8mnnBtXk2WvDgVjD&#xa;5p0l4/BIxEEgExfNBdbLwUbEjhiRNUwre3e6GM4zOIn23MU3XC/q/ExcpC4kMprCIl88nc9uAK&#xa;n2yDgTukmc78aFWGMWgADVtOy1oS5ix4zYIxG1+tB4HbaBQvAGTdyeFukvE5U/B3BAMpn22pAX&#xa;uYEj8IhF0v2PAdWE1msDX8SOHLFHNqr+yPgdqmmV74ZVxA4esUcxqv7UuBDV5NprA1TkRo7gLQ&#xa;mp9tQ4Earple9GmVhjHECAafIfWIS0PQhAgG6K57uhJl4bBBQgm+R6bVQh2Z4Yz8M0tXhtuIrY&#xa;sSL6CkexPzZmhmn9B4pHtT00MsI00fPdqBO3p0f6a0flzwIMME22vTbWw7RoEb+6kWyPjffRTL&#xa;a9NzrCtXgRfUWj3B8aOcM3uPluvkTqUiP/KUXdHhgLYpjwem8ohm8wELyxEnswIPrqRuWPA/aQ&#xa;TfT5bjRFbvwI3hqQUr03HMO1OBG/8pFgnxsFoZqgEL9Skf7zRIZhWoiIvoZRr0+NA7BNAgRvis&#xa;QYp8a/GCY93huQInWFkf5UIyZ4cSFIuAfGw4T7sUd8M6QjagQU37P9VkmR0iJ2iIioPyuGZY9M&#xa;hUjL3llOkUUTB8biInRDgDBcWHFRPrtmJNwz46N/UbBeG27EHMOAkR4sX+8NapEbEQIO3Sj9Ec&#xa;CILyHmM9Pj3rgAgQbNCMOh8TB+qsnG/HGYLsWoE3Ui6l02GsCcr0Flxj9uHPpdJ+bQZVvRha1l&#xa;UyQ8l37UCRxTjwYC8YEP/W4JDZDO59CV1RMzDu3pGXNoQ9ChM6MPOF6L6bL13skGcUDbc2zgg4&#xa;NVNewpF+CvgUTsAvZ7wc/SU5sQ8JYLGHsi6DctzO9Ff8qEuBhbSwrsd9cJiQ7/lq3PRQfuhlak&#xa;re9RX6veU7NrdODQqYS4biUXwn1cwSjKfWzlF8p9XCEo0n1oJRWaH1ueA7IfXW4A2k2odIBVoi&#xa;saB/GhN/IM8jio3u+O1b6HAGlFVfQJuhtJRS46P6I2Lg9Id+/e4tEHKJydk2c9PltpshxX5hQS&#xa;gMjBLzwXVu7mipayucS9uf21voCKJ2h9uRmIlL26Tgmm4RX7Mgw34RMQfe8NGzxbHxSUeZ0dvx&#xa;CiLBkz3iL0iUHYFvjI/gaWe1kiKHIr/AyHBWaTZgwy8YH+ugHv/R9aWPuGd2IiOhAQktJ/Le8m&#xa;dnP9L+Vd2v+lvPt/IVVzNzdrB0tXsv+HAJav+emK6o7267fcmssgm0gfmV5rFMxGH6EhXhQkFK&#xa;QDjSZNjbHSKT9gDXrpsGHHNfI19rUW03F0K8cPERM3rshznMjzw5nwsXeHooLLM5Q9N+2577vv&#xa;Sbj/8zOPKAjcCWwIS5cYP+XXv5/BosNHXnZsNpPsZ8uS3vYErutBgwQiT9pujs+PPItzJsV2po&#xa;ymBu2m9SbFZg4/rVyalPhXz2PIjcWUZYtU3ho3AY9hrwqj0yKn4brPFgS+3nvciaVaa23i3He2&#xa;lRwpOlOdaFk724UlA5v+yQOWapJMegMdFQkSzIbDbCauRdrInCtggsvGa+wdHr8kd3eZ2R4UJL&#xa;6edCkae9OO5HiCvt0+SVn/sD30NP6hTw45sOCjNJPBw7ZKtC8GCIfNKqueBEqf6CLO4slMvrek&#xa;MZXXXbr2QKpnvawqi5q6SLFDx0gj5dSn8OSlcdQCqq5+5tIF5TyDwvePnKxuig84bJSahM02kG&#xa;+X1KgIXUPJFgjoEBFR41UNSeUBTzB43J0zNz88/9KmqS63NW9aAvopXVbCUiMerUUxOi31A52S&#xa;aG5kFJSacgb4Wdj03vUgjcepT78TvaEWfaM7BWMeKvdwLkBbxsgtVw43vG5ZsTNgm+nZepqAtV&#xa;MJ3Q3aSjQjPT2iax6vOcGQOAeSbScqV81mkR1P9KrJShxclW+3yCh/0O6paUALC6d7s56IA8qu&#xa;porlyDx2UPGNAv3aOVboXM5ZuuxGbm7TZzh5psl8Y0KZmXZDxFhK25QbkLGdiBZnN/pPOjjaOD&#xa;emfmMuGJqlyHvJK7tl3e0E6vqiXNtpZQLDzFDHyKCzg21RANXch/KIxgHAgKEGEELurG8+UNMI&#xa;se/Mh7VinEZgrjIvYskiR5pCj/X5QS+hVypkPHHJkGd1C/pX/Lnopq38W2WPzxrRvMIJae3zsw&#xa;4C7gld1791WE40CWHDpp2FRbthBts2vfeARiqL+/IraQVFnbDA1DVaynmY8Ku/xLzTxLAgx69T&#xa;0yZVshDmpeFrJ6+qs2m6wBQTF9PjHJUTzCkcvfHWLFrWSwKvHee8mo0jUlVf3lSACqXZnYG2of&#xa;aQKfeasTX2wGa7TbPvioOHpnbivIKqx6YOcI5jCqapaWBnd4+np1GWNimFpr1Nw9jqXUujt9ZU&#xa;3AyYVHAoDCXXRE2QNx3XzyhOM+eRGJuJfCCiLwA8gcGXIxFUOCVicweaWJIlE5Zj581lAYj5GJ&#xa;TkKRyJ+ykvs2g7x1WJ2Zb5GCyDB3Me0E1cy2E87t1d4ecLltAKLmEMFpwECQ5ev1Hs32sx6w/S&#xa;f2foGMPNASPLT+zof47c4SmdCTXnc1uPLCbCQzrU8s7+PdMVmNLuH86PotGHttl6EU7qoHwEC9&#xa;k7n6ROYGeEhSTKZlFXDmF5z9xDx+rhMd3AISYHQKTx2QyvHOpLzP02JFrKdfUwcZDZE5a+5rw0&#xa;uOafBZdR1IXkp/CyaEcrNHNC1UCosVftMAgBqKuyxAdoIIMq6RYv1cUeVP9uSc2HEyGOSLPdJb&#xa;R65okuc34HDFqC6e50hMVwZ00jwvLMAvxKHi9xeMAvduJs+ZWPyKI1ot40v8Dp+JL4Isl7pC/+&#xa;GrkqOV6SNKYNNTdMeIeBciW+AWnki7/w8dQyReeOM8udtOnjYzYGMKFwx8bXzhm3yKKnbjAnzI&#xa;rdGSN3eLh3dtRSNG2X//lDYUeY+vaxpO3k+upNFrKxr8cP/E2HhSQp2HKbS1Ec0Qgqt2VIUzyW&#xa;qcQaXLgbuXoOdlzVH5XJJQFz1yvFXKWBpOTU8dWhNMQ/KM4pwbq4/unmJwyZz6KkaKwne1/wTy&#xa;vMGYYvUvDI4kxR8Bsk8AABzmeel8c7+gMV8lusVV8GzMXtT05Aprxi2CK68fyEP3bYufrgq0xo&#xa;p5SNfy2DrSO1jaGKhG9sZR9xFJuE362utElQgKYKAuJ1MCuUOIWxvF8s6ePbvtL8hjQeblxgJO&#xa;mtpfN9GG2SfNFZ3ReuPMyTWi0biZ83pDTl9VXsBf1f0eiofrXAsAOWf8whtq+UUG8Xisi9q6Pv&#xa;l4qoO8cqX/rfApiCB0fvPV6igRRD6nPywvp3tDpX7QhMmoE/kr2dqXUBnyAG+Cugya5epsOWlb&#xa;90fm9ZjpofunG/MRIhlo9vjG7G544LlI93c7Bc/FKa+18Ix8n3j4dokuff8TzhFVJAht3gSEWQ&#xa;+A/IOJduEIUL95oONmmBwP8tnilzTB94QgABMSP813jWCB4s91/jGdv/bjz7n4Dtf3Z2XGqiaq&#xa;L99iHlMcFFCavZtOmQRoBFF7Wt1Y9GpaE4RZsIb3PJGQxvMKXOySn1bK456PTc/9u7r6If8+n2&#xa;qzl/Sby69GcVhSPzAZrL9n7e0w9839ufHvj990MZJPA9s5Cbd9buv3XEp6xd3nV8IbGXYNYaYp&#xa;1Jt9fRuEEazNx6Tr+c15dCVSUhkPyiQMbG9JKlIVCcrS1Qn3ETxmieDidZeBhN7OAk6+7VXrI4&#xa;0Vg8Zv2ncqzRXztZGoq5bipHuk3JaANTXl/NUp2x+VgVs+sMr2r3smFXhag0m1itdYakA89lQE&#xa;A9/5S64BiDky0gqJjehLem1HYyxGYbIDFnFlV+ZTHnCs7SkCtRQiL7V4VCFEMiFc4uxUSwCrfb&#xa;NevwodkkUExt9xjOlsT7DgpvqRsASSdbTve3dPf8avxMU5zUO/cEFTYGTBxybRLKiB+QcHrI3V&#xa;CEn88S4iUiDKuTK/UlHVHEWr8N16NCe80cUsVumoHnAI8bxlY+jtTwOrWQh4zQqxjRwNO0Vu0G&#xa;6i4wEorjfR6TlLww2qhsh9iVUjBEfJf3kCshjLad0wS6C4fvfk1GPLcgZG6ihVu/HcG7SFsKCS&#xa;2i6KViJZMbPhkQ0T8unrtG13eB13XkRMycpB4bVhjGD/cUd2W1XOlVYGjgIUyJfjPawlIwJHBV&#xa;G3kuKdcyqC46HGBzrN2mdDTuCnddkrra9SGSNiOMl+IMtLIDnK/iMKdpSm6ae9FMOkJZ4rx8Jx&#xa;fvIuluGV6cClQD0eRCJuFkPYGSsPgS8/Oeto1ZfF1N7YUMYIl4QBGNxeqmsXzsnlXd7wtBkwDn&#xa;MIXRKJVn+4KOuHDBFhqmhjAnVksURBC3Lbk1ECin4opnZVnCeofTFFF/YIEYHQrDwjDJl7Vx3k&#xa;Aqt4qCGbOKt4q9NFFVxzqhSeZwnRNNUX6AMUC/tIC6DtUZImcAP3cyQHOJwSEu0c6jCkCGNv8r&#xa;FplX25znQYfjn9mCQ70DTAl2VZKB3XbhGTl3i1RhLXG1abqB6w/GlZijpzmf/z1YsvcIksxUSg&#xa;TLkFKk8/JnpzVsPTMuQxPQLQ3b0GquVcRi5we3g2JhriciMiTeS2FSOsN71VZt+yhP/IUBXOOD&#xa;davDfTsQWiuPttbjRmlN8g21O7TIg71SNtnoM5kRhhhF5FLBXjHnBE54mBOH+MgMOIsMMa2g9U&#xa;k7T8gmJ+W10qZAXnOPoJeNi89OoHTWPhZf/IsiQK7jirvbvspnKFMRUAQjADhncTiKJR+kpxnV&#xa;ZHE4sC3ZJhMmZ8BJbcTWpNfPp3lYPhK+LHcLTUy3qOg8vZ+wbjGz/s66I0DEObojyWXzXrbIqH&#xa;DaKCLkdXjZGcOgMUACow2xB3YWBLFvLkLwMRzHCdt1zKG3WbBIsR3X8QmQNbS8qNARv59j4bhB&#xa;HDvi92xyPv8ZmxvTOuO0u7Lj85XVM/tIKGB2AbYbtOAjd+DSsR/S4EGtrbRGd9Ic9ga9Rfn8yz&#xa;C33JEVR9WFdQst+dd3ePvL9B0JluiNlmPWdJ3/xkGoN+58yisgYTaa2oW/wdXeQ53P4xB8/fi9&#xa;1UD8nujoBU/oz3115J5IaTpfud92AT8j6Gi8xuNtNBYmm2kZJRu6ZuosqXYtpa+PvTDeaNGfju&#xa;31beTccSmuB1iRJpaE+d2xSbVvYI3YXZY5hbK7AzM/gtThsgNXErZ9Ici+8EcKF77hu4Nhes5l&#xa;pJUYKdzeASPsHF+ZcjKWR0Ve/dbgDC0ulLlK08NbY/4+IgnX21h796/Q73DYwEGsYqrYd2P5MN&#xa;CmHqrZz6OXlhnM/WPd+L2x8MDGiILnzm9O6jg+oc44Tom74yWw6n55ZNSFe28MES/CdT9YfTNh&#xa;IlQKzcKZ8rvjMTDih1N9v+dM267kH8duwbQAp2v6Q8lk0hyo20K91j6dpf3/3q7CNvt7XQAOBK&#xa;QA9//F//+7/xmW/0n715qokmi/8ig7jXVYGIYrNVXKoijxErb0NOjHpWlB9cp0WzkM02AmAIfu&#xa;zaqXf8319W337+cBkvbI15fHqvyVgWqK9zMMyFL/By3vFJ1pu63rVipJxbZt54tt207FtlkVfT&#xa;Eqtm3bX2y7YttOav3/mGPOucbeu42118Fs7Tl6j9929avfT3/6/ZdMFwv3QwH/J+6Xp56tPxC1&#xa;eIIA28moO5mDRpBXefO40zKDjkmS5Sb9alI5aB4WW/Qt1WQ9hVKVAoQra9aJBykMLLyIKpLzSY&#xa;zFW5QZO3IuT9bN3C5D29iN2bmdTRdDA63x6PLyswDdYr8UEk/M6IkO9lJiL5ke7fIMwm3sJI8i&#xa;MYvlYyw7RpoXm6rR+mn0mYdZ4BkfhKBy/s63K7LuJK/Zvys0IhZ1n2Kh59VqjLBHElWk95ltNf&#xa;V8VIjRIx8FR1DALTjFNbaMjHHiNEmUacsf9yEYJm6Zr6u+i657cWIL7xF5L9PuA8ddq1MR/1KB&#xa;3cwEq7ocB+SoVEbp10FgmEmXfmUBxvEaVMbFn+dHBJDOp7dUMHq80sMyew3mLuOZWI7CdW1SDT&#xa;osYM7gNLP3rqn/QC9EDSGWi/siWtvQAYiyg+dNRqeCZLmdSSx+YmKUe5DE3ZVqzIWTBqOklgoz&#xa;Ugfh062If6cZhKczQXArqpMselyna7TH1HlSroXol1skwSD35OKo8VcY+Zj7cjWsKuLGKZorhS&#xa;sKYSkEorTFpBA122AsZ6bCM/3ZAaT3BSKK8C07X8jcz4vQwcYwB4uz+PRf3G08DLDhD7Jg4OBb&#xa;rHyUDhzIlWi5x8q16znex+CalTNDTjPTY0VzQpnkG4GxS1TtaN9XHItqgJwbIwKJTMMY3GGpPW&#xa;OEMx5mMkhCjd0U3Bn8Ky25QjIjjpzWVPWCyo2gu3Z3K4/x0/lSop1zKFSwosLLZnHZj2KjHly+&#xa;x5WpTTG2In2LBt55Kre+oRYd52rHg2RBzFPh7z0TtTzWPJnf7jqFE7fkseruXNiO9ELXDKcYiu&#xa;R0W0xDWGQe1BjV6YzQsdNHIg04o5y+qScnXmCb8EVFqv2JtmU+j+Qn/450ZkRDRSUy38l630tT&#xa;yx7Vix7TJVPgelKOoYY5ocRUgwBOYm6pHhIpe6/DTwoJW12aiq5v0B/c+8gjHyVRRMfeTeO5lW&#xa;+JaxDlzvDB7Ql1xYFW+WS5lP7VPzH7SQsc6XTDVKtuW6ovNPEq8AIeF00PNNxavkumZ7Jy/dNp&#xa;JrlS0munVb9JIpY7Rv7jlUb06KtZUPOZkx6Ll3ZjUOB0pw5OriTQ2mwn9z7A+hnfsLQ1gAkLwt&#xa;6AtlvDiWBLSdicWm2Xop6GQxSoyiYh895IvG/QbHnTdzoA7fGOxm6hSZBAxBSBVDWdT0SDSleT&#xa;m6CC8RUSJU9KqDNeSAwDFLRkoxUQ9l58me9sS9LNcSzWU1ADuDdgKGgy+VbRIXojdovI4+7K6c&#xa;Y2eNdjpC85v5qxyw16Etsz/aoVOVxn0OnSuP4z2pXKPasRbiSLmbBQNX2tGwYrwhcdKSE8oLCb&#xa;gkDxdNZVZStd4Xj9ylgSWdqPyq9k7sawzh5XcWMwAYx8P1qxNLZ4JdFTlSJ+cU5DEUEaCVGGXH&#xa;DGH6eK5JzEW0olgFi6Is6SAkJ7K6xk+k4uwcCyWyDAT4NVwVlEJSHeFldxebwsW488GHT8cPD4&#xa;7Ly+N8+VB+UvzCUQFFCmy5UmvzEM68QTBACtrnOlpQ7BiVCQThovvMBqzNImcibs+LvjYdnLKI&#xa;JGlrVIrz9FAMz7DEWpEhE/MuK0v3AMPTDwTA8+lApIuFYU8j6QziZ+ythrxL3+xtogpwtHPl4i&#xa;on5Csz8i3DDiR+4JGlcV4P2Iult9enU3bnHcIWpEyRqy+ZEg9MfvGOBZ8IeQMlT63u42QORPdw&#xa;lJFJLj4nJtNFuY1onpaULZOb8eUXGqrxvU1icFO+fsH4S0NyIK9euEqPYRK0DVM9HfgJ9dXiMM&#xa;+wvwBP8C+GrwfwU85/8J8C5mrkrODo5mzq5e/wl7wH/C3koTTx3b3x6TUq6EXtqqT6YqXQS6ka&#xa;ZoCbYR9gQTRimDUWSRS86+/3tqOABNp1LH4wLphrdZxuXc6cV0+kbSy/dqIk4k3pk6E/A01XV1&#xa;2zndIff5cfUkCBa1Cway9E5bf3SLvFPzS9mLKcCj4M1uaXNZZKXbcF6601ltrMAkSujFNqYYZ1&#xa;teUjVbpC6a24wOJgaFWSWppGtvj1svKryoaCw63qtnt08g2JchMi2w98N3yfsrelrDh3qAUZH0&#xa;1zrgCQEbws8j2ou9cw9TNFoP5dhy4NmJaOLqYgOqWPDH7GPPcZmcI/Fwc74fR6zHnB7rtFeuuQ&#xa;9Rp8OP2o5betXJabjNSy2aSRuOHY3226a/07M2yp8CLzMtuHqoZqaF2V0T8ngNdhV0GFJc2kEl&#xa;9LIUlAoUQPuWoUMLkb8FX1U3YkAYCXEMehsZtL0Z1llGDBTAIeks/C7Isyb9ZgaMa6hchzdZxW&#xa;JkMC4jc9AgsDeDJ80gNQ3j4C3uPApBukpqpU8lhQcGYLbqFmbklVBkocawQITLA8HDk81Yw4Kj&#xa;wOCVt86H7BUa7iMAXZd/ibu6Eh16fLDRNy91t8YDm86Bq8u0Q3HIYSeRIWiVxAuLp/li7cNyEq&#xa;PECBt5Bs0X3187342deF0Nw2pjdxqjVD2DSHJVg0kiElCfeXZJTxyUZSN5xtooBMYJFhn0gQKk&#xa;xrzaD3SzKNFaFJkmYWHO94kmvFr3C+id0R6mmcPoIP9Z8PVMhJYJQ5sn2LlWYqm20lw0/fxHRg&#xa;D541ocKiv8GKZaTdY0RfoM4kUXCGOCmG5Pf8IbeKaEMWGioqeHESIruh2jM4pNCtUXbLkd09rc&#xa;4PPW0kesWZap7Zr90Bl41krST7E4UqjhfhQWaDMSLsaodDHEHjmfaJcKY4E6DXPoRda3mAE9l/&#xa;KV1znLhd7aCIZoNtPLKQhVwL7UN/ZkfVUC6fOndnyeSEFsH2Oh1DZrBLaKIx4RNG5y2bAuRoKN&#xa;k/iIfz+yBr+5QvdzpV7IrEJtqeUaG5jglCP9LGlgMTMOD14MudKBrPh8uqpmWyAtPQ7isarrft&#xa;p25kmEwfagrPkitV4jfcIhTHRcAcLQodxwQmvFTQS1EkzO7ILT+GzzIqoDvp2AEmTOHhzO07UZ&#xa;uBOvyk1SlJuvfAOZvFr4rC0qJ6e6rGbK2Hu7p5Kn9u9tl8VFCvsXKuepSh3cnsKOZSwElotRyo&#xa;fheu1cg1Hs+4pe8Wk7/KL9kNLNNeRT2LBY2BmKyG8lD2DtKG5bZeCltGbxkTtf+HuKWvCg4zFn&#xa;NEWvPKm5+W6xQ2NjQ9/6R98djq/gtl4HGfavjtPIsYSYYrYxlH838kZoniicGxTo9/6GORLmKU&#xa;I56RiZiT4OJXRmyXjH+MiQQlx2rAcC8GyDGL9WvwRVB2j99oV3aD/sKfHDqyKJmr+jR+1eRdEJ&#xa;kYBKm3w15/ch1BsMKX5+hMhlmCQ/gZEfXDTNwHZYSuDvqkamZD45i37xDhqVl5MEFySLr9yZGx&#xa;LVG0UUFC/hqjKyJ3mD1gRy3mQz00jQT2JvCSFV9XvycmcbxW7Hw4ld++sXwm0algLFn5JvJX6f&#xa;bD12aH9rLyD6DHifQCuFmxW6ZYHF66b+wL0RV+zQ/oKK5HRG5DrvglbUI210SJPPflyop0e8yN&#xa;pH/EibHQItEHKgi00MR7pBLe5lQfYGcQaHvvQx/HzItOyc+nk1izuAZI9K8U79syCL+n2UqfEn&#xa;1uQ/9DqdDZMT5y/68sH9u+sCkn9P339eEmjBaOEvEvzh10o1SiOvzbBBK2BB/QpnihaFdUMdAM&#xa;GC/4tim7KZ6xyx1nyVpKEhPLzpwdLuwurCbM36Iq+5CQpMvnehIHRtzZpJt+mx/rH7Qj8j/XNz&#xa;whEybOBq3WHzT9dTz+YfXweiHy+fUGCZNFOoWgbLFqasF8lGYkN5pUbro64OEgHI1O0qWwWSKt&#xa;7tnHNrfkUoLRj7sPQXTXIu0wIeXX0Bw+53rbzRizpYhsTYv7vtdG103w5fq4vXkoEXTQgZBV8D&#xa;iveKbNGvlzmXmjibmxeaB4tnmmwdNhvbquqKhL9vFi6uAWm03KoYGDLO1nTXIQ4VK5uXliVLcu&#xa;2sq+wqYjkuV+TMP157Ocbxmel5rUzDkkYR4VOT7cgpazCTTG1/KwydqXhTzqdeskD2yxcv4oVn&#xa;wBQoTpuTZlvRF1ANBpFPuprip5SotLeP5LUpCJ0jUx9z2v5exdSaY1stnTTBKxwVFExTWMOCpa&#xa;fNsC+9RQzYjTcAVc+rllnOcVgzyJYUVYyPeUxVanHYUb1FS2U+4+xKDkFzWmsBD/z3t9EDNupv&#xa;ERFkncqJBDIlbKRQlI+OJ9F4QsfGLGZ1QCdaFF5ZeUYsyejIOlnjpUFCi9JWRblyvVQpkDIWPH&#xa;/uKRCM1NDz8ZNwI5SIzWqS6kOAxh7tBt8fYEh7CumyWQHa41o1zPK15t/qANwia2f0ghzbtgEu&#xa;RxKAhtsjmYPpvbqLbvKqzvwTiHZWATHBD/GnEcAhdCm4feeYa8b3rU2LNJ+HS3QEnfH9MezHYj&#xa;8Cb1obKdpi1xuIU8p5ORxvHbAGkVUyJx0fCMyUi9TK6lAxPzzHOiLdGWol6t9qKU30ZHZw5GPp&#xa;5nRogNRd9QwbuvTCtnTIW3x9qy9HjrrRfreWAmvmKcK6+87q2/HcL2YK+WmxCdPL5vfYfJ6Z3z&#xa;YZyUj2JaF4imC9bhOYak/EAhyu8La9eX7lq5I9SMRmy69e6Nm03LsWDze+umnLop+jz7Trrzso&#xa;emRoTqpguFt6MhgcDR8cx89hvChDjiliPzTOaO1r0oXB2eZkNJmzgWzH7bOx/cl7S3V+kGaI7W&#xa;k4/6xuRAhXzpiBsgWpzFDVEts/Ih0nzxqvZXhYPCxkJiS6t6F2vEuRUsir9FrSrGqsb3a3VYlD&#xa;RrYdsri3Wq9c7Op8hRs3j+qGM5IVtKAA9Ez8dseJ0hy1ynu3VGWtYLHD67qFrkl5WeBKK2g52J&#xa;/He2/95sDXTSGXGjcZkZeNbyMHf+lGpXuGsSGEYSqfs3lQuHlnib2qtsFDlOn8XAf7B7NT3T00&#xa;ozTGVinhVWQwKsS7WeHGvVMU9yUL9yv02O27fUB926Ma5FXe8pCaG+8tpNl8I0OOT8LStUHndK&#xa;zutX/KTWs5rgC1zxpDq/p2Yt38iskLjhXzHLBoPv5++vZkfa5PQ0eRwJBzaJXuGRrSPGoUqKfB&#xa;Eblour4cf8J/yBgU6We+25qM1sRweL8Bm2Y739JtbMWHE4N72UsF64QnMFoshKYAYX0CLzOlpW&#xa;uYFzClUL7D6Csz9slmZkE5bgDgBJ+tP+rSUa1t/h00LX2SY/E1i0iRm5MzTekOB4A2mOI2Xnak&#xa;4KZ40jyazkw+jnvXYCRigfDUzpn2xlZ6uXhQa9osFLSVtTmtK7Imh0fbLVU6GEBoSrexPkyvec&#xa;Nc06MrZ1ME0LcqVn1T800L+138u2S3YkH5sr1B0osoWvcbWas2ETI1zTp3RU2DOysGCWb0B7uv&#xa;PuXVHi6sfnS39KPfKESIoPSxMdQrR55cTpvmoAeMOMExDUK67A14W8UT2hVO25mQIPmCCU6H+n&#xa;uY/YaI5cWYPb8Judq7GIgv5doC97BjZtprX04wumQXC6KA8ZluM+stWox1vWaXMziD/9lDTPpE&#xa;g+ngPeB7AtynNOhryrrhM3m4rOHqvXoK3w+NFOwfZhSZWooWbx0IONC0n1OoXHV9LWERP+rN5O&#xa;jdMtqTjsfInxLGe0rOByZd05PZq6IiUo6rwgkAv7bXlKuTBko2LzTlnOFltcitH1cSOkC7qMux&#xa;qtkQ+mdm06vcoogs2x9TF5uN+yyQV3ECorFPZYEpJXyXC2vlI5p9JQkybnb8aVOlgVWAHCy6TU&#xa;I1ZequJDkqtb7uX4qwBt1qdT8XwLVD27VCyvunE6YL03tXzRrQj1dxU0VblA9FZhMly30oxenN&#xa;9jACk+Tp93SP97XpdhP3YIG6HhaNRExsu2o9WiQK89esMSzBAyfnYFSO8aRT15Gopux1UvTJOs&#xa;ljVlQIxbIn6dTDCJCm2OYKMYIS2Kaq1ZZs3gRIg/WziXJ4DApczeN03b7KGXyaofYUBxu6mcNP&#xa;ur5Y80sZoWt6aK7kAGnGheJ5A3XjvVlcnORkF/OX8wfJyUoMzmZy1W9E7tznr/eA+b9+KtQs5P&#xa;iHERy4LuW7Ia9Nri08LC6TGN9UJz1KQ9P7PMNm/xhOIxJMp04DAdwstzVVnrRbz6Ji2WXn5pz6&#xa;Oy573L6Iw2ujSngiEWlZ9dYzgUQNN41vS2qaUfm0UOzdcYqMEiIC1dUVhCIPKLZhIdLOU9TWzr&#xa;NeM16s4vsH0TwM+ROwwQM8U1guiAvGZFMp0xoiWEqq3zBqfDGyCXl/weEERhYSJgVEloOeSFV2&#xa;HAkHRKc6rLs6wUXwE0qClGpHUZIVOQQqs8mpuRipw5Y9A08dq6lKU4YfnPREhBnUA15PHcWLHC&#xa;BSovIpHNpLxefFk3jyNdrXYiJ19sPjlehMD9BWODJmZItmNhJQ2g8xQpq5RVyQxTvo1Damft66&#xa;XLWNkR2vzLphpyw+lw/18ZWrJBCNIQ2Uv6ySEJxyrTW9QFdz/dRtyxv/bd92Zo8vHKiA9CLiFT&#xa;p7VrlATVIEKAxDuSfqPRhQ0AxFD1X//h0iDVwL45agPxs3SddHvwW4oHx+lwcodN+MVqm+IiIr&#xa;o9k+t0aq6AXREmsIz9ah6PFSB6RQxNEJJsB7ICaaPFOrQXLD+pr0IB49UYrj/lBX2JQd4Y7gm4&#xa;rh3sRucaKxa9H7VOyVlMwkSROhqBbHeBG/hi6/IZ/qV+UavukbVHr2c9+Amo4ZXgG4vrsxmjBB&#xa;sPH1jXRMSTNHK4F9eEC673iLwNZtwq/DxWkMe0RpeReVkTrutfIWQ0re3G9zTSvLuXzNW1GvHK&#xa;H6w3ab6nCbWmNk38MQ50K1cA29yc4VnJFBSwj62sYTiDSQDnRyGSTBx05ExQ/gA70XQNO2hmQF&#xa;YLkftuxjOeVnzMpxJg0RhjjUAvBNVr+PxtGh3avVKPfZ5a/RwRLtPhuVTG4orLdPfM12ftmBnS&#xa;Ny/VxOj/kBJXC4E+r5/UhdvElwig13MEsAfkrEHevycSQ5XipiVq9e2ZfSQ6Pc53pVO8SvLxTH&#xa;zbQaYVeN6Y6RLG2sLnwTHr8SET52VwmxGRjKgnqZaFNgYiOPAeJSmdVO/PPFt26jF3w2lelaiS&#xa;0Z61mFLZnoWYatGIIwfGih12QWxbegzRlbUc2dlvGyhfzSg/zy6a9DISG7yJxdjQvy1DDmo2Lx&#xa;p2fxp2UxJSAauqvcpfqumoA1hjcEl9fpNOhPU+fPUOdPV+fPhPFWoHY+jShwNsJsAH/ggWnF+L&#xa;kVJhiMIn2NhAq/AyN9w6QCv3NiWUkteE3kn0TSOSKM8J6yFUjCN91H9EzUEyLq2bczscsKrwFV&#xa;0lUbPloRhrW0PMPOCu8RCm4TSMqJi1gJF8GHiAUZ0p8nQK2GmNIuSk/9ju8OETIkjBTxgt+uP+&#xa;GqhO60gocOhvj2e3Xx8lwiZfu7EgR31LfB/uNU2k4Hz/JK53YuPCUlei+h4Gag5MAtmbE4fRya&#xa;AL0GYvvzLZMRUs+UapetVKU3+uA7IWoFEWXf0jAyNopNMyEKBUt8MkKk+o6P+GBiop4n+h1GXS&#xa;CJd3GKIB60JusD2kC5SN3Kth5c4n/M/XCZNeV7/yXx2dj/Lidn+v8Ro/x/xCfrGshd03CsEf3G&#xa;oeRsFPK6UJ1xXLrz6FI6jhxY4AyUhUK6miPTEmW/SskTZly37kRfsygZbqwUUhQnuT+U+bOoaB&#xa;BXKEN7uecSNif8PMwvo96vfvT8gdlmu2Qhb6DbaD6inwJEqwfwxtirnXvOHiooV6S7T+5aUDAD&#xa;tQZZJx+i5dTZadMqW8hIRphtdZKizJOfI3QaAN1J6gB8vySLaqcg3XKQLEIsM2gn+U7B2x5eMl&#xa;tYRiSYRGoAm5H8tmXBbZEM0OAbaTNleZZhekYHyfrIUusGFH25QJm8ZW1pzbtRBma3XpTGVJtV&#xa;lNsdRdWPxo21RMenVASXZ0gUG8l+qtRJQatq81j8yjOR43Q9QgUV8f/aDFF3zs7jNNhR0KjSgG&#xa;sHDTPIFgVnSZOnrLnc0eX+6pJ/TKOKSQwSwE9E6SUB5nVROBsIw3+wingK9/m7usU/RcKTWIi3&#xa;4My98MuG18+rs9kgtjh/o0gjNQlrJhypraGu7ZIcMxpFv8f5tn5tp2oO7G62SnTMJFdDQeWJs6&#xa;SLJSE3hScddXzV1mawTO4+lLPl0tOKSllgh5UWSRc2UCewM0vWfM7iL/FQ7oPJTGSJgld/OfkM&#xa;ttJos5biks/X0axgF1A150rV2lD4zUl6aeGkMITTOYQ8Q9OPPCgd4oPhpHzOWRoS4g9b3VjSWt&#xa;Aeb3ZcImarqGEi6yoC0ITBwiEVAWa72Epi8nNCOuwy4KQwT9UaWv5YNzppfrD50RlIzxhZqKc8&#xa;E02Y12YDH97FkR+MH3QbXL48hIXGYJvgc2ULmTAy7omnSugYVB6IExUe7RHsWPbiUGHDLbpAnI&#xa;ocvY6x7O5+0cuB66pW/D05q6Sr+jsip1jrPi7OfPnluxJzZCD1/lcrzmrtzGLreXqunBWK1N8S&#xa;AWecuIVMX90X2re1FtpRBQpfbt9/ogpYq3SnnBT53sF8ftdOzhMp2PkT9XduMiZFq9X/RopAt7&#xa;B3MbBPuonaTAQIVmcClGT/kKjuPybXIU9HlJ+JBeArNobnUsgBL4s1UaVeVFYbixfVq3O/yQLB&#xa;XyEI/Ky57NqLU7xeyrUBMpr044VeImT7WmgrjSeemB5s3ZQQtDuq6TzV+Ha6VdeHs4do6tc4Ai&#xa;lOWIZsFPaSNN3xdQE1Vu6mNOrGbBmJGV6Lc4sHtDloWLBMNXi+7c3tEwx/ovWYbZKHak4vHzFE&#xa;5Xz6Cz+1WGQX6LiD/CFbz9uiTdQ6kU+qwPOyfz6nfuGvt3Rs3xJlyr8EuH0pU6HswEacedD1bg&#xa;8g9gL7cMMnhCmaAyE57Q9ItQpm0n4CAz6vJw31SH5ILqMTgOEPKXeSL8hXmHimPQ6cYuhAbiRx&#xa;8Uk5WIm9Su5bSt6LEhGwJL1igOtKFZ1xqQ+/yDdL44FhfebCIdv0Dl+3w/3hr+I9JuyH1mci3g&#xa;Ehzut7uqLYboY+XPO1R8jK39xA5FFl09yiZUecjTYzz51S+fjzk0QZTzzxnr0hFDUzoyC8R0mV&#xa;x1RkPDnx5/hH2d80x5yEvIPrKTrs6IP9IzYhyo29/NqZgJhtirRNiRW23QWURursUSKIvGRcjG&#xa;6f3yJwrIC/lxB8Bh8clVTCyg9YEE3k8FN9xdjNyHap+EJ+uXcoeFx0hkn7IwG0byJ2NjPa1ilU&#xa;rZ4vvKp7h0z6DJEcyywF/Y/YxAfwBxoPDn0pBelm0pDx79hkjj+MaINU5lkZWZKq6JrK0BKMKf&#xa;3PP8ZScLTVIFAhv3wh/5fcRNkj819Wjvxfj6X8b8xF08T2t4dWwJYI7ovWwbAZQA6G1rERtyMh&#xa;LRJrFGv8vu6auhFsmSptQVla9Zvzwvyi+0m1p6A57MH1RW36JPb0xMcCiE3sLcIld7nx1j3dIc&#xa;j55/PpLedL+w1AVNM3Yv1ROvJOyyppPyYBUO/OVXQk32F5cxkySAgTlcdtk3Y4MahlAKiva/Ug&#xa;zQMapViZmbSnHarqzMa8qGjMOjrP83GMINhbISqmsFnjcDAC1g7KWM5LxwAwJEB1K0D1wR38G1&#xa;l4w1rUoZe77y39ctbmAe/FeAv6SKkFNAZ9Qy9D6ISDVKIk9xhgYxc45YODC2ou4Obmz1629RkZ&#xa;SYWfFRsc8aJU3OaeD0sylTaUKYLe0coMkI+7gnKRmOKecGyl3braU3+jARY7JvOSIo1mgt7oZQ&#xa;uovUkvLGjfDjXFqbwy9k3gIhIj3LSYyH4iwPNWjB/RQE5a/kIZEIXVKMiLaSQyh+ZR5c4w8jA2&#xa;45egsZZKEw/VFf1mlt5vopSia1aqCAO+aYPAzjYQ9NrgIg4mu9JXK22L1B5PuEnsoZDonVclgk&#xa;vLMasgdjoLdAe6YZyR5wXlAccGajlUUPLQ9FndSSRW0Rhp2IoevtaH5r0JG1G40Wk6vjLx6End&#xa;FzV9PVDsN/jmpeNyX6acfYBVzngcHOjnKTdUsKLo53bVucV2pwcgx8/lyJ69FffnA9UKsCoTRj&#xa;KJ9eEPkOB05R6aHx3/kFigEnJD+zUYiVkUjMqCq70wfyBeuvBnEYM0hozUBtyUXtdg1JyFTNrD&#xa;N9ZJ0mU4Pi/EWvlS9ERK7k3FFUYRTTlM+S4xAwtjTlU1rpcFB4RtpMVw2DGhJTloXm5r0AfDRz&#xa;bGXP4dAXdQL8s0TE2WAzUMMxFSk7+cB1370M7n4bxoWztqnCsaBql1vzzwiJkcMRvLRRrCw4AO&#xa;Xnl74RJFWAHByI8FYMfoEiQ3GG8+1DZsAcsmF+HoNvYgzH/lXBiIboA+Qe7NWKmbaZ8g7ptyij&#xa;npWQzPfaI1wMrIvxTf4acAbVFGPq/TdxWO3yI6Eko8L6YRaLqC1abofylJXW1Qc/yQLn6x90La&#xa;p8IckhkWVD/f4GwJA5D9tkpnMtgKCTCMcyJEHy2GMtXrp2NlJCnuFRN+fsR10ipScEPZQq53UF&#xa;FgZ5Ls0PQf7Yz2OB2p8jj5thDyZtR+Q4ZBqoVJCUqn0EWtRiYwk7MRyziEFRgwwyHaJgMyPEFI&#xa;ymneQ0/js0dKePfWy+UPK2LrpPyMTo2hchI+gpz9QBWgQHXz+d3cRG8o87u74B8TK9U7kRThum&#xa;oRNaZ6g8til04ySa1LcmOTNJNjVgle/ip81J1iU9tkgyfS9i+8znP0OjyC6S6xUPBOqqiUCFuJ&#xa;acXC+KzHJUln/C2zMoNwgXMR302ENoaECuhXgrprcmHK3xT2xBF0FJ0ntWSnHU7sohhn1O9/s8&#xa;ZGQwXOxui31JbdCdnJ2rE94HG0LGR3M15q+kpOU6d94TCGa46ITNGoWpGwMH6Arvp6KYNdk6e/&#xa;yk4uZ3qsbykxMiBV0t5VoorwJOZAhit0r2mbDbpcX1ENivHiE4ilMl+tbGXRi6y6vNjUqF8BUv&#xa;lF2h27MPgrnqk3ohW+JYT7zLdwC/H2mzdYNPSEknZEFwh7XlfCd5dBbKkFOtzu4HybPRCFBScd&#xa;+BYo9xyTUkBTXbybx/7tBh3oO8lfSMXmIXHkqIfwHqjkSji6ioct67oxiFvHGwvYC8/APksFwX&#xa;1VuRZAyUGqjemG9CRIIzTn/NV9+Yr3lSmcrf8N4uiXm2LZ5gDX54lGC3liTGm7Pn9KVLmRW3r2&#xa;R/kvPWRK2OuQlrYqMY3FlM+f/HLdmFfb7624YZv94w3dXB8G94NPryu/8KT+BFF6T+0s9kgbPT&#xa;MueHUK+EKlDEk/MNxmzD1mhyL3v7WekzWiBI7EyhQLZMtv9C06jYFSWq7/LhkMH/ouP04/tpuB&#xa;wUTihaUFtn/E6FZr4P0+of6uGf7U3Ltzf9WMI/h/l7X/3yj6P8dZijTePNDE0T8ppTvMtF+lxs&#xa;huay0LvRqDMcVswexAoDn0RpoqSBb7hFHwud/tHTRqar5wAp9f/nyJ6dGYQT14fpaeunHY1bo6&#xa;ZyTJs1L05ivJSstqc7nyuPK9k/98eWoR/II/9AT/Sywg4zCxz6uTR8ZpnNbaC5DI0ZY0lejaYH&#xa;stDBNFEsfp6udEY6DS5Mu3Uyl1zXp/IiGQPdvQmZs82WpjlshewTW9Z9E2hLC4u3oagwnUt9kl&#xa;cG1mOd/8khjM8Y0JzIQLS8FAHUsdaiKkrYLPBIETgKbNWyQ0pAFMFm9SO4TnTWjyUrjF52xN3g&#xa;HBs4oT6qe7T/CIFhfpDMrlF6YfpibP4+SPAkO221BDaE51Oq1lpwpd0/nkyLFXKIBLe+JVllmm&#xa;rSt6BtEk1QCCNPNj2IO2JCXZIrXZXTJgnkoZFOjXeDRJh0UKiU/C+Z4ih0qV+/cSeCR3lnsOSH&#xa;bWqly86dFro5ZAO8stkY4n2mNHiWnAc6XIrGkYRUYxWVINf1UKg32UlStsIlnQDztLYJXVzvpL&#xa;IamF2y9oUN1hHOdta5dROEVweKqX8MSlo2iEOEoCijAR6FgCoyUZ09JgPJn65JkmW3WcwibisB&#xa;heHeDSzlIDSyrNNZI7ceIdXrEmbqfQI9yLu4/eVriN/M10gGWEuVZ5W22ImhG5g4GRXqL+9Ku6&#xa;Zj+KMf/gBDqlV/aW5esEzaVyJ+meGT7ZKb8+kRuxLHY+3PetFjhuIMGObBO7S3Sp5d8XqszHOr&#xa;U29z1SLZerWqgSOIh2yUOoCr+y+R/Y1Znvz071whFv4VFUbK/jZQLzfqjGUGSSzYWfiK0SmyMT&#xa;UYLcWm4r+T97ApMGBjSi9vhE8X5NqRfascktUqsJ6b0kMqigbajY3RhBowragKmnAAksqrVzY4&#xa;ZiAgJp9BJ/fTkZ5cjTZLc3iT5uUSCGdDDRiAuynAtnJAG/Yg7OwFCEuUJ9yxFyK3wS80RYk7qz&#xa;rtzmL2WdS3XB18yjHSGlwCzNvMiT6/K9rIKRtt+j4bdYFMDiFcEJmh/XLGk/Aet7GmfXVU0WTs&#xa;lyrUeAkhLAtTPmwjWgynpItbzCwyQ3d2sZCqcU1lQaUM/bv5oXrfVaRp2wWOgt8wZNDMApJRsZ&#xa;KQsTQjptF1J0cFLnBCOZbojlBKIeQo7FLilzrT8xGL3B8O+U/yzeBmSuicwKUKUvdeG5NqElFn&#xa;nSu8rY6LBH7M4phgNtT6pNq+VL4S49JOtLb+4OXrjtWwFjqRKC5udi3EVbTjpo2TSSpHLC0/Ea&#xa;xff1v3YsIihiwEQuyCCtxGVLJPl8vzwQuDPBbar+gPKHOHeghctaxKy/GnK37smv8fKclfBzgO&#xa;zLS7asvAJ7vEdq+qZbcGJYy7TCg3aPIC0s7fsAUZSWY9v3mr5GZpn3+OVxDzLPmM0bhUQHrSDF&#xa;cr9O8mv8MiGM0tdTsPv2vKu1batokZzYzyg/uuOS6tB2WMQ/X8quJJ+NMTp1+mzGnxPou1rlL5&#xa;g7K1bAcyBig4M/PHCjXtV1KnPcQivUiKETGlpFgzS+bhcsqxTOmoDg1Oehd9w4o5ElztmwN0tF&#xa;svP8vjoLCV0+xSKo9PkPQhLh+xLi5XxtpqW9gvDFLaz459mXH9ggpirDWrQpIZZuYbR5p2v6xF&#xa;hP2X218LTRN+TPuFs8AZGrVNcor5H5PkhoMu89bYjrNgaOjz85UuD4BCOy6Aqbc3gRaRrTjTCs&#xa;K9mvR901CkoIiaRLSUVsv8IpqYvR05wS3RnKwljDJM+ZuSI8rgeDNb81bdUxK8xGhdaaf2Qfg+&#xa;sZuk+etOTbZDt+hFwZnTi4KncEIv3JR9iL3a7Z3rsJbeWW1RXsiqWgHcRy+9JBVKCf/3Y+yMlG&#xa;0mH2Fo94rNtHy6p8naXPcSL4N+5F29mv4//C/da/4J4YwvdfcM/1r7h3sLc3M3F1cNawMvMgN3&#xa;RzNDVyNfuvjy7/r72E/5xeJ+diifoJym9t1FEWRY0q1KiiVidVkRGy0YJdKk7YD4kKxuFJy13x&#xa;q9Gv/F3RdMbN/yHTJF5Z0pRzyv2Rwdf0NAkBj8t3fTA54efx8dvu8+MqtucLX0QONuks/fTRm/&#xa;wUSFl02WuMdUI4OsdeBp1yrnzwKPxFjNZiH47SIakX21pSHpSaCXuk5seG72ZP3oojAuTGVcCx&#xa;ylaHe3H8NU5/nMwxBdLXO6K0kp+WVWNeYGDuBKEYaTWEWaB2wrM/eQ/XThLxFimUx0hKJpSEbS&#xa;75CkoDkZLgVUimY1PfIevR6BAOuKYdE85oNiUk0m+Tra3KLBUmjzoeovqQw5IQYi2cC3UB99d8&#xa;TKOy4RBWx9GstShAjDd2/YY1nLVxLh2gymbFoTBwUb5gI6K8TU+v4ZlkXg2mKqznRcxrK2KmJE&#xa;xQ8X2HW1gknxBBoLUWaPQW72tNmKgcKUHEp0VlglGuEX//7Vts0iI1eIfxOBNlYBmtETq9vftZ&#xa;MEfISO6GQ1oeK0kUVw6E+RqyU2tZFAli+UiymTiTEZ5oE7GH01mqlZzjfHr8jqQZRXNBmjHq4o&#xa;543CYEFmizSFitelenVtQSAeDKNyJtYx147M1T8uvaKFsZjrsix/KjuPwIAOSujkBNmBkjpkIg&#xa;G1b3E1LEtcA+HV/8DJNj6B4PhSZEQ24Lq7KVl14Z3y6Oz9e4T3n4QbTm64n/RgP3NdKyj1zYWP&#xa;DSUKlI//FtF6OLrXbtJvjLWe512qH0gVLyXJPVRuq+F1N+4CmJtaSCfPSkcqyS4sbiwo4Q2Y60&#xa;dZ80u+a2JAAe4fOXios4Zf0TurfvsYScZbHVPhrK0EW3xYpqRMXvNdnoXeqYcOps81KlN+ot+I&#xa;p6627NZ7yWYuf7Lpe2D1qjn4eX+rof2vNcVZQuib0kuBpPPCRGqfl5jYgT8u06LJyZM95tRWs3&#xa;zGwqU7INXD/E5Y8wgoaMKvSVcBGDoo7iro0gpgGNAtSpnmMLlJUxNJFwMaJWboG4BiLxSiiidQ&#xa;MZ31dpDDYFcawciVRGRkolorEltL/9UaFqDFZdkHJB4bn76P2AcTB4HUn5BWpFMpkhGLyrHkvt&#xa;lXYS1i61lmHA/40nKxe/5rgxolVkU5pHY+bMwi87iFqVX6iYGDbEkHAI7CKmVQXal6VnX+2oGm&#xa;QWsyoxtMvPpRbZkyQIWBB6FEu2YTGpZJdxXNTf75rJNLnQjbn7G/vc0EaHOmcznz8yBc4aF9mO&#xa;N4UDdetyHbOQyTspCn5K16Vv5k02+y6ibnZYFHGX0cOlaFldvTkiEo2MgFDV71FAr1D7Yv3DAn&#xa;q9/jg1ewg7ByWRct91n44Cn+BYoIJtWLv7e2XqH9lB7YPLpHZZpfzsianCLIjlxZQ8XYb4C2wL&#xa;A2V1Bm75z/oE866bmtiKzg1Svzqki6wkJ8sqynnd8tK+FsdP4FqV/2xVZlZ9D0vesyxC5sstgl&#xa;WMlq10yx2i4onIPqrFjfiQX1HqPz6KNS4vuMN7xc096AjMjm7Q6phGgwZWG/mNd0cMRQjtetja&#xa;VmK/qp+b6xUDhCh/NnlCI0UWyTtk1KZdDqyT3R/WbwU7cSq35M6x9G2QU5EbkqJ1kRTRoKo0Sw&#xa;QuozgKw+gPK3Ca172R4oqMZUsRYz8j4Fk4bvMgejGjq/CQCh9c489TLIQmKuS7/sZI4Ovp3csW&#xa;dzAcV4qUL0Og8UMxo9Dmuhxic0yQ3yv+SLmp+pim/y0h1r+N+STsDhVNygczvYECLeMojZ3HG7&#xa;4Ec7lSFy7rK8mEUJrLfEr97K0zcpZrzF+/8l20YfQzhJsXaVJ7wM4SdWBe0eFrHJolnfGmgiKY&#xa;BgYYKt3QWetxvX6icMyoSzMTL/pb48Oy5zW9AqabW1zUTBM/M7i60we8w3fMgnnN3MHAFiWG0g&#xa;ZmoIlmHqTFd4X1VXSJUtly+wKNfmz1bw/WyoYVF3S17LlsNBa7YGYVzslT/GOyru7UNTOrVjl+&#xa;YzZOynj5taXhEbsZF6wQp0mcfwbW+ffHOzgd7bWcIKt3QCekvB+NmKsF4jafdFx/kDTmuYMUPy&#xa;kDsnWVzG+0pxH0sClnmWp2+cDcnALe3FqUKZSJ2m/4UXzFlZiU2/4Q+7OEiQ/FcpT+xyrIqV0D&#xa;Ar5vX74wI/y7CsX7f65QCg6m/12l/h/NSZaG7t9F6lMBWg5foldYuby5KRr1K2o0Vjk1Q6H1r9&#xa;yl7+i2GYgJ4FHANE/WgLmMR3MbJsGCKzXdgXZvr3KbB862tUsAQChuNsSPG9Aw3e1rceVwBfjx&#xa;5+7s6gviDhSQLM3KoCwKdkoVZ7i57YSH1OGmzTNPhxGXUfAI/WVMoo+eO6l82woyKs9Nhmvq3L&#xa;fcdEW1LKqnIDcmbx1FlSYBviTamgLDMrz8QgfA5wZc14vb240Q5wctsdf5+KIBLxTBSogldkS/&#xa;sJ7LmtbgNACRTt8H2FGf3KqxrJRmR5QcpFxgE6v4x8UFRiFb5DeHZ1BrWoE2aWnxymXwqwmIoq&#xa;x43gIC2qTTySYlGq6jBjToIyApYEA0gC2z1nb8wuIYKQCHFEZyMc1iBTVn136IOsk5eRwqmJla&#xa;/0TsaNHRVvhSfq4mzt96Ne62FsGOlnRlaqaORC7LC6HKUhNlEA6Xo8AKTfvKOKx9XiMkj/OtB1&#xa;o8zZqWSz0lkiQDVaHEdGYZysKSfoTrk+qg4XikYAElgwTL+ODzSOZnoB+EfgQ7+cxKGKIrK5ts&#xa;H86lAbJCGpyHgWhKzzJDkNi+CNsWpg4BJBT2aSnXwKkY9d0cV+EuMSIA3xdzKZOmsp6X68q5jE&#xa;WJbSyRAFISh20+jQYvMKddmV0Gr3q9FbjsKCfOFIPmp/EERVAygKDbB2N8VqlcfnuXAG8XfqNz&#xa;HYCadzV8RquwiwAME7ew1V/EycKcymRRzkdH/m2SGJjb4c5wt4IB1E9zHZg4RSeOrclXZr2G50&#xa;4onPL64BBZMiBiaVTFtVHtqqdYvxt1ocV+NIEaqrKx3s6wwu7jxtDOtFihx6un1NI8fodGqtmx&#xa;00uEmbSylIi0DZaFD49WgIJMKUseV/pYdWatQ7Q7GhqOBrJEVbQGVnTvYZTibg5qt90QPmhv6P&#xa;FyuC8Hk7eUZQJOlmJ6m1tpuBatJxtp8BPx23RM0l1CzBS9QDTGGCbUrLbxB67l/fssyCW45FZ2&#xa;nECr02jmEnhJNEXuy3nclYazBAIcfdA3ouhAHAQ0Zooe6o6TI4+q7SE0gkNNivt9Z1YNNehW3M&#xa;1QEhiW8do7nBP164AIL/wlR4RlirFYy+pg5Zm7j/CFDzUDXf9mRL4/rT0h0xwovdNl59P4I2wY&#xa;AIO7U+3Q930Eo9ElwiQ4NwT2Mi+/AWqorUnt8cOjcgCaHkT8Y6RAWKd6nRTz9/WYc5vhYsJ5IH&#xa;X69e3IScNfnVqBCmx4zTzijcSDtMsarRNuIkq7dRhfWLPYvh94Y2n972MvKN1cn61Eu3yhqHud&#xa;uqSlmuMzVH0YhHtbw/6YvVlTzSe/840fnd1dAtrPkB3rZ0x/yB3gN4rZpUl+EniiMI1WBG8aDB&#xa;GuJTjUzOgO+CT0nUnJgNNBOyWckz/FKIf9sufPvlx6Ku4gJMbpAz+PzdW9IlGmzXrH6cByGkjw&#xa;Gkd9TWau/SnYGXn2V2tV+8MqEZkU0mEXz9sql1j53vPLOh90F90XH5ZjMFMu8T9OAqn+3jJVlF&#xa;8TEEhfUUgrUBoPoFv8wlteDQ76EH9V37sFZs+lHL4YR3raZFG5dVGxX7tSCf1It0YbRJ76Bg0F&#xa;XkMwKq43QyZImqzXf9yvv9+gHztDXyTraUHvg/RSLY6OyafESuymMm/SSNsq0lTsj/h+8TAmjK&#xa;Fw6pR1FP9q4BexRHjFX6TLrW0kjWRd3WsaK0n5PcPgFeGReZBJMBh7nmz0rZQR4vReEb3UIhA6&#xa;vCP1DU7XUn8g9Ed83zXZseyz5zPJ4fDI/SH/hPJYjxa415kJG82CrdvzkmyMYTZTeOPWqJc4LW&#xa;73U3z5+z8ypXx56mOdv5qMBLj/CYQD/hvhf+8/R5TG4ZELIBeqkrLDGEdmpPnOJFMW0ihO/hNV&#xa;BnLBlZUbRjQUJ1Mut/RHb07uFaNhndusZUoKVUdyT3jRXwgPVvoK5zuSBjg67+pxMKT6D4IDbx&#xa;BATfuwTJhHBFNo0uv1rZdrU4F9nB2sRQ+Zh7c4vMN0WDi/GyMpQpFkv8PXBZqs4+nCqDbAhhf+&#xa;ICMZmLHgDQlWiKDTKUuFLsyMP8C14WPpY7iM29ET34MXPQM7BzMM2XlH2SdnQ/ZFCITXXFgob8&#xa;57KTRvqHDlm3N5lgqIkgAmV+dXtAGz2ZqMnebG1uFv1OQf+Rzis410wyPOoYMSR+NCTsjBdY1L&#xa;e8y0gD4ZeR3fwnEbMbFJ9SEvKdnn5fAYiVzwozsJVXySbRKgRUoTfH/to/lE7CvAV7GezhQTB5&#xa;ZGMU8Bgn9jFIw4kj30OMtdspudx49nSUfmm55kknivwAGHonpvDGmguXVnjFu96okX6rn8M58u&#xa;l3iydLnniZM6+GqS5Dyypw4JJmkP7Szk0aziHcOFR9eaR9nPApKacpgbF8ujKSAdduxwUmbFT1&#xa;Z6iJ7UKfTy2BwszcOnD3HWFoushwKQBw3FY6PsB8pQ2V7NcKqzOcJRv5WWP0VP13A9Fiezl4lX&#xa;q7CGiIStYcJ/lLDS7+jLxHMpJOOH6iYWcrOr/+5E2/wcwc+qLajekyCr3qHkJinnuXBbYvNgrz&#xa;HBZizlh1Ki00y8Sda8kG4dnCFOB2nGlC2mdqcHrj8LDVFfMsMTYsU3XmKfXT4nj4cMaCnolpQn&#xa;M085KrjaYgxvpu8VcNhAejgpSqA+YWSKzmtb9yDhLCTEIMEQKYdceh0j5Sg/xCXwU+VIwqqkJr&#xa;OE4Gw5hpQHxrKQMgrkZV/OIcVkTNFKsWZIrXt5xBxxq0dM0bBf6LeDrGTwU1XShGfhxtXLrZbz&#xa;gIV5Sz8j2WZsaFj0NGMdj0rXHu4lxFYbwMV3C6S1NK6/wBnf+ikE3d0XU5ga4Cz7L9h4U5pXUO&#xa;6h1MPOpWLBTLO44qMJwLABRBJhI8J0Gqw0vo9Qf1fvK9FC90+VnKBB+o1ar0ZlwSZs0JeCzSXr&#xa;e9yx7HVOX3LzqxCOpdcOdiDwENu4diIyJP2njvoPvqoqqKtJGtAuoKiJ3iMQzSyensfAkstN+o&#xa;5fVqu4VCm8agUdgtsuBT9ri1MuRviWVE61nDAPU9v128wtQ/qsiKI2REy99A/igdCIJdSuaFIx&#xa;XCETnAvAzWb3kecFlcOM3Yw3DOkHK+O2G8uH5XIA57HCOY+VpuRbpCeAuUlY0ahcNfWUYS/riu&#xa;Rpdo9XaocIBTFptiNaUIo4WF5nHXlTXE2E1DX04wyMJRzfUyTDe3pOCCM0BjYU8R4Sn2eGyBG7&#xa;3NFTyjtQVM7xOBYR6Zdsz3YXs+8+D5I2GJjE45cnYVKMOClI8t2gxuAbAYmvcU71qpLTl8+IQ/&#xa;lugrkkBkMDj6pyxd6G+dqZySwdqd7A0U2CCTufG/RetWb5jjDp1HxbpTuIR+NgxtpCT1euV2aG&#xa;XaY5cXUcaL3HeBmSSMYP4HQx9EUklmcjdlWkYGg3Qdj8VpwQH86Kak7gnxDoKl7PdyoauS6xxq&#xa;imMixq+vjTV8D18zQ1IfFKeyRlOCxvMAPT9ITLYpGQr/g0czj18xpc0f0/HiEBI+mqNiG+fJmE&#xa;/Z/AKNt/Y3RBA/1zijmORYzxHyZM4IY9o9ypJG5lVI6Os8DDBduYBZwAyxdlzR4VOpH3aWhKyZ&#xa;n1KGcw1u/iW2x6zdCze5L+Co+qP5OSYJrj9zK1ubX5T47G7EIB906sDBhjoadUrf7DhC3+MuFu&#xa;FVpsxp5t9OcxiU16noOI7WF0ZmAyzQ5Xw11ZvpFi0dxnTCAuUEFSrkiONZOD9kAtl4K22Wbyeu&#xa;FLSxvxcAhGpA7QzsaY6FYe250PPDMQOwQJbKRW8Feb/QSuQGkk2rL0xny3QaGwOL9oFckkjVLx&#xa;K33KCznWBocXkqhq5zlutVlxpEQbn6UiD/yo3PHLs+kvPt2YLJ1ZCh+KHCokkNU3jiElj7V6hp&#xa;aUPE4I8zByfHWfmDxugcHfjcr05gwpTzBGSu3tqBd7OyuBGxmFhpQfC/UkB0a8OupitUE7vUDm&#xa;piO2xlx5cXQmy5UIIINpVwbJqYKuGfBy4g8pulk5yZWaHuM3OxmurHhhQ6LMPAGmveecxOlAsl&#xa;gVUVugXlgSFGfSF8g3mHZ0G6ncbkKomakZakjwjS7yTFSsy04g4o8a1W/hIyGW3fyNPLCIgAUl&#xa;p7DFcKVDt53SCDKuIcd9L62G4loZ+z+d40UShn3Uyu7omd9n5CyKTaH9H80Hqe1b7U1wDUDSGL&#xa;+5xO+1f195ZJJy2kKWhFc1SNT1MymwNlIOlfdByQR3Y9VUcAVxYpNiZtWZqVuY6nC5DIn9UhFy&#xa;jVWGDbxc65ow0cR295pDAVSo/uTrjvAe7QVzppTOeni1S63sEjC2LGDTKPE2k20+mj9SY94fRo&#xa;zSXVro5ZxnjoKjZW0dqVXnMFWvjZl5QSE0AK230qOlL86EUa5Ca2Kj4mUhwlarMKTkvTYcyBkT&#xa;rD1Gx+IhFGCrOiHs/dOEvf7LhB/VQv4y4UrAiUZs79I/TXiU6Bc+Tg3rZHt/fUnnDnodLAs6dv&#xa;OIMw+G0S12mKpbfGMzHojtQSJVFYgWboH/pI1wvvowEhNVbRQUK9EXBYRJjTdM/F092aHheFeG&#xa;eFeB6u3MjTNOC6GHcAWKC041W3nIvKd9Fhrki7FqjcFDPZBk0+ynPn75FDv1p61hENQN5RS8dN&#xa;hrYIC4dqF9c4FilR9sXO70HiIR5BbVqm+S3BfRF5W33sTmkOnzMBmqfwkZm4DACii8qEcitUhi&#xa;QL1fbSZ7W6srG24UjqDs5HN+teWzGS9NFNk9axTtVPaby2yIyPxmFlyNS4qUL4/itfVFvtyW03&#xa;tTHOB6lVEvjx72ywCuefYVw08/jy4vJttOdsWLNv382PenPpTiYvMi5V3Pd0Xdi8Wc/egA3kZK&#xa;GohaNKZdCq+kmfXxFVmf2wsM70hPB1ZPBGmr75Ak9r+y9jelYVk2yoY7eB789AmQfkVtkyBKzJ&#xa;QRkSqX070AHul3W6nukinu6fMcwH54Yi0vN1p//zNHTSIGuznAea8iKZzPdQJm+0DsWvPlXKIH&#xa;Km6H/mP45bv3CU0TLrQcZdixZFilxEwy2cYNxeapTxIUr0z73LKVt4xh+lEkw26VW/bCQ/ZC7/&#xa;zvLx/c5fLoQVxExOdInYRSjLvxhC8odfuoEpiXJCknnlESNPr9vAVpbyNu9KQ92wHxYGUJuNm5&#xa;4n3s5ewPLtsOOZqI5Y4qsWd8GQtPJ6qNhLebqu1JSRjJ97mHsHKP3qZfm88Gt74jKb/PkYUp88&#xa;f7/hwTyVX4IxbgzRMW1xra1jMjd0Yq8J4ADyQUNewfFo1lFpQpbrk0iVH5HMQdWc/OFc4zr+hr&#xa;MXB+v/WVLvxQmKJTmb3uSlE7+Efc/pWDIeh/zoTZ/xPhNn+b8G9OGHiCYj5UqT7MJlxZwhn0RI&#xa;Gf+cjrERDlwcUqjU5S9vF5Rt8sKIk/wX+EbdWpR7j/Rb7lW063sqMp+IDEAEj/Nheio0y/y+63&#xa;zP2rH/4fBL1vzzFG9KoHyU2mztlT2O1Tkc1Gh+zdGHQLnDLlk1hRqA746BHsoPIMX7mvJmFqcq&#xa;CVDYVlta74qVYq1EB4UaC2NNZoXflSVaOF2ZKbru7RiY/eESUkIzufDrZ3em1NOyM8Voy0gghe&#xa;3xv5iCNFtr4qpzpn2VuFTSP/L672IiEJXtFI2g0Yap9nxsjOCflqrBcIUc2JenVdOnPrcrPJU7&#xa;MgkrSHLiKmZep68+MTIMOLbMhX8dRp5lpJ+KqE9OpVVXhVAavX82eLpBGA6zDtxlRpk45Cw0uj&#xa;VbnYsiVf3W5OxrDfr3OGesUrXlSkrrAx6O2voO0yZ5l9DLEZJrJgTvRMyWHu2+4B5PqK9EFHsr&#xa;ceCHE5N/So9slJ7SzoEl3W4NhAQCMWREwHuYAssFUmbgEeaGDYTt45jEzeLGXuZEgDT8q4B4sK&#xa;D7IwVhSJuGRoxrHPjuETfDbSsxtGnoMHi46Pwk+lV5c3kdWvQpmjFsX73Td/VuRntlJcrmsG0h&#xa;MspYt4ZlwbzDAo+S5CyS3Zd7d/QZ2Ql+PJNaG+JwX9+QBPEdWxku1SGC62LN9Hbj+e+kXaZ58c&#xa;0UVcdb3WotmOkb5Y9vQbf1twLPZU5BhXoslYS9xHgwZzUFSUlW9lLpq+yC8PnN0SBlWYHGbqN0&#xa;7XyHf39xEKtJIaH8gcY4Uh+nr7bYlyWExHWfwNqr7hiMkHXkfo+P5iF4lVgY3I/Lr80ZPwjLFu&#xa;ZhGomyTRau71hfuIeQoe+W57W8IFXTxCJYznEKNWQsHDwOHRrZsM5KbhdNO9XVnPQuJQCpIBpj&#xa;LOLP7G4OEadoonAt8r2vS5ZVZYJQzfGHGSAFLQIBp0Uq9Z4i+la2TDMPqKBeF3saMBA7RmxQEm&#xa;4PhSU4PHmtvxEbUw6nJveFect8xQ2a3jUi6X1+KCGJIWKvgijLrLzWhn+04Vb0P6FNbpWcXGvf&#xa;sr1m/y2/Si2aHGarx8MGwe9SRWWctiEFmJ2RGBfi5qSOFMubJxnIvEb/rbDp1ok2ApGGVDO/FS&#xa;OmId/hmKyK8FV0/HEivaaOvkARz1kbmhEgkaSMjkTLk/kPz28kytj7kZEWNb7lvI4QRNcnsOdm&#xa;IVQM2WcqgQM6GcN8nHu2w+eCknchObedq9aTDXxBcqFnfEhPM6ljWxxIeh/XWz+4rYK+L/i7Z7&#xa;/LL7e9MHX07hlG3btm3bts1Uyq5K2VbKtq2Ubdt25pPk2z3dPb/uNbPW9LPzF+z79b7Ote/N9A&#xa;BTBV4byH9MA5khBn6uLwKeK/LL85TFsgiDMIr7WfEL4WpP7GwjOF//lzBvDeV7VDXcoKQHB52g&#xa;HuCAuliDVu7JYzFUz+FRtYH0wuqwIo7aZTo7nHAS/GgS7+9snefDYa8IdrvJKTtR6K4MrZHw/d&#xa;/wp5PX+7OySlpSZDtFSpY3+t+dHjEvi9xuVmISEoEKhU48gsOCNL2kqNTp9QYMsePidzQ4cpCn&#xa;SDfTqQaZW84pQI9h6X+FJHEKvZ2CQ4/vCNxyqrnzOL/a76SZd3jclFB8BNthuSu+JOAc6hF1fL&#xa;G9BB8b39fyDkFC7JhJNJiidpFQ4RS04VRpib2BpbzWfg0ZEeltEs77K98hBJbTyX/ku/a/Il+2&#xa;/z4DxgLBAg6mkoL5oUVSyooBvlbcvw8UaEiWLZN7X9y5sjo+dcy9gFZbpZd9qvUhW9X0NgFAMH&#xa;Ex1J+cOK+n31p5W3ub2Pr1/srtb/fe40DD+3P8QLHXk+pimY1dV3yfhg9/Sl0KvP/gKAtEf2Mk&#xa;Q7REB7FDHNjYIhsphrk5jgrrUYXq4oqi1PDYYUBljKTfskBJDlwr36h9kUY+64ANfb+lxkpxvM&#xa;ZX97y/C6p/ssRfGaHgmhAIE46EiXkocyewjYFReLerKZoIluoU0wrWUu4b04J56wB563bT6BtG&#xa;+q7pkgMtsy7L2AGh96yhhJnQ1DB55P6K0/l8Gd0K9QuPJ4Ykc41jSFtCsm3rB+CDkEGYZKd01Q&#xa;mwtqu8Los9aLTo9OKPAFFUTj3jRoujHeedcD9emKPFWMhzLhAZAenGhLOOUtyUGWLWUBa2Cw6r&#xa;PVMTXPHEILJhWT4xnfGiH5Qvw7qfFTE+GCcLVaLMdIwdyDx/ZIrzK+FW02Ff0SrsZxxM7e20M6&#xa;lAL3AA3SAWUmn1sGADI4tUr+alHopcOIy7oHB79xLh3wwYUQsXXBzD6l8ZcNt0ZT6yOCZXTjCr&#xa;NXT5Phxdi44VACUKyVRcED7QjKueVPh6jp1KzHHOFXvpGium/HgQKn9q9TN3D6XVkJpD0iaLOQ&#xa;LVzzA+j5RRD5ZPgej+w0N3kLKjF6H2OOqnNVfBXF8aO1lEIki+d5QSgstSNipee1/NeEJMqm4G&#xa;yP6N6rw0RDapefy8ZvWW2MjqGXGImpSxa5l6s4k3n6cceL/feU+Lpy6sDzMsMUc1USAMQNtUWA&#xa;3cGj4Lf2eHtSNamilPEzbaIj7aIY2wduUkdxt6wQm8jF9bjpQt13btvWWGIcQRVd3xp3sHtGp/&#xa;Owc5+2YBX2TG2fDQZlncPluSK9nGKeIyEjt4iVZlBtuL3Oh3a9ViTXWNx0T2TCI1whCQfjRNuR&#xa;IiGTxQxzK5+EU349TiTUjnsekEjzHHnMWebN2c85FjLrZnC5QJq1R/yhfRlQsvvyVoO54ZQz9V&#xa;IXk6cmPNYP/yHV+MeARnQHvOdz1w/FKNHkVY5hY6RT8RZ9KogOwr+cLLktvV23rX/ZfhD1qfpm&#xa;AgPznTr4cCxT9SH9PVpzj2yc0hpZseS3VKrUslf54Ri1E+201osPHrp2VtE8U16N0K7lfUiQYA&#xa;r7mZ6HOzPaSyicwEpYjL5USX2GImKUn4ZLmFsZfJpzOrfZ/LjZpWFd4XbKAkusLOlUy6EJviXo&#xa;bYeCu2QQY3KlyKumjwE9VPOZEqLTA/Y3LLCiNb4740fspDbqxsHH2nX17T8j4g9zTeZquUhAY+&#xa;74v0kNQjvX9kepzJ9vEO3iTazADoCSthaQiGZZiQt7pnCkW5HN9Uwfl+VX8DJSH28BdGdDkOlU&#xa;w8lfqM6pTmOBztMMX0HcfQGMDfHHxgrcRa7maRgvwewH4D2zmvGEeRJQ1ic0NwXwVyPpj7j3xZ&#xa;fsv39T/KV3RajWj98a98z8h0T85IeIvof94NJl8vQsifislbbZ/I+X8CFsgiCDNhEOAg9ODJUh&#xa;wUY9/DNJwwCyLdv4838AsVJNLtZdVO8O6vpsTp3wuM+s9LwsbOVGxTLaS/cl43b1F/UeX4Meya&#xa;LXv69kCpBe99RbkxNgYt7aXgDE72xsMEzH2/a18TSul3QjiQiie5KW7KqFDyNV+AF1dEYn3wXX&#xa;9Z7Azpj3zxBfWHhvvhaxnEitmvDLP/kS/XyBp+wf8oX16m49X/Pfmy/8/ybSgC1wpeJkIqRZIq&#xa;sthjaIUS7gdMygi8f/lE6DYuR7m4vRmtOrA/VZrKwiSgBIV5dzrim+R8W/d94hz9e34/3eD2P6&#xa;xTNV+AR97ZTLIAqjiLG0vvKkVqmxSVcPnMk597Bf/eByJGwhCuMEo7PHRrKsNKspnk/o5ghsFQ&#xa;KaVGPKzaaGbuS11uxvHKNSXnGKiN0uKyPTMwveDvu+Bs2OIg44SkBclHIBhCPfqe3vbDS3JDX7&#xa;PgonZ+hhacSQszXWVHTuDltX3i7s9lIMaQmKDfl4EOysps5bFNEwiz4Dvw6dUp6+ywVkC1b1Mi&#xa;RCMYMowNYjHSh12F3S8Z1qEkmA3IOcrniYTN8/uyMrUq0VxC5TWSpVxgyZXHe1tf1q1N7BN83b&#xa;a+exyL6YhBomO8yicpWykKAjqZiDyEez0bsoivpAGI5qrNmGK3v6QVBlS0Zyo419PZwhzaSIXv&#xa;KTiErRW3PaR3600iyoMkfxocwxVK93kDDI0iTZIBiUL88UxVBIMMHmSPJCbHm0YZO4cnIzAB+A&#xa;MLagCCcYRZytHlvNG+MlO7H9SqQlhmFnncz16dDdWAYSXYdhuts1BXUcQt0XKPOWwUmZHCbSqP&#xa;5A5dU6Z7JPgHHVwcqN7u7LwgRfg19xjWuONWSoxhW0xjAkv4rAFDwfp7WHOntZ0+o/xCu+kE6e&#xa;ewnY7SqDYc5m/BOJmNAZL7JjLbxuAXxwgRHcNxPLZpUs9Bgivdeer7zQnidGlcvhvUzyjMTMXf&#xa;n0DwC8sM4JoHen2RfISsK7a6uCSgM2hTTUu60AeR0wdPwrHHujhEvowecC0FGJ+IDV4gXaDps7&#xa;PDn1WCw5dCB/QxrEvgOffu7V+9RoevGsPW3VyT8igp9AQg7KbMZ0ziafXtLaXHP8F9c0eVPbHG&#xa;FC2F5hvuiPMfcrgBEyJ1wDQtROEZQCcaVz0lEMx3Nq6GWiPfRe83Pltd4b7ginJOJAgvvxrQk+&#xa;AlPVLzZLFXyhRdmBWF10D4Ld/6RxO1jeulC8+NbefGB1S7F+7OOz2kyLbKuaEgw9R84FSIf+Qr&#xa;a5E8/o9833SF/8hXtX6AAH0ivejG2yvJOEwiXEHfVqyQmOQf+RL+la/IvO5v+aLVReZFikX+I1&#xa;8y+lx3eN6C7y5m2//IN4btga0okr+guvlkJ9auv8lSBhlsOvC/yHckC+qa4bd8Cf/IN5TA7Et+&#xa;+M69/PGaKNcdTFXwH/kCQn/Ld+CPfK1YLIsxECtanh3RCf388UusYXxC4OPuay+n1TUaEdU2h2&#xa;8QhEIhx/gCLi5aCtBV97NItBGtM7uIkneHjNoxOJEk+bAkH4ltX1f0yU+JW8K1/UIS/OY/7+n4&#xa;okL8BKS94N3ds42ocjzD3WrbQ1eK3pllTH/LN+O3fC29g1ODLH/Ll19vwhQ7bnZGxKWWIFu6g1&#xa;U1wt5hRRViGlf3FXacOehxAQYlJT/v3rni/PnwfquPferlJl5e8RUmi+Uy/5acc6JDxAX+dQIm&#xa;MWWk8RVASuRRQNhbpW6RUOrUt+z04xpvD1tpu/k+Oi48wDZF6G8/T8iCUv5/T74c/wf50gXmq9&#xa;haY7OAsUSgqySiKTVKKFgzQDfJho5++7f2Q+fq/3v5Cj9/25FoG6FOYvyP8kWfUh//l3xXRjJI&#xa;S5RQ31NBhqbZaHHM3fhUmc5PVFa3FBWGp/fCThIlQ0QLtCT/ka9V+yLg3+RrpDhVYyp7/vGPfJ&#xa;v+Xb6PJExL0Zr9X1wNb7nC39oXI1lKLUxK2Qs5wcfmsw+QcnYD1siuzC3C1XX6GydcRktVQi4o&#xa;QwnToHjxc6i+m4/XKlO3mVTv3+0bsvzsIcPAktNqOoBjAAT1AL4HFZyOMTYMlbRmsEkVVRzcCh&#xa;ICpNTt88+0OJoInshO1CX4G20kPJcj3FARbYyX2wlldDlhbY8V/u/2g0lYm2h533TKX/keZJWN&#xa;D9b8le9ZIDPL4b/L9/SPfJ22fssX7498LWwG9FwYWaT/yvdP+6G5e4n4r3yx/lP7wctRYlAQx4&#xa;zjmaZCU1nD1N1i80DJuMYgkZIbOobJophZmQ2M37feKpFNpxkKdthBRxRfDsFX7SkU50/7QfJv&#xa;+wFGGXARHv6n/YDfY00lt+P6p/2gvYBJDW0+mUqjCB12ySglOK3LneJ5Dt1fJcNpZOYKHTesPk&#xa;OB6ZGcKalk3umHTWpdHYvBRRHd+ENvJf7iZZ8TNeq5FnSviZX1+idL1G5HBICOwSYZVhO5gtvF&#xa;Lyh06RqNbjTIjJWlQJStzzRkQKwkMIBaZdy09NOGM0kjtMl6b0+sn4NMRWeQdesGWgX2ajtz3S&#xa;PllcauChe73Uoofk1lMc3JWtzAex0l06rRbHUfXipGp5zxT+bb+a/Ml23UiUv1T+YL+zvzFf7u&#xa;RTxB2T8zoBzz1gDxeP5qKi62VNMrXmAg1k8iM0o/Znd19zvzDf+3zJf6T+bb+yfzvYm6p/LQH+&#xa;SBs/6T+Yb+K/PVOPUj+p35fsn+uv414j+2H+b07k4xQ9/3Ab/bDwl/2w/G87/bD5jjh0flzAk6&#xa;YPEx0nxhmb/bDxb/3n6g/Ff7oeFv+0E01KPgtZDTOIkDdgxSl1UET0Sb6LYLWEtlxe6+I1DteJ&#xa;PdNIMCgbiTzSbvgfq1TUZdCJSXO7nmQ4RlZcMZn/sxq/SqVP7wa29VzCs1/yg2aLOlrBKkAbfe&#xa;gPQtVV5zSm3G4/4a9T3azabJNVf8bA+00DoR92jnHopRg3js0+NxVucGfFzUNvCj6HTBFbliGf&#xa;sLsxvtbtifzJfe0OG/Zr497PezAoL5FF5Aa7yQvtRAbwz7wCYcsr/bD8B/2w9Q/+f2Q/y/tR+c&#xa;/0P7IcQKeZBhEhwyFKTaOyGypVTcT4SmNag2uH3EtA0/T1Mq5frR4xDPaSNyhN4j10TgtLB42E&#xa;LZIclK9gPn+ez+X+0H8wSvEj7ZM7/f7QfNf2s/NIuTGZT/bj9A/mk/LP2H9kNJ4N/2Q2UD3W4g&#xa;/6jBPuI9qQ/LLcLdnonXGd4hxYF+xbeOA8Z0FKsmLp8z0mH6qRSR1av9DiJU2C1vSdXPP5feLf&#xa;fW/xczX87/3H6QQ+JikAElEYiktWItIvxWnGtra6koQT9L0sCWKKW4x8BJ+Je+px8z5l8Dr5ap&#xa;RNvL+FYa32V1T/mY+0lNDRT1J11zPnzfuO6e+Ls/4LZpfYYd2LQPmnhNHbNH00N6WYcbil274i&#xa;kWUsbK+sl/Mm21UViyzlVpvweADSHkNMs4e7IqK0e/yCy2/5XvS5QYfLnVxuSzktqGw71odusk&#xa;rN333dvFSLKQSYjzuU3kEGLvuIRpmWtgMMzX+BdwV80HiY1M7dy9758b4tAmDUw4WnRqDxHCEi&#xa;9ZQ+uHqHaOwnvEgAuoNUVc3fFFlbVsBioyYSp8C4LqeYlGO6w0Wk0v+iSpwrw4U4MnyOt4u+NJ&#xa;in4LoCn/BAO1jzkAbrjnpcmCVmUpt89EncrtkkPdV7bUjCuf6H3b+CkbPhJxlzxtMUhxDDncMO&#xa;VfDQEcXiYi1xEB/WFN02d7AMSSsjXA0d0v6oIR5Zl4TfcWVsO4/lGpkGU7h5DF+J6bpv2pOkoZ&#xa;KGWuQKOH/I6gBIDuN7lEhwhCGb7Cc2kIMwl+JaZ4CWbAxdFcvtmJ9ORzWX/wgIamLhExCYBpJH&#xa;1wdLvDDnlkdP88O03T/V5LLAzRCsLcJHMIgbcau6xRazq6rVKhtilirxkTQp+qB2lS0WKAsT86&#xa;8GC99/QIV8di0FPHBPLERM9H26TMKo36VCe6hp65IS6Svfz82YyPO9lqGXVOa93uS+GtrKExpH&#xa;GhLIn7TGU7iLtKczaGF4Uct3Grq6jlDE1ZL3Ike9AcsoID6pLJ/Q5Xv6FiAPd8Mai2GENcANQ6&#xa;wrcRSgvhdokPEOHb3A+BPlkI04SyJVk6cvfaC36PQMVrYLvxluD8Eo/IsgDuFiK6UnURZC3jgu&#xa;MNYEkrZtH63XMbrw0oelfsV+lwp7p2wsjImCLsOzvuiNX1NIaGdLvSAENmvvw26Nk+B7rWUF/v&#xa;g5o3O5F5DutSR3i9gLJtPDPRU4t5UH29RrBPobu7PgSLMgu/OyaqUqpnBGYiUDSMmIs9eShWzE&#xa;gJ6mcw0t74gE3UROeqy6kgGt+RdJUpbXO9rgLu0maEXtOIuy7eFCzhZDqRAlbJqQark3ybkgEB&#xa;U6GHkg36UunPLtpqbJ+6Lo5h2l+FR03iRlrNrlwYzIA5xwJ50SIZhPSD1+9zTRdlhAqjwYm5qv&#xa;UyG5UWi7TR+nPWOML7iZAPV8JhDaED5OAWKaK+M++8XAjOT/u2Ut/M4iMLEoZUVzcEU/WAebE5&#xa;vBjjpeB5hmp7I2V5ZX/M0h9fWLa9JbwZeggYRxD4F3igVodXg1fqDUO1IZezW6A6qYPwyJTMR/&#xa;qE4Qvws7KgQ+YzIEgDSjKy8+3JMl8xO88wKCZF2NSxMexaVntWLrRrCb/pMyL1Yn0SBBv6CBaA&#xa;PNI7BRQFKfpIRgqD4Xy7jL90szxokjhyGCX9eU2HuY+IU6QpIRpusCl+hyC0BjlG1gd6NYDLW9&#xa;m3jDIKrZtigdaGoo6uPfxMJ3trJ1tXfUKd8+GNUg1Z17LLjPPUmC1VufehcSzOUsIWp+8dNurz&#xa;irk6cAJRbHYby5CmN7zBmvKPpE8j+MR1+mgj+BdaqukvQyDjlGpFzvfyw2olEKjo9beDMuQE1M&#xa;/nSlLHEbVeoKiYaxVOGe9Z9TP9fHxuKqrpXxCefgl9iT5j+Cz80moeZmtA+QQWyXw/7xf0tr+d&#xa;BBGQNYWYVLre97zqGoweNUVp253HKUQE3eWqS/Hxp4XmeSFZi//POez5P57DuP/9Ofyvk1YLyi&#xa;dxoZHfPHnCJNVmKwUMQlERNEhSyGAZVEIIDWk0gAQhMIljwkdSjIzZ0QxkVynl1PrCSDdbbVqt&#xa;3aJhNSIXISqixbpy6rGz6XHlkXervLGxsXKjgvoj5+qNLC0IE2Q/5SqzPdN7qvUp0/uSk93zZW&#xa;44myQ/+B1pbn6VjxbvKsxSy9SWBWkGJNzCRllibYfAbKx7pHtDH/NR3It6rUkviO+LZlrxw1D+&#xa;zAV39GOjF+eKtTkVDvtPnsDk0RUlZz1zZV1x4oRZHsdVVJnLoceh4pCYy8Pi5GK4YhpatMihXR&#xa;nm03ZrK+uztbV27VNurLXTtqVF9/mmxqbFJbcGW4M6Wwtr0NZ6EoToAWTSu7SI6JW3j/CuMda8&#xa;TS5ahNOn0F7CbpLsa3Khb6s1/Hj2EfciaR0/ZzTsTQmw5l/fA2+knHUZK8kBeUIzEgcUtEPcbe&#xa;2MwtK0yPZmY5dLSH6d2N7LmW3EtKNwUaNamBFBSObMqEl4ncetGanQUl6NIpX8OHbwpA3pGhOx&#xa;lbdJk7z8nQaB30VK9csB/nxwr2P7Pah26WJ46JoWXAmNLpdk7KhzAPSVYxUyVY2GM2l7zIQVZS&#xa;72wHk7riyzMR3zlh9xEXWKXOPQzoTFEcjxY4L1abeFnpXJGviRcBa1YMns3BtqOBv7xUrp3MGH&#xa;cUuynIm0RonCW+FdcRJbmb02tUeLfr+AGng5EO7JG2bkAFRSulcQleKRlt+BCu9H7WRdZ4S0SM&#xa;5MgNFqkEY3GibijDjv47+ZSz6J6G18c2Dhw5hD44AEycoy67XUmpVq7ps+oEKvJEmdqdtLp7qw&#xa;oyuw0hSHBXgyVLEONESSY11iKGP8XAbg+tYew/1aZHAryx41rWjkWy7v9RouTSeCqlSP5IT8sl&#xa;67gY83v+rlgCGdoRTMGE7wk7NhUlR2fsJkCxGa7DVznmtyo4HcKE+iOnCRmZYjeabxi1Het4H0&#xa;LChZCquAz29BkMBTDKxVpEpZc6nAdhyPZFgluZwJCdKkrIXzrvOC2Lrzchyz1jGk9kZHQKvEvQ&#xa;xDqouWvJ+9DvmgtriMX0k2kaN7bXuvOI55PAYqZyw07sTZxJrE6Ee3BdnaLZmzrvLpXqM0KlUn&#xa;tRu+9uDPaRWEv0Z++TAs5hw2Z04ty6BLZH02pcoAavenAYYDlsOBZsQhf2gdtcwcjVxPlPZUgo&#xa;aRbAJK8acEWZcpOYYjMAVVzvyWYTR00nfS8KZday5zJz//xGnBfb7AIJ1mdI8RAcQJ4gS+38vc&#xa;g7gbQCXrzUdXQj0A7pNseUNy5IOTsK/4xHlMha5LG8pyoFLBqHKcOzWquZw5tnw+O9XnSteW/H&#xa;lBwknvMo0eoz3exv6SH1lVQs+Y5ewTc+LxMa4uksA+oncEQ4GQC6ngqPsYHKDVDFG9U/g11DZD&#xa;rSyjNMOOGXBlLaRzTJZiqNU+XNGq2QR+NCTrjlWojz5LBDzYAvv6fjNjaxkm+rZkLEHCWG9VnN&#xa;AFlULKZqzjLyMtHct3OtzcYz/nbvLtCXLuB0gxo+yXoyEFhlLRAUI5A99uBE+wbTU6MNPyRRjC&#xa;JuvoC988vMBDb5m7GNNLySmybObFPXiLcZx7BB4bik00mAe7RXvvzPVQy+rIx2k+dsrCsU3eCF&#xa;2okN3dpkANL5LjWHDxag92XIbjUNEWZbAJBIdTSa1toi+8O/nkg4/yVu9GX3gP8vtdmiAd0/3n&#xa;wCdM0pXaHWWVbd0vhmAzTrPuOxqyCbdlgL1UlIgMkv1XQA4JShM+zr+BgU7nqK0UvCBvI1YHjW&#xa;+wkanAgEFxH/O73IWRc+XvBpOnihe3E1Z6vof50YS85BCJ/vBvBekAGQNLjG1XOaOHsgANKf9l&#xa;f1KJwCAfFC6oV8mJElqSrurlJ7aGIxPUlyQEsdid/wtx8Rd1s/MA/toKUgRAaPSXuHPRyy/TUy&#xa;ngO3AahG3kGgV/vFsatBqRHiXgcTAadAVSg2D/JBA1qOnGBi2BRn8sYGuweehSZAX6XMEeLWBI&#xa;KAddnO9GCf7OJDH9btyY6IuJHlYOHOHSYy4Gc5ujNkc0NkBn7ktcwD9BtORmpVI4li92MxOabo&#xa;vgJp0du2q/VoKsglWgO1T5w4KsgrtALlMYzEkyaR9uK+vw7BUG615uz+n4tEXRy13pIhqaOvi1&#xa;AMc6uSHJGcPpgAXc9w+rbPq8i6MyUu75mNmylzhLbZoUMp22wGzIGHnQeX8HcsRUjtk3oPwhr7&#xa;kKRiLMNIDKIx9VOiv7ogK0NAaTKhXLbutyLaTjJqkYXei8MMM+vb43JbzRkZrS4oFIz0qG53za&#xa;gWOJzVUWx0KuniARkpRk3RiGFtgUuDyiHHO5eJUSlk2OXrQB9aUfZd2R1pW4JMVsmXXUZiNv5P&#xa;GYDTbad2Y7aGKQp2DY9YYIOYlUdhdDzkSMvXrnlbIjHXvb14u5uFhSPP6y0Sieh+ZOgZ39lrPP&#xa;eyMojvYOpCZlXN7tpg3ZBtXPVqOcx+D8Gp5lh4PhIBlsiJ87M50Jr1h9Be9CMqooyG6z58LoEz&#xa;fMdLazhgMjYBV9IoffvithKiOuupBEarBjZTDLhy/mekxA4yue413rrZbhDq2d01ktvv5xMaWY&#xa;JTWPQrgjdYw3+YkeAeHDy0lqz0oPDbKcGITV3Ps3PvKnXsqHIKLedIcWOHR7fWEKtC+9otcUoG&#xa;1zTkw4Sm5EVsWlciHVdRDCa1k8QJJv34uDIfq4s3CEr5PC2IIK/AC9bKuGAqwURF8cd11cTkdp&#xa;9ImiSJcPpAWR5M8BBR6cqcFE+RjkxD8dwPJ3avRapeDDEmK/yCKS6wfeIH7lh9CFEao5nq6WLo&#xa;SEpoqe0TietSDZgT+bnB4N+4ULquFDFFWrP7D87dpgfVRfrL7VgnwLKOktsFexehXR9TY6ZPrC&#xa;1y/tw6xADRtWvNZP5OTRX7EDlo+lqptwEGn57RiOfMtOZ/0hdd1i2fa1df9ermsutYqMZ/rI/Z&#xa;Y9brPgKzKcFgUD1fMGAjSLLGItGO+D620zgStP6+5Vz+qsZY6lpCVEdRql4vzwSa1MSUZgRXjv&#xa;xtQ+940kzntP0Jx1S2fDEAXaL150/pGt0D3eISjnazx0fpkc17tOHpK6i4RTIsmo4JKMp7lHGx&#xa;lnID/2u0DkmBvG+nnJV3S52W6L+M/BhHv6tMKvJyQf42Qn+nBr1Qs5iLfpwoiVrjVfy9HO4mgk&#xa;srMKFI7IvtKQuNYzfhHDXV7cxWc4y4YNOWQP3iVkmRchmgmyS2m5XJfdRptTrcw7tYqFGwLREq&#xa;aomMGUaLUJuoted23jiZaYJfes6AgJI587s6vPJubYIoUn5xIzAPbp3LfrWRopL2+IHE4KhZnQ&#xa;llEOf7Gcb/JP0EWKNOQqGvT2l7u7LGHWpu7YiFWSFDVvZRpXd4sbo1ExvVt+VAweXnyp+cx8ie&#xa;rYNygmGjswJ7Ud4hlRtMBTHVujk7ojRA2g0fKv6z2jcjJQHcEeE7PYObwEbWgB19GmTiTtgjb9&#xa;YU+vilNIBRM9PUZX3fwOVMlHEd6Dx1XIL8pLfsU/IN4TEIY7z0AlTEfZBmCWnPKSwUylKk0+dW&#xa;nFIP0+JGT9YzUuRFUiIbjriwjEGZL2d9tULZRIdUvviEnc4kkibfMXBt2ayGJVCu0J3W3D1bZI&#xa;nCbCOk33mTZoUqDRwGcWH95nL19TKQl0bf0xvdVi9UelXxrGSRvG8jt7te5qFIhR0bvYDJgnuU&#xa;Kty0e8ElA/5JbDLE3egpI5LL6o34m7TCKmZ7VRQjetiJn3ikiVRpjNsI4YD7MdfyqSbsgHvjZJ&#xa;SLKNBFzFF7bVwfdfFxuF9m8WtqUPSowlZXU5HSj5pLyMPc4ltZUSu7imGCnSmH45xtLVOGPw9Q&#xa;uqWsKGn06Bn1W3naeCcCWG2Ay6MvNpjpI1CKCqL1znkmk2hmbkBqyaIp1qew0z+Aq31UQft42X&#xa;aIwltfuONVNN0HYtSVngz65d3VFuPSwPufLkuvMcK3dd1Za4AOaI2yVWpN/cE7xT4S6LKwj95o&#xa;yXaA2yvzQ59top37RL/pD4cZke5lmq4wkox+598jhF401bzxfm2kLkyrTx0LL3d5gymKg3No4C&#xa;aSur49E89ps8GlXSk0DqDtNqvUUK6Yi6+iJua5ZmyUHgC16YH2/yEbp3qnNwzTH9SqUFi+zqlT&#xa;lm3X+vLz9jfezs5oUTcmJPoe63e8cxlpQTsDd13ZkdY62u2tRlLyf/iOAGfkQ1+nSEoSMgLqYd&#xa;QtE+JipcM07opCZ7I8OpUvVuJLOiaheLXeAH1XouH1c5furY7L4CFHLy06Sf4UPLHjnKbGOW4Z&#xa;AW8gnbx14eQaF1YX+im8vy4hPt7hNui5u8dGPLeAJ/1pJ9OCHw0t03O5Px4hOx0elAHuPW3OcK&#xa;V7r9K7BlmdsvrqpJ1dZsnYZP2MqhqkPPW7HGjLPRs/v9GKunKz55u9ZbeAcf/C3+OWv2rXm7T7&#xa;ALP/9e5EZthjLdwQKBdvxiC/WHUowHxH2mpB8RZAsoF2XFbgtQqx8Yfb4BV3OAVVnn9BM53S3j&#xa;CN6f8+3lQvqTIr76hUyqqF7QrTqmj8AaZNdKK2R4mVnZfXIu5jDR0j2JKPXbOHPQHEsMMJPybC&#xa;gk7JZLkpBq+5RIvSg7JWYoFRJg1Cjp/xCKnCTVk8dpWNoR+DCNq7h/f0FB9ZwSzWwuKFa8517F&#xa;jDneOceKiVvX/hoFfzvt8EAsVMOuhcZvrW6wLnhz2hHfKJoWrdvgzLkpqSnpPiQGOwxIHYbNTg&#xa;QvD1X8WHhMKGwnN7gF86Gv8ZlUqZyzJJ120Wqy7JA4U76q4Md9nzVXw/dBQWcFbpDxrKh5q7j8&#xa;Z0JZ3gDq+TRL//Up+2VrR8k1vly9cUUh1EJk3V+jJGuOMRxSAx2SQ0USXkFec1eWO4lWdAxBv8&#xa;KEkh1ZwWHy6ZiJEEMszTnyxfEKBMcTIKWcENMrQLugZ/Zw9wt8G+L08kTv0Wj3wBsyhRsiugXK&#xa;X9jKDvtV+vnzWd/JFm7WVGKre42KGtHYWbXSS0dn5W2TqX/M1cWyaeuVmC7yaNnpSpdX8Daspu&#xa;danemqGPtCFruHnVZMKfJ2QZxlNCy+wrGuHiok2OI2rtDlyq3JNmB+v0Jbe3PJ+6C5XftoGPQj&#xa;HosteOez1GydT2BNeb0HOoOo8K8Xgiw/jRo8AUZTVF7E9IGQUmvr+6TLCY+Ptmv+lTolNDq5dO&#xa;NFJ0gZ+VX26oYmWxZuPBiy7zD3p2lrZlsLCmkzq8HsgUYO24mTrXmGC3jTT7KsdFZsbhVoqIg7&#xa;29tudLP7TgivOA2PGHf+FOpk75ET3MMX78e66tZz8LGERUO9xYWOWEcHz0E8RP1YVkT0Qz+Zsk&#xa;D0g3oeaKLXlBcqxowKx7InRKoTr2wbb65OXQm8OA6J8WWPoGNZOL2fU2ejEcHq+caoSEhi51rG&#xa;csWpfaae4wx6SgAp4e4Qa1mv2FRWB7iBqrvkJPz9RrYbQstQVqcEThssCCjsZsZzAnZt5pg6Z2&#xa;kxszPbRL0hG08vJnafplEbrvxD145Y9hgH85Qx3S/PzD9N30q7ZeSL9qe20aNiLHuTpSIaPFLb&#xa;bakZ6kzx30rcD7sj4gFtBRXM/PYLAMsSW2auyhZSR+omtfM9gWA+3Fgz0XpKbE79OFZjq3G5MF&#xa;BfzdfOMZok77XOMaQkYQFp1U2IBtEDv1z/McXc3DF0UEuq4W9eKnhgp6qeXxREDrIEFJPoQbEU&#xa;XqBzI5PYerKo9KFcfoypg+oW3x7526m8cOVmqHzyTP8cqtGOMmxX6cI7pkvqBnNpHtMHxmKyes&#xa;Js/BK1Gih2wSh8jJjUDX3f0ruDmWQP4rWo0edMtQVynz/WDNJZeLvkr8e2/Nlj8BYx1u7vV3qL&#xa;K1Bd9u6am4Nx9vqjKz4H874a+55f/YUuV7/0XTZXv+zdNrdZpevLMTvEwRrEgT3si5/5yFMM4d&#xa;YV7MunwchTFeEW/j+/TEaezI2Tn6I0P41GntSFu7oxbz824q7w23yusO9/sRzzM+y/TcddEQt3&#xa;xcK+8DFS8C9QIo4fqwYxm/Fqo2PkRdIx5qPrmgShkWVZzaKmu4iS6dZKsqsehWdsnT+lfswV6T&#xa;c7pO508phoPae99kMghmw9gWW1w8kdtxO/E/QBXwH7WcQK0v/yM5tdwjKTLvL23LtTAWrJeeIL&#xa;Bj7TIzBNxddk74N3Nzwu4DDYFPfwyNyiek91wn0ngDuGuXUXYhkV5JUAd2G9Nu5ZOssTBrbD3x&#xa;3+Bg/KLwieCfpO4sB3TbiN2SMPnAPng/Es6glOONwN9Dubwm8ECVVEAgJ6o/iP2ZRLuNx/2tRI&#xa;9J+yKXkTE+e/fw/814Ur/1q0Zbvi0i6gIYUKDE4bVxw8fTsfoAWdON0gqlROa7ViR3Zi1IbNlg&#xa;HShYq//RYeQNSFoB+q3KMcgIPPP8r5SfqJepq1YSu5qiDt7eTudjjp6+N8xf62xN/9DpGLyc9I&#xa;Y4t/2KpT/dOzgTxt4gHz3eEjN7vWyTODXdoAADPXZBqNF23Gwoxr+6RGosLAounGVaYtyVdx4K&#xa;yoPz6ZEcPYV4C7vt90eL2/H0MV8oJMt+i1Cjh1eUIKACwkMDIEnTrHHGJ4eYuNHxiZjRmFDYy/&#xa;Hv4ALOH2MxUktFUCZrcJNI+tzA1AAc5NWMU761M1XDj8pdFWenq8wl8szc/u00L4QsAfLC8brN&#xa;Nk+hw8MmytUTykWwy/vhD4ALnMTn33czEyLg8AVzAFq1Ho9QkyUTFCFC5ittnHuIyackFIHOwQ&#xa;pL5y4DZDwiiehGo76WWaB0A7b1IfpDcEuYeomjrZUjR/vZChtOU/dahFY6aMSyy+o0W6JPEZzb&#xa;MthFqLcOj3DzjQINyjW680oDtUVe56AEQmiMlhj12bBOTLW7nVRXKne0tAq3m+lkMdYyNC4Vva&#xa;SVsQfCnQIpvyVgK47mg4LnchEa6FkWEiVhhaZFMGBtlha5oTxTYVJrsGxVIkFdtFm7BmuGtPTg&#xa;p70jKfveYGZcwQGeMuqisoC0KSifgb/qRFDQuiBUgPuISWn3geb0/qrY05rXGWbfPRlPd2WqDe&#xa;QHfuNtpuYqm6Rds5W3X6opAtjB5qHjBu76W7R8mw2O3jgDwINoR3NCl/P7XDtE3DJZkrQTnvkU&#xa;PcoPsmE4yQJKQCxSgOKRmWi7AAAA6MaGbTWZxWokHmvUdATLAYD5KGTVgQSRJbi8C0dgoXgJFt&#xa;JN8xDMk9trO/60PK2WQDj91WxPQ9Nk+lbikY0TRe6aK60uv14yG79tERhEWZwQgE7KwgpYFFC6&#xa;ZBLhT02u5YzrBNZGOiHkuMYYA8AdAbTbA6jQw1EKC/HxnSYjMPpikEIuNPli9JjzpoKmLsU6XX&#xa;KE3yZe+ykRcT8WNGhbnI9nmVZzu+qPcK8lDC3SK4unaq15CicC/TrPp+/X4QZIxttmq6TwXd/B&#xa;OKSL7I0oqYJ6xfBJlYi83U5DhYqIzWPMFQ+ZkMaKOCcsO3Mp/uIP71JuD7dWYADs73ERgXyvU2&#xa;Syh62TysK5xxMrrL6BRTnH5qERRmAbodVi7qPoleqPMkR5xqag+sqTCGLRMNlSor3T17mA13SP&#xa;2fgdYblVuOVzsfVhHXoG2+Lt+hvv8ac0gzKTaVyWQzleobdimjHL8sJlZzgCY39QmYc9HcVDhv&#xa;0lnA5WkcH8sYzWqyRcz7OlTjE8FI5Ca/FzZZn49M4jNJ0O6aM24ZQCmNOQyv0ov+rDSk6cMK3h&#xa;Kv/CI2hJlZYGVDXjqwYYPI5ptuGyZdrQ4pRW+X2sHNzzRg+1VMTsNT+6gdcJM/IPNq4mR8wNkm&#xa;AnrvK0CQH9CFEkbvPw3lmCfkw6kgHB5R6PoaR+CZvdk0s6AsOZUOYtVOHC2rruCuuC76HLPv9K&#xa;QX74hth56CEo22B6eFXEDKAj2dmrrA/sBepvPByLSg2sNbkqvXNzanAA2ZM5R5d2wJ+NDuWQVh&#xa;yxRSTmirLZLcEOn+Sfu9fBmrR5UHQQCckqUMG8aiOyIGuk57qfCSrEijdnbZc0Da9oIwSe518N&#xa;eUGjqla8qykfHuqutdZQG5gyHTFsyx493H5k8NAWwQ9zztiE6/RcR09HaK8VWPoGjjHPMZYYWb&#xa;GSfaEKrvAtXd9p3d9q4mOKBW2zgB30GyMdqDQG+GzlLpzWAkHobp9wT2OACGSHlWvV+7voneow&#xa;yVjzqStwPO8rGdEVYkkxA6usdAbNyTIvw9hvWjZyyhQNeITsVcWRAV2X+IS9ip5RC1ruEOr9/g&#xa;uTfOZYW3M+tetmQMIZuFk/vUU69DFz7Pm38dvMtKXIhccqjQhxWp2l5g1M/qsvR9gPVD2ZGu+R&#xa;wAid/z2INfnfbEtQK2d9Xrv/FbfaUzxXjBxPdCC3iGJPeFKR8JEFAiVc+JGazekeEnfHxA9Xlr&#xa;t26N+JxqM38PpCZ9P24WBFq4H/j6e9QMShjlYUMAAa0C/qdRQ//fjJp/LfuyMHRycf5/vFdq/c&#xa;/cwfAjg7Vp0yWwydP6Xg4+W4ighTDjZGtRy2b7fd4qEqs5Q7It9TJkQ9aycwdVFLyDuhSf14d2&#xa;m1IxJkXeKYZ/bI+7fS2+6Zty+tzK6CT3FM/VnR7Z353AqzfMwtZWmdyTcT89nRhSnENg/apIte&#xa;kOWFJKhljXXOu8ZpzG2K7iejCwYJpMZeXII9M1JYrfUaFcAbbJuhKnajGx1qbkmBorpnOsZB63&#xa;YOytsmGtL7jUGIsTWc1rzWYKKU7fEQwVyl4YzsOKpiwS0qcMHc4BSxuTi0XVKCMWBmFNHFWHWF&#xa;5lpZxy1WnNGLsn6SaeXRJvgHGZyTU3JokVGsL7Eoxliv6xwBDLllBMt0UCxcBFhv7VZBB3Za3a&#xa;VEYdv4km1tsG4kWvNrZwAcasc9w6+UlbEnesWjkxyDPUimAq4ihxjL7LFsF4ktlxOOLWBi7rJF&#xa;27p/TCqB/OSH6UziEhFT2P3fF7nNIKhssfBKu6c3To1p1kO0esWfhxNWksJDhrFHF+rrWLiuDa&#xa;tbJDaDx5BrD5D/tzbiGHmTsWxqLZ4wg/Ms2OXlvLPb8p1Mw1xy4oLgoBEsPb8aT4oGwTHXcfoC&#xa;6zGyqRmjcswdtnpv11JeKbN5RJb/WRb2Jzs/I+BJ8xN9ikLjObh520wt+TatQzDWUTWTLgNeye&#xa;VurUdNyK42jkjbqjfD0inA43vVJMUVvNpDzSXTLnI0z5Us0tIqLVSnwMRCRnwwOZsnsJ85QkAC&#xa;oZhIEgLXRq9WJseYIkqEXuBSNzUerUd7PKGhbarj+n6BVDRND3JDl6ERBPLu3tdByKu2UF6bMT&#xa;bmheMdTCjcq4aBTr66zxq3PxQYWqBMHLa7RMZu4AtQdqTUEA1mTOMj99DhTtvibXl0qhXhiMZM&#xa;YgdN/tsndcwVgNDFRR0Y39TLVTVlGZUqxSwQq7GXS30GhVluNSk6Gx9hKP7LXMsqRJT1TNnUvr&#xa;wgfBzmNWEnD6PVREiSynAtHmVop3q3mbdon0OdURzCW2iYCl/L5itl5iCoYKh/UTIllYqVQtBs&#xa;Cb8dPMvl/R0cUZyg8MvTimzxckGXAcz95OkeibnTzS5ciICXhdWX3RKxdTDgpmGw//MaRJRQ+K&#xa;COjiGVJjaHsKD1xRwTvakIdGpAXQr+LL2eSErPpVvPBbR1v9bw8D16BWbW3XhcGG3hUhzNI8xZ&#xa;f1x0lBsT+s92m9/UEqtonoRp7Bcphs2sw5DDyLhz27hqkyWu3WmkqTfCdrTBExGlm2jKSOSL+/&#xa;I9Exj+iVcceobUdmyAj8HRmoPo0SLeCK/4wMUh/p1lSiHwNJJt/Z+n+PDEMJwL7eKsOLgKdR1F&#xa;ovNqdxkm3WE8amUzOlHWdf4Sp2s5NKaCfZx+31snOoXRzCRjoJ9Wl+nQWWwH1+S8AxZWRZPk6S&#xa;ZVaVOlZ3iX3ocRPUXH1eQPE3j/wLNrxOwir8d4E9tCuq+Jmo4YFOkXpYj8zFARvin0IsJY9YAr&#xa;pk1ob8MgofqA06wV7I3FWCP3IfsNT0hpvYWDdnism4kLoN5SE3c91UHHID+pmXaltleYXGxa3p&#xa;6jFnLnnVZO/BWDM41YQ5DmvbTm+QQFj2gD5g7HSBmzk60dvDpJW5Js0c18XvP1RAcngGLDA2jq&#xa;EeL2AfL6KmiCpD/ARJ9HpH0zI4kuTWB7FumgJSxGabHagYI+dAlNaf5stA/B/uUbYfXBzw28Ev&#xa;QoY5A2o9Eyjeux3AOe2ThEQ/iDQ25NKh/Q9bsNSHmR1Z87LzbsLY+aXuWmlV2nuTK/XgpldOB/&#xa;BrXsNuVrgdxOYV3tnIzEGcXytRU69g5MI2gh7hF2c5Itl/FcP6uuepXbtt4cpETy+6h/u+q/sc&#xa;E4tcI9KBQXJDCpYWzirm/Cy82p6F/HHzYOvzlBLaEcCn3oHPttRBIfWs+BzppfRZQkAq3AX59z&#xa;WOckBjSSU4EFAbzP9fk+DfVrGoe3qoqKP+2jCJZ5fBQ9DT4CpSmQZKGA1K/IaGlYsmBEJISABl&#xa;4M/WNdEhiZc1kdHlCQplpWstWtlol9Smaj3YCawlgdXeglqpdqb0VFnVqPV0Ac/P//WpS1Kirw&#xa;c9iN78kvvJ5ilzi/uoi/zzbZoYSG13C4Q12leNbulES+0jxoSpebgJTt39qF5yrh7rTWZp3JV8&#xa;Vo7uSqucBfJbmd6SIxzsYslPGXvfgu6CPBWCw5bOByhyy4e0Fx1fwbGf5jztW2VbRqY0KWgJe1&#xa;imIPXD75XXReBRd8YzCCjT5EPENTSzbtM8Jq+M58ecFqQdrqxH9S5BCoQIIw+coeBoDbJRPilJ&#xa;dTrUCTWLUCpqRzxz9cjRlswp1qOFON8stGfmNH6wwK7JFfvpJL9qubPT2tijILyBjS2tYa61y2&#xa;23ESmi7aDElpnF9mSe6o1bs8ydwK3Vs7VVjQIGiVnfIofVRlwCbjnHlmIpmWDvGPiDkGgQNPgq&#xa;U60ej0uFOIKA6JYYkevNFN6gzWbP6tM+V5sshUNW0hYu9nnHbUcZRnkwI326hL9F2FmufTWBS4&#xa;gBdCdiBJMM6G6Q4mr1M+1K1zVrbMotjWpVsZcSB0RA04jDxhKBwucnU1OS1rh5pVGG1HFVxKmd&#xa;gbPp0kjYM0j7kaU1/ehYkUp7aViS1CuxNnOiHL5gJ61jqSDZ9MYht01L20jDMxcw0GPsuJqrhS&#xa;4XDtuzSstHkpQihZLoW6KuackzdEQ42zdujVLKyuqpiCO3m2gXwXL29TVBAmsufSgi3faySSxm&#xa;l5RPJxGUNEOonIMYWzZqDKEFYYZ6n4TySMWmPG0GXyMR0xZejhj/hW+vbm0BbxiqAjdW6JJKKT&#xa;0s/e51GR8KKdlHxnSU+ZYcZf6gVQXRlb9KyJzV7FYIdiiuRTakgWAURy+qDuldK481S5pGWXNr&#xa;xHEi0eK2uMZyrKlkZDw74TW7Fo00Lfd10aXSbdi6jdO+uOSDD5maPhBTiN3LBKyeJI22xtYL16&#xa;rNXlDKrFJ9tSrRJIYEwtHiMP4HwfyaDumojlCNJYG0a/AzQV08t71SPPsLvX9IpsxFVzgejDZV&#xa;4wsCD0786R2pJsGoqY9hBJsqLD06BWmDS4cS0RFqi2juhI15MhRnaJwiw00O6G0aeLFHaDq+ah&#xa;22e6lg7catDCsQWJ/IoYj5nrZTlczP+BB2BIu6H29jqgkGF+UnHsQxIQ7YmwOp+yRp2xVNx+vU&#xa;l3rD2g7tFc/arhNiRefb9shhMu4Vlh7ca9MapZ8K6wic9KvpJ1OSuFcD7UIeXzYvsPHgVYe9Hc&#xa;rXOciGgcRPDJnX+gLr1RA5IcxVycmmekSR+3LLX+HID7IyMrk2Y+FH9vziWvVyJMotK/Y6PXIy&#xa;v+GTZZYhV5F694mUb1CTTj7K16zvtNrMWyGok2RGma+m6ZSzYgyIgwsVD2/gTbJOxsUikmqOeV&#xa;kKvSCLyLFlkb8pg5C6MYVNIUDyXJpxiw/Aa43KWffAGIVJUXInrKfKfXFUasrh487ahwrwENDT&#xa;PCdWQyiBki+zK3xnSFnp0OIbQDx1Z105cFv1c4bZrWdS+GUyq4YQOy0+ebv602/VKwrCadMgfX&#xa;zq7d2MbYygawTszrA8q4GtnsgtPY9/MkabRhJkSYRO4QYG1qioREzBYxZmx1y9X93VB+xpdIxn&#xa;FMLvpJjVx1gK/f6bZkP8rdrdT4TsvmYwND0wYawu5L65FtHhlBtUzLUnOobApEF8iRX8Mbndo+&#xa;My6e7cDwz+tN4av7EMeaEQfdoaFqV9sCPcBGZDaOl+epIGHPVk3eHqaxnI7oFq8Coe8uVLCsVN&#xa;wfQsH7KV/Ta4LxP24GjyjEOCe9IAkoqKr9wvuDPVm5s6k+eNxTGHQrlcfrH8Qdc42TnxLZJFz8&#xa;qQU7tTIt4Fpy1iGf3r54y6a+eS2lnx1x62bkNWU09PGnbfkE8dbu36rJoW3JTFYpxWTbhPnONt&#xa;aGkx/axKjytx0Oo9gBkqIVWSRzJozJUlHoU/8QZxME7TYIVjvMZUDelO9F8aMtCnnKDWDHUWEc&#xa;IWhyYNDHWFNVtoVj8I0ILHH7PjnpTeo1mk0HG4W5Do49DVqtCMoZ72T4N1kkqTXPSkLiMVdtop&#xa;0mBhmS324dqW8ZjL9hiNLTvcwGaQMGoRdVQjDHWcZTgYjWV5sJgXnX5pfbJGjVaoMzEaB5p0tI&#xa;CdOoJFFy1jM7Mp14V//Ql+omhzESEmX3ABaKLuVTzHMD7HERSnXD0rXcSsVt6dZVZiNHbvqHLB&#xa;eEsSEybAsYD/QuFKoKcexmC2jlCNG8vmCHhgJOactKSIxExOhE2JzqX375zQnqjZm+Hin9jb3o&#xa;HLRqaHT3H+Rcb06huCtrjaj+WJiTdIOWC2XsE26rrn+s0Q5xG//wC2N5Uxdx0c5jIABQvHHZ05&#xa;ZuAsH95gxrIj4ksHttY2R/W4MVpIzN0qD0nIvu2rjuHghXHwwelCWU3zjfc+q05SBILdgHUr1f&#xa;AWpQPud9QeISn9b7rzXGMLjAE7fn3bkmifnip7/Bp0ZkREydfUJrD5+WlbBF8QkH01BMer+5tA&#xa;Po3ek3rSRB0aUI0eje8ES6j9T/xskoA78JrRWNQV5a3ozB23bBLXQw1cMNwBWQNZto3mjNpOoY&#xa;7q6muU65reWO7SCbd+PcCaDAyx3bPPgDY71BKHKSjwMwI+FjolqF/49V+rVw+0B/j0ljvVgXFb&#xa;qK1UsIe584eU9vYKraPk46tY+WS9KvNhhz4KsaOQCzOilQtlI9iw4ePdsMwl3LGJC7+gdArOFO&#xa;YnM0pZYcMn4KlkZkSJSzIPHUng7sEUVt2QzgKTcpaSxGKYcw+BmDnTg3WIsEJlr3vsGvpUJr28&#xa;vlJknzJJ5ZtfX+QFcHTnw+yWwxxFZg7wxhrDnVj6PDFSNWQHM0ZdNcfsntCVfYa1Gp/4HWpD7h&#xa;55FBsYYtKOYGG6PGTkNSnyrA1qvd8APm9L63SGfk39iN36SsFi9VwywbYWHPMV1Us1XD/g7zs6&#xa;zzst9BOQQEATiP8TlDj+v0Dpv2xdSlI7U0dWR/i1gbBRU4GlXtS4aK6Y4C8Wp6Xtg0KsJQVkTU&#xa;G7zKbrZt+3WoPtzk7hy3/er3Xxlvexvqc+jydzdrKnzFvyVUX+6JIOg8ALCM6d3tv88NPskJ35&#xa;7c8jZrm4/MwuJkOtZ3CcmSVfYPtx2V5ekn2KbCzwpqKsY44OH+Iv1HC6vrrNUX5jrKDmauLlTK&#xa;KzVGPMgpIjYWFoWJFjrFyDwF+isuNKdKJKNpe7vpe0cwyVwXbG+v35rNfBHmcmQYeZGITRL9U/&#xa;aVGE1F8l8ljB9gM8F2J40mnjTIrOr0hADFm4Y/CBZWqemfSnq3dlwM+4sUXRKRjSWWZbal7ytU&#xa;GCgzuTPP7+HjGoAcI5pk5iQPuZfymodaqhrfR3bxDPyXuP5j2LfS9xIs9ivjCGIK7RdpKcbFUS&#xa;90XDzihINgoNGFUxlFgGkU7HOdPjCTr+3v210w7dm5Y5a8Uwmizm0khdA4uxSOmAr5iPfIDHWs&#xa;rYyHq9yAk0liz8xJpgI4nTGM3CZ1aS+ALoJsP2qMrlf76dd6P3lWH6xfpdGmuR2J2CBqdxCnK8&#xa;03MgwdtBXjZgB8zDgktbzTV3EqalUFCq5Z2uEo1TWvdkKZcDi8kaDOk5V5zzZOysiX4xnhtbfE&#xa;39yLxMNbVfXLMTpk7oRuLCQNnIprCGu+JUn5GSLoYaLESWH1uOBRVJfTsatmkfYJXuE4TeLVQr&#xa;u+4FEXY2aki+ykNg3Md0GfXAChUJIzLKk4pOTWx4COcCJxopVIiG8Tt8x0qD4SwKZLGK/HoZBo&#xa;mobyElBC8sM82joMd+1SYg2yvJQ74H5oWpFk5U1lrRaCe61K0niF9HpPQBrWbYaDBFIGz0A5V2&#xa;B1xqlmY+Fx9HjkYoQ8crUiGuPy5qzoORQad/LcVBB6eDxiqsbcSzct063EUBVcFYYyN/6go6w9&#xa;pgWvUkU/da7g7EnQOVfOMOWg/1skuslq8w5V2s0ADFXISINV808tJB8bpR7e4igN7ciuaIZ7gh&#xa;ws86QmsVLPYb9NfgM9kkC22SqnnmfgeCG/9UntJ9n0663r5jnjGwJ2kKymlDyHM01oGDjGQFPQ&#xa;V9wdPTVyqvYuI9nDDbDDwkUyhUKXhTxV5Pl/HUAXBwsknoVHsmm1Jxla3nNaFHXOhCtCDrrdu3&#xa;N2+P7u8IfgLKYujZCsrraaV7E0SxP+ppPUh3jK0wwNcwc8Gon1HQTX0CpjCa1tFxanxn9joc+q&#xa;o0xGL3luf7+MyXm3qW/S/AkdBd9ND2U67BA8+VN1wbifSX9YVyoat2pTHVrxcCen6Oj7Ez0e1p&#xa;7xqFCJGSxcnWYi7iKAMCCWvjvDXndkGTwhkvg+z3M3UdXfz67mO9aRjnR8gWNltsFXAfte6hdg&#xa;uO6KIzIGWloamxdn9/Nr/HY/DeJ4qqIoqbcpXUSp093W8ZpjMperGpzvDEWdm2B4rbR9QG4lts&#xa;HMYSYGLfpKaKN6wFDZ/InLPN0Ql5v95DyuqSWhLyyxS/lnvsYs1rL3viSqGGn2l4gnKvzpuIZ6&#xa;SfWnzAnkC+i9pW7/6ggpPf6llke4DExa/0nigWLXlSZJ1DxkgXZg0y91Xhf20RAWraJviAstkg&#xa;bELpRNcKKuLMMGLmQNMAvKsI5fhE3lAwceCdXsA/uJWYXXdgvYDXqqCCzv3zpbzmBW89sEYVIl&#xa;7X7FjmCkHcV5h6N18mBIp9TBnFPjvoe852y+47wdjBR44kfo1caTTBX6Si2A0p764kE/wtmpL1&#xa;B5oTJWtRzJzXwBZ+0UcF9IJdad3GEdBGZdfNF7JXyFpf9COxeYlTuI4ThcyuWqGbyeuQAdr9X7&#xa;1aWuYMD+yU9xuBWoPavu6MnEJlV0iv89XPDDUI/eItGFrL/xdn7xyk67O0a6628bZt27Zt27Zt&#xa;rvZq27Zt27Zta/X57f3Nmfn2mYkzExOR8URF/f9clXlX5Z2iaCJJKh0XCy4vdHRxCiw9PcG3fx&#xa;9oa/N2qf9CTMv7oZHqIP8tSCDy5y0yIYEc+Lch9aGYN0/ZP2Xz1P+2bP7/dRqw/p+T1ZQ31VB4&#xa;ZzkSAEQYAItGwAKXAWwkCImlVh6tY4BSdD5jMWmTY+iXTRLWeIJJiovk63H4E7ckl8CEy/vS1J&#xa;O4q1cuCUVUIlBaAp7Xa477jdPNYa6//yeIAIKf0ZksrcNoegunvNzJ40x0f6pxuxRnbTtPc956&#xa;TeKidIpyvefuy0EG6MicShOttSWr5sKUEdPxrUSZ4VnLlZFS64OPYCXHeN9ETVpN/Vhi4dYRm+&#xa;CpO08sI4sNvs96q9kZDwslFCDs0JO6OFkK9vr+iddW8lFSdmb3sGNz1/MuERjTFXY+7dCqJr9U&#xa;KuMwOh0sijChZiIHXerIXMPMabQlV3DiGNKQaLjvBjESaJBlix2TqyK+TMg6LJ9R7ajGIIdVh8&#xa;9kEyt0B/s2q1KOSCJf7gV+nbwVlzKLLCsJINQYJFbGNOARSXhFhwE/uPw0DyNTnz2miZq6aUxW&#xa;PLbEGezFABrWkcUx9NMYxgV9IDjteC4BJGFRSIaYK97ObaptatdZCa0nqItLt6cKLYoYt0dU7V&#xa;I7ww6femCVfCugk+fGFAKbum/S9Tt5rFiIlm4i8VnLJKgzQ90rTPmovvPVvYUCf/5bAamGQUQk&#xa;2fe0hHf03Q7aa548EauW6amLwlFzm23iZlo1FSYqv0utBFqybUaBXssefbSmgqtsRqsfrovukL&#xa;UrPw+P3IryBSjszdCVIFBLbz12Tn3e4EsgPjscPSWolZHkkHbrKdC9jKottGgNAy1bfEN7ZcK4&#xa;pMxIVmfsXERmt7LYudNiTnG8StXB/hG4lbOZJZs5zF207VClAKj7aFy9n2IH8DzL0DTkkgmTfi&#xa;U2/Twn5mOH7rTSDNd4BtUh1yqjzixjnlUr5pApuKKzkU1Oqfgjp9ypGmzShucv55dDjjlbq19G&#xa;21R66UOHZIYqs88LGMWJSSoUln7z2CV4nNRgtWN0dWK6OUAOY6YfawvxpEJVVRHE22ZycQBjfh&#xa;OYo2FiUbfWQthCbHnFiLX066jB8RVKqdOQhpXNWOyIIBlxYNQjTQMBLJpsvEoGyTb2Gqxj2iYA&#xa;OzjqhwVDC1/+hGFOMncPwxCrDU8hbLaISumaWWxCpNTr7BqJnpoSgkKh5F01dx9aiPb4i4CJoP&#xa;qEzZry9KF/IrWWUiGYVu1RY2VSSiWn7aMdm4k1wtn2DJUOBw9IY5PNqqCdtuP6JDSqDa+8R+zb&#xa;ImQeaBHILOwHJZPLxqa7RHpftQezUelhJKktiZgyCgSczVoIJO00KGA8l8l8ujDOP2J/WMfbRT&#xa;J0X7LN/5F0cbXfOxY/2OhrfbJ5rEHELHXQ2iJv4gpubCJXO7VALWDV3QFaQtGE+WwEZZ2vbnlx&#xa;qzz17swhQgva+IsSiVVVz0qIhNAZukOwZXu1ePZQ11v47OgVPn+R7w5xBtWAjgedX4psg5vqw5&#xa;JbjlT3MFdgqCPGdHcJ88WFdNlW8i+tsj7yb/Mohow7r3DwW0fkks0HFHjnCiMRAaAaNZj8l0VJ&#xa;66/a4uDRdeQifE8f4rQ1xsiBHyh7o4XNYpPEg+Bt5SRUIIVcBe1lG7b8HPXdWbvMhAPgRhi94z&#xa;Oe58FdR/MsDb+m0M5GK4p6IFtahtIfWuDHSiCrL8YF/8KEnEuKL1H4w9k8OyNDH5gPmnY/qWjk&#xa;3oEHABHFoV/AnBwkETMVbnNTys7ABI3p3iScz3dpuE+0H77Hj5jPrarsAAKR2JJSiz8sFuURxN&#xa;9/Oz9JqHOKQPwD2yHo/x1sMf4fYft/zB3ThPLAWU6o+SOWsdJmu87bM4JhE11XPK9BHEN7KA2u&#xa;3RBji9tioj2GI2W99AdcbHFQJo4GOREUWJJjIAEbiQAdEQkeO5jUuIYE3N6AMAT0Tx3MZEPnOr&#xa;G3KXtn5rZJ4ndlpzlLilhLF6bv98VzZYX684XqcuWq1/HrLI+8iOsXW+IKh0HRYqdyGMDu8lr2&#xa;Ngbzs3tIhrl2JfzJQUf+KXzTq4atICX1d/rJa6mM81kAc8/yjXk9qczxOqYVDhMZqeEL1nR9E5&#xa;jg9KG5zuiRpb315vQR7lKib31bP8v09fVSdWB9q5ovIoe+TZ2/sfyG4Lh0J8BdL+l3WbqENmqz&#xa;jDMuYzAGgv3vZ3bM+bU8PH12MeXwZtUi2u3fotiHXlzdtPPmTGCZ0yr+HNC2EE8yXFd0zKZPw/&#xa;kWUzIhzk1pE5vbMZhaWOke+MrreYbnbBmWes49gVoNkHcylzctRsFi4cUIZP2t2eVU9kWd3A1G&#xa;su4DGExKqRfjRQlllfr1JXwNZrK2utfQVRUuvjSARjaG6fIsi5GKbpnhZFVvVS2J0/cx4ag0M9&#xa;UnbLVCvDj3IRpjY6piY2aiZNVUdD0zMsKMkMI8+WC+LFOd0oX3piFxURegRP2Sqzq4VaaWAwHT&#xa;ZRJrtXMhLaquSZUM8cfJuUqqsE3A4kPjwoA04VsKrD1rVTYls2URDY25JaGyDI5SedjAogXncs&#xa;VRIZMiMZFVndRi1qqXJ+0fcLwZdYomcIKq+LdSCdMNPYElFTHoikUBbJHsKFUl3Hds0SbxDCRL&#xa;KcJusXxamcpSEjckwtTf8bYyMOTgHqLuLHYlzJSFM9LcaSmystHX+rR8ViVqySXcFbcood0LFD&#xa;KkhkMmrUKdqhn7ea/QJbA32ocFHSpU7gqpMBOjRRtBRmYeMAdb0urt3NsU9RkTIrTMxQvhWcNn&#xa;A0yyK2a35vSLJYvvCa4Ekfci9jxhoiyYvl5kdtcjazdJORKv6ZRFkKAtqR95InGWI3C89eTzxv&#xa;DySCafKlh5aXEf51bzwqHOGiCMIn1XJ5FoYZcoxO751zHFDP5k65XaYocBOQ19jOT8BhsxfMSm&#xa;JAUaPlI0PjVxCyaREecLU/ElOOsFc2wn8pnbixGp8G9nXFa8MDmoelxjTYZWenoKnqu8fAeFl+&#xa;eFDLJefVv8fLixgEMWhyXEZrcRHFuTfObidDA/QYonqBAhiXz58TKyGP2MdQzesrnSYn7xjPaF&#xa;KeEFbGU37QGmj5ikVL5gF96iUWYx7BdPu+OWLwvHSES63MLZz7PGJ7CSjsV2FXEWVGmtTHiNMA&#xa;Wbq+XElLE3pAVvFlMD3us0NPJlUeWGIz711GjUqPDj+BCi14VUXxcEX1E1Fv2MX4vRjDNoONZ6&#xa;H1SxvTJC8rgWkaRMlsk9coaGH2Fz9AHCaFxA3U+IXfUtJXr59jGPd/DUoYiO7nebfF5pPcTM2c&#xa;TTQpYzojaryysrS1QuEjuziWYJLFHFnPoZpAs6BLJgi3+AJqVKVsMGFdfXMvwWr8Q9SI3PM8o4&#xa;z2CpXGCx3RxdCLYV0Mtxa2p1sXDrsP5A44oLcW3j2bgubbOlDWXkcBcrODLoeQF5x557YVc1Q/&#xa;umJmSdfUaETUyS3/QfJ67vk+LzytMb76dR7OTN5TLQCrBbsS1t9gY3v9waJH4rn6GGs0At8A8P&#xa;zOEuYVsJv+wK8kB30420I44z2Ay0J8D6g/LXSpJ9oH7U56VINcpkSFleNTJRyLqySZPBUneVdq&#xa;9L+5MNElqmMNNq8RvAjbBX3TJ6I9jc0br5XyY4oJcqz4eRQn+DxZ6TepbVyXbw2TxSPqXKLIqS&#xa;ckNrG7qdkd5S2F5VWy3Q6vLofEx7xQEgzDq+V+y03JBEXU17hTkRoWtNnJesPO0pVhhqlY8t/3&#xa;BSe+0/oNYPxXvGEKquXwDzcRYvxlpeJ80GxgIxm+YCp3YQ632Yp7FXlFZvlxA/TSWHVmZJ/Uj1&#xa;Psz3zvUahukRZ4tAn7n+3g5jftdys9BWDVRM9pP9IQR850poxgYqqMGlddtGjshAUy4JOd1Oqy&#xa;+Ut2WQV86syqr0BKwFhQ7Zn/WKJv7075BeUelkcqA7eFXgZ+rytdRaDtI1p8raKiv2z4CI98wY&#xa;h+p9njeer9fiAmamRDXQCw+o6+PClZNu3ZP0tSik0R56Pb8Tz3su4zaLhbQHoFMjLyhyUCgfsr&#xa;m29DVZBf9MUMmPhgaYExgcAyeot6qjP91LUnnmjDeKFJX8yTUr9DHO6k9W7mb09KQDJqmscN61&#xa;SrNIrSjX71fJmQXCnz0EmxniVFXVi+CGQORoWGpK6N0DS06sksuSn45j2tIM8ZcTdKLXdxj57F&#xa;snoU+ePYUpdQSjF625mu3dzcr/4M8OV3FKlsEcSjr/olz98n8W6wvxaJ/SNNY3pV74fD5i80Cp&#xa;SPx9Vr465fz4Vu+9D984i0X9rVJzGOExB51stkBzvlxZxNkdtbdwWej4WVPpVL1lFuVxTYmq0B&#xa;iZNX05vN96Wqs7Uhx/CMdntxfl6DbM2LAKZbsV21rZlcAOVaNY7GwRGLGpE2RtoO8leU+vAs0h&#xa;3MYwLWFuUPO743eI5fBHXZ5SaaFTo2/3CRoKrmYGEC/vnAV+ejyQGSl33gPdDuXSteeS2k1Euq&#xa;7mngCQd4rQcXeX+Bo3oEPTTeUSypjHng4qec0imf7Ud8AjVCRgsk0/NfsBUqF9U3M4vE+x3TfT&#xa;xpb9dUwChYShgtdg7BfViWYplnHhVtikk2+y8YyJ+mn6dBtboXSkwoWLCl6SdWI4smfYWRTpk8&#xa;cVF43YuJtqz0o6dbI4e8ruiRoH6gvlLkvHZVEJvcagIS2kvvT+N/Q30rPBhMTIc1n+nescTfkk&#xa;YcWdIKPUFJbCG7GDNWRDC6lXzH4LXyh/ydxtgOwIs2Uof+yiYffj91h7opqNwpuZ5gFDLAyiD9&#xa;IIThe4O2+oPVBqvjjjqS1i1PLzgAK0P1aLi35GdBFrHWmKlHAwd3+a3Ijx2U4M3UonYHvWKLZy&#xa;WkNof3azAgGznEXlh2iKNULbhgaTP++OV0aUu5Xyy/QzhbPozjeveYrWUXkUBeEX9qXqm7UCr+&#xa;GV/aTGeDTYJcZH3sBu/B3DR1VsoAa+Bf6QLzAlUYIo/xVHYoQPKEVRPFlRrwYOzDf8Vu2cHEN1&#xa;RRZJoPyL5uiJNrmoTcwEJt4fDf4hFM5Pya6vozapwfGrRNTXr6S4uLtFmdMsMmVPT9Cw4bAyH1&#xa;jAcOFX9ETc/WHBSaMHqYhK5E1V90tVb+U9zJcRZlLfdREL1cTBiss+5kTMVenQg6Ownp8kz7TM&#xa;uLlSsvwDFH7vVFtdFrvYmtVGkazYLhpz4tl2llQ6Jf3hQoPHlkl1ybECrPh+yUNgiGPu/Xq4DV&#xa;f1q3Df5ZjMF9bP3Ggt0lf/4RF/9foQ1+tFedoOMrubNIhqpjFUISvzmnHRFkA/PF1SFK4dMPeu&#xa;IoIXBFaGwxs6ccSd5VPUuM+CXkGXdTOASUeDzuEcmEXEtmRzlggNdoeWIewMZJ9kHxdg+mff1i&#xa;MWztcJfnwb7QFdatL+gAEjjG7xFzqouMU9hWoTaJyS6eWDwesiis4O5kIF8fJoWU3EihcwHqYO&#xa;4M7AxdStiUSBqLASmBSjmwJpQU08SH6eCru8enkFv1Cap6mFRYFKJRO4OM8KVBU5Z9ozSTtu/s&#xa;WIS25aV/Bs3qy3+hm8a6CZeg9MnZuDK8Q4sWVUrLBzMl8Z+PecKzjKnC7a/EtM/gSwaVAHkQL4&#xa;UjKgGrtsxngJJIl+b1CDBekOl7gwQuw8w3v80jONZ/hVwVMiyhyQHT788mXc/qnM2PCMg1UU4t&#xa;MrMjsUy/D9m4oyMifOn6hV6+nE4Lai3h673vx7rfazTpnesHdnVO87w+zRRYFBV9rQHP0M/GGA&#xa;PgKrMk7ZS/8V0lSrDr16sjl/zMmWP8dQ8wNaO//QJdu2GKGTrRPPPh/wkfbtFYGQXUAnCCauWy&#xa;JNcCLWlvBkjzhs6yp9zwZSM/B0X8U1DMMIXEqxQQsPWLALuraPVbHObRK1aF3LU+06VDOwi6Jp&#xa;fXYaHVYMaOct2AYs3ID+peNx72TJUfwwgsKzPabYPp1yC4fDWUHajLmBGAQBXFu3WEcvsAtvBC&#xa;ccPjmkvoxB8mIt4IF8OP6Tn6dMqtB12mLM4YBPr0XPNBW37PJC5RB75Aw8suQUeojdRYs1mTeZ&#xa;6xrz7R57xvLoDgPJi487Pxmp1790x9LFuRUYh8jFklOO//naU0G6Xr5PKtacWB1R/DsHRO4Ev0&#xa;upQ8qW2kY1JryBbVfnmsSVmBUvuXN1RjXvR8Qc+ZM74RY6/bKCuTZxleeBjfZGCUyct2ZoiL0Q&#xa;E5NLCCq0MSt4Jyfy+RjgHt2nho5yexJEUtSNXj6j7ajpNnwbtYTgRD3zOstHwkdl5f6t7OVvGr&#xa;44UKD6tHqGquw73/7EfuZJMY4/Rz9HnZ/og/1N61VsE/T3du7xQfiJ4pvXC7pXGvMD4mnijb0p&#xa;zi8dZuIakg+huuTRgnbjOakE7gma6AB1Q6p20cwrMePM1qrI3QK5OzztPYBuH+V6T7wsfbcU7S&#xa;9ts1BqSwHVBmviOf557lYfbksz8QbRfgUq2KiMQnZzX+RWTtxCb68EPRrIdXwIF8/sR8fvqE2x&#xa;816x89ZYWw56t8yGFsFb96feupgnP4R00bkDBJkaNJA6EipvLVKtEBLg0pIJCuk6PDzyZr5/R4&#xa;40TrnOhJ76hekLHmBZKiWtos/yvTLL2rwwI6sLS3xHJu6LeDq5AZhFqJnGI2myuQBCEiq24Wcu&#xa;kae0/YMkefKMIndx2SfkVAX/+NHEKSgDxhlZ55eb5gCPiFjdpekDzgWs2378IBA5sWaYaNea6Z&#xa;xOZHG/1RyO2/3p6QtPAG7rjzbQunTQcr5x15TwuiWV80k6AlG6mOtYrKOrYyxV0mZHZGIo79EY&#xa;TeJnnrQaAtEnNqVNN4jq0oSOkE0N30BlBbfzeC2pS4h6+JVs8o9i9bis4iGd9ThFLTX2sbSbgN&#xa;EiYAfpKmta+35Hx7bXvvZmis5TPNYdjYaCjQYq1sEabXuEGyaPG891vtNTHujJVBPZ5b4H+Iy6&#xa;8awSemKlsaH2AA/9OhyIFLi7X/Q01uEWIzBhU27UpbhflHgrdxgBJesng4ZLrj5yh2HAzM1xPO&#xa;jqnKYzFNmPqGNLM0veyr/1yyrY6gAmRrB6Y3YQV9C2OBfhl87RKQJI1cvj868Yv78UAom59r/W&#xa;rk6xgTa+fZAFwkHonPuS/f6CCizN5gJHfL6rBRDy78LX7c66/4L9fKcLyPz6wgzI/P7iDND+/g&#xa;IL2Pz6Ig3YzB6/cQG/dZK4cXN4/XzXC4D4+kINgMCdGP3y4e879PtL1YcMP5gIfxMBkuPUtwjP&#xa;cREAgIjm2oPj98fdo4Xouj61B/5a0pyf/fpC7Jv9/qINcM/qd//+sg14/fqyGDVcbWurb2vRN1&#xa;rdkGD28wN+t4BAGt0/9CmCabcKievIJPy5dT9X58oU/OegmUi1RNso9PkSZbjikNyg4G895Ihz&#xa;C3z2HNK/o/ybwxw8sHuKfAMrvZ22SnABEZ4R91ipG1HBLvYmTs+hJ0D6lZH9d+cPclzXz7+tRR&#xa;zhdMoNEH/9Sif67yoFtQbXf1iLcP6HSqFg72zpYmlvJ2nnYurk4GT6z5dE39zURcje0MlETFTu&#xa;f+nqyFaz1kYWR/Ejh7KBpN4L2vAYThGyw+iXpi2gLTJICFgBpdhg0/0DpDZo19F5v/Kpen2N/m&#xa;Tdq2wLuFycLP3g+Zbls529osMwuQ/042Tmdqa7zfKcTf/+zNX3h3AA3WXGGZ9ynpzIzCqdxU4x&#xa;sw7jK9jcqkrLMhE3jN0MDrNKCQsfgRluMFSV3SEOZGyaSQ9zfBbrqLpwPo/uJCYci2eaaneZp7&#xa;j3bLYq5qVtrNjcAJbP3ediV81MVaO9wHD7FOE7wmK68iYTgDIMG8GKh7Wt93hp8FJ1TcjObJ+K&#xa;epHEBLAwhZirLbuZWiM4BM46JV6K+v0JtISlxU2p3tBiVFajtRbJZcVA0twNvl9nAiNQOVfVfS&#xa;BEhT4ypBHeoWNaerXuMMs1S4uoDj9pPIizCT5+Ixl8gZcSFKNNdc6YhpBRLh56HjlI/SL0dlck&#xa;8ZWikK/FUEpxM1IHBeIZnWumLLuXxLRdwxWE9DaxEVYG0bxNnL+agWcIufKcNuJI+cYXKRRhQ4&#xa;2muo47c8F30QI35YU0EhAUceSn3CYVxonMXzyF5TuCVGIUgCx4ht8lkZZgAIUqiEbBIpYoyMz3&#xa;lh5Pji8xQcHVIWdL1ebHes1rBYQ7ivTBQQJQrHWNrknDGjMPV82Eu2m2XiIpCMMCxMptfQtSc9&#xa;ljrC9k0uXEpuAVncQwXmril9hUtzNYp0LJSeXpuOdJz1glYkGNneViYhy1Xa3CCaWatb2BKrVd&#xa;RmnlhZMYZFBpI26xWmsofVZlRi4xIvdgZ5ieeC57nESVK9eC2W3oWMClrIbP6TTDbAvcrBnIfC&#xa;WP47RGOGZEGcIembTqdJOGwMLWzLAjQ3iCu5yEWuGyf1dzm/g8ZkuOkJQQpfVl1hyqljHRGUnY&#xa;6BRkXFLU2JJ+/suFz2Umrdma+2QmtmD8/PeqS54Qgu0Q3XLaiY3y4mlWGGlml5JalI8GMy03bH&#xa;J+7BzsXJOEuxV2jRWGyh2hdOf4YBpxstSyYv7frRP0hH0Pm2AdG5Xk2OzFXxcrDFMx9IKpin2d&#xa;QY2oF2Xa7rT9PhXJHeonmWjzUteQNCqmXTHuoNo1jFeeYjekWxF7ZB2mOoKaeV8BXGn4/Li7+F&#xa;DbcZRxFZnVg9r++HzD5nCgd87Qh5v15x1MR3JNlsFX5KrKyLRE9KDJSKg+9xNpWvc9mY0ZM6OV&#xa;MMxbT2oF6Ft7iRnF8wMBNdgF4hhcqDk8Bcrkjg+j542eEuiKlK4iB56FQ4jjmKrKDhVT5Z5gZ7&#xa;IFrb9caYHuGYBY2LiNRZaIYtzz8pbf/+VLjSXRC8ct4SeqD/NEEmJ5pSXWVEuXILM9unPT82Hh&#xa;W3AH8yJ+WVqQz0dJFVn7UsbynOjB7xB1pLiUcDUkyEOPh5bRHQC/gdyIbonmYAasNJcOpQBMxS&#xa;pO/4QAyi1ySBKKJ01Zv5OEdCv7Ff0tzSEizA2H4MASYSLFKeY96p2I4ED0Sz4L1pCn+InfdO7a&#xa;RsaV/gDhtLlTVgn8E90TSGeAuk040UsIcaDOOTYbfuHrgvOB4zgrONKfEuHcEitUDZlw2gtoGz&#xa;KQHHCUDNm6hSreoYeptz2n/pni6/qnNuCwMldsX9rNp57UZMXzd9Uryj2P77WpUcAYYMAa4wER&#xa;3kuvE0kaQxWYnyhLYwT7X57VZPj5mlV0xl5c3gjtR0g7Wi4C225pqBZe0WpQyCJsVhQ5vSTbwR&#xa;HeBPlDSek6QpHUpH9GkzT/jCZ7/vmeOM7KSzGgXG4z95gjhK0T1nyDG6HI97glrLIkjW+Lq4zK&#xa;4fqe9LzApJe7oqv5Cb0mSb37m2vC8AE5wcSH4xuRuWjyMc6rUzrkXw/usWnMIqnyKOhzWDTWXU&#xa;RfHtSDyg9eRHTITd688O+WicCNABQPsF+/NP+jZQKqke8/8E78/4b3/wJ5MxeMgcpyPfNn9/oW&#xa;SWYnaNsXKND6VXhoMwEJARkjwYk0kgaw0ZYNm8m4GfuV3ZuG7WeZVvX3hlXUt2a1bGW1qIJEkZ&#xa;+VdvPPhpb0D/6n77W37e7lpbjnyXSWM/t6CDZszytBevsps7PZydRUuvNeZS3fC+gvnd+9whoa&#xa;q+izZtxM9x5lrNmyR0jnSysqdDmYU0NQXECArc8CiIJ8E5Zm9qWFbnq8Sc7+3wzu9mTZfA4aL/&#xa;aA3XdF7gEeZDNqUjCh+ZOPk5qPkpVYOdBqR6pXK9Bk8ib3pSZXG9udIINiMteRgnUdph3A9FXM&#xa;qUSFRwVrxrRZYblOT2URfcaVrRR+xCrpYr0fqDdNtow5og7I0ioPyxxuqdi8wYPD382d7Fgzr4&#xa;jVBhu6DOmhiz9DjtYV7DF71jLmL2FG5zke+i4U2ExJ00PeiSRE56hYudIPXJ0dEcLKuMA3Bajg&#xa;B+1lGGJpixoWJSVfv+Y52EiUIreOIVF3nGUV2kHyfTApVdFlyTaR2z1kyZBJJ0O7kzunwbCljp&#xa;FA7hWiTxL3D/N5DJuhHw0DYWjq4mHPq7fyg+DR2/vAowArpkrbn5+dyulzeffkTTNvm1ZfUM2s&#xa;q3bWZbZ22j4OjoMtf7+jgqPUafWq+4apUIQVAfe6YQaHADA6RcFkX70GEQWgXGjSBmKBDxmLcb&#xa;n61G5r0vUbARZOFPtz0bTrba11jxkSJQPUKjdByAGqJCk7e4IXCFSNSqH0K43SIG0/1XIFul42&#xa;AgrPbxQCYWpPUtS2IC3Bwzjg5qWJy8q+5KUJ6uo+s5DlU2YPb5pEjKllvJlhTzFZeReFkGnVI9&#xa;d6GZ6MKHayhqOMye5OWTdNN7hjpHFEeWLV2jBwdJtQMVSWcjDOnnDcfF0Oi8UQ8/OdCUsf6VC1&#xa;tRHunZIBnLRJHa4qlNsAxC6CXUch0Py0zsswpnSP309tA5sculvq8pUGhqnQ2XWVGG4Ddk6ZOv&#xa;pBLO1l912cEUbDG9jygCmneH0jNDozSVCUMzGKqGII8MJ0D2cu9V5/igwRDcOBvpBjOlQvgplM&#xa;wZryaz1cHfosS4U2sUu8XmDfoUufl62FnEkSJe9WeFiy7Dp7JbxkYjkCx7nKX9TqmAVxglbqVA&#xa;Ll5QtThtCdJFFWmHOc6E+DiKSotzfB294Rg4IP/Lc3f7/hNoO8v5ZKthSvtnHhXnQ71Ny6Ehpy&#xa;XzPw/nYlBM11WhJwq3hWA9uTQaFR39EnjXghl+ewQfcLQ2aamTUC+88wGJZRZkQ9R2L4UW8NtX&#xa;Sl4ybMoGB7J0O3CiX57rPN3DjlDpGVO3SyfHNrwFFuSOFHPtMV6ND07AxG01DZNkAmvjouTvSJ&#xa;WV4LFWVfZbUOQGjkITCRc4NAXG92zBX1Nn2ES9ZEupT1iZPjVCfottNnKO3jlQ+OpsckBg7kRQ&#xa;TC7F9gQnEa14drXskz3hqBUwUjgRfDTmC0YSYxz2F4YEwZKfQbsAVzwp4wzWFOGTPk9gODw2DS&#xa;GDkAgodhUxja0vqVwF0wOLQ6N6wysMfKtTqttK02alB0p5+5uTmm3ZaXm9xZVhK5W9yW2VtXml&#xa;pXWRYFNK1XVVljMjO13JZWWVuWAM0bG8PVJ9eyzc+2Q0HdCbM2MnP0oosVMLyQ2XeyXHGl9wrk&#xa;PplI1yGm3B9M58HzNyTHfbcKFBFchDQT8Zp6ibgGy6mLinpp2JsH3Y5SGYxG976x8550HCD8eR&#xa;KlNjUDcXveW38ZlfUGDMCCSCU0j0+38h6dnz0TDxpqHBM6jMZd3CiQ9a9DUhFbZqeqZcCya7RP&#xa;0vQ799TvsFNqlEIvi7h6T0vi2EiK+vAtvUMVBmScS/ZFnSlzubwWdEoTGNXA1Cnv8KdG5IW/ob&#xa;/QSckujm56ndlV4SWahye/cItIC7brczxud/jA/mZ2lgWV8ebiH8EjKPlXkEuOM7mYdrFzJU25&#xa;KuiLk2VMvJQwgyi2VCWiATVzZ8uNFJZfl9885VteNOhSac1dCIlMMHOU5QWHQjJqDBuwBjPYHv&#xa;fbgYki6k3swcGuMORlFAObKU8IwRkev5PMrqIYrXoX1r9xkc8UOPeSJ5iOXuX/JlgWPqErgyrr&#xa;IQYyP8RBV8uDPJzEqDKuyxFEBdmvxsawMXHgDJaFrTFQEDbKPo1n519w5CzGR/HTmcyL7U+Gvc&#xa;C0MasL7VeFbWFqyxAMhqZ3INCItzHDRqQzxJcZMg7R5T3nqnmzPCRDjWt2Ss3ywEyN7oQGYwpr&#xa;Mxl6ptMJF9oVA5eFzcBsikeuLuL/7jcQE6wBZVYBe1GOCxJ6UwPflMC7LREpDsp8B+7XFMoKpd&#xa;IjXeCCJt3AaGJGRF1xe4gEB9N+84YAqcitk+13E2pacbvZGM9L7KcDVwHfZwNzf3xl1UFKsFdy&#xa;kjHJPAx3SuCT0mnyIdoUULOQf3IYbAOP9CSt1r0XDn7/EoikQpOFKpxPG1iFOEfPkeScLEOqh5&#xa;AEYIcbQ+mLQn+N2WsZyyrbGuGTrRF8qtz10bzYVFh1MXfzciYMqT0WTHSuit1yLqjNfHGVHBDc&#xa;uBtiMf+5byujOimjKwGiSkI7ah4/fhSwkOZBnVXo3xHmtPrbPkgEqzxv8pzEwj+zE6liUr7ukU&#xa;946llaj6V/tyRyIdDBL5fte55DqRqluD199nZ6h+k1HXQgxFHhQdxTjFErTgUSNR5Snf5kwJPI&#xa;zVP8MZOaZ7b8ar1ksJhY8abWlb7aE7oyg1bTbWQGTjRZ499dspZ/UP3mpvftBp0HV1/UVli5h6&#xa;RKpvTebmDFyHGuFX2b3xgDSxYrIL7yRoGM/j4wGtVwtYSH0P/hrMfCo9mox95fScbv2tZ46hL5&#xa;lopAIOX21RhCXLDHWUTC3T4NWOS6Fxr4qzNnktP8MB3iiZVbPGmUmEuJhpaWYsSylHMzjZryqz&#xa;F1vPO+aDWmZjlrVraWA1pHvJwxs42vZo8hG5FEVFauX1751MCJonIv2McGNnJmVun31BBEoovB&#xa;CkkitF+syHQxKTUYfsnKr+Rfkf1HhmDyiMEox5pg+MVb6dLY8vDQOUR+IJEojXjH7kUmXKLSuS&#xa;Xn9xZV8v2j59b6XAlKd5Jgq0izGlzJUWRKLD+WTps6Xp8EnLTXDIq+ki4sJQgn3DmKe2BcledP&#xa;anfUKgoZmCCG1e4ZWey6gdRnQ+s94sPye99ZaGUHcPocyOR+3lJN40Ws28/IvYcDp/edVDtRr4&#xa;5pPnFIZ544fZG77oTJPVR+cL0zSn/jM1UwNwu7On7zB9qjAQZz//xkJrWbfHSw5IaYxkQm7bfi&#xa;6gDujY0yWDYA0yRtti4pCvkol/a/4bFsu2WpeokTZBXEZamSZyKJ4h+aO1hFwwPm2ORk1b29KJ&#xa;Cj7OVIDutC7NLZKpBwFaSGGXS53/8MRQbe5n+hkdVZ7SGBpGK1TfXZgaRiaxhfud2PS76x1cBB&#xa;4e+7Y9+YRz3IRq0Uw4DqZvn313KQhEt1z8b0FZDtUmoU0NrCf3TghR73R7QUTJRstimWbxJl9E&#xa;7UbLajLl0DLrXEQ41B6Y5fMqDFRTqrJsq525v13MVsrJOhhzGqaxTKdFUUTZrY1VBEtyYODS6b&#xa;rDI3uG21ZL1LdSutb10YHJgUMNpwtXgFS1uKfUEzKnQ6osq1XdSH3JE2Kn8/G9nZr0YRA9mKr5&#xa;3ih1pXIXqm0Qb2HlkzapoEuHDDFb8h7UqWw93RXAVav3//7ukY06OockxoAu8SWaEg45FasUha&#xa;sYCGtAYdw1pgSBZkCzVMI8Ac6VjRM8RnD82W3Z/DXUCBV9rW3MdhHzZZtCFZ7IJXRjkXXUD5J8&#xa;IsWxItyZbc440+BVArKrtmGYzKYl32f0uF4haaBIkegYh7fn5r2YC+4IUi/YTAkGgsjlme3bKA&#xa;LtuSUID8c6iCkIOEBmo3bW/t03nhgEvUslw25z5vzHpdm3e/NOp9hv4rYFFpN/2g4esSRZuEbQ&#xa;Yi3Hi5VUU686XmkyNeyFayEqKy9wAadENOEvVXNCnBw04NGtBRqkNG7RvbcpQT2hpJxDQTALRj&#xa;yCinEFFOIpHI+wdiB5hOtPelzQGve4qubWC1jWqAx6ki7Mlq0yQpbldR5TZhe29me29qexyzkm&#xa;tyWvnQVWz5VN4BR1dvhQg9IGxFmmhwjr+fK28bE97CHQCYxQ8tVKs75rdID3Bjh/Mvc1jj47OJ&#xa;eASgnRofHqgkXxQ7lS/8yC8mn5sWOWqGHFc4XdpBxz78dpovo4g7s2sleup9pfgiydsWl/IpUI&#xa;gMcPPXcI+zphJIRpvjwyRL0HZprYkZKLVFnGdtDxB/VeCZrkgjxUJtJOoY1U3SJ0Cbw8sDw2Ox&#xa;iAHjQ17hNSIG3jAfzMjFNiI10lYFzOFN1KoYVqkI8nBXmkE0zYZ2guqaJ5MXzMbCxm0Xd3JXno&#xa;A2GR+C3ETwhYOjgTaFW+4fhmac3wS4GRkVLNnU8KmbRbYfEcYhjhcqS8rJkc676p4YZ0vIAcbH&#xa;VP7Ml5M8PnkyKU8T/xmNOGL59vOjWj9UHhMptOrh0zdh9eWb5xN0kV+4VVa27DWQ6hTQJ3DK6Q&#xa;mwyCXroG+wrRzFTca6bJ4UoeGwHTTANtdsVtCnaCjsucPgGZevf6Oe0IrKe6OZchxoHWGAIpWr&#xa;4+gXo3UYCED+AKP58szx+6UX2E0v/IqBG7phrXxXvnfEru+BWoPsbPsGTfID5DzqAEfThQg+or&#xa;6PoHxLwjMSl/ujrac2DjN6Vke+ybHfSXR+W+i8LTYxk98bdbbkj958G/J+Z6gB+TpP+for+y/C&#xa;IJLLoJIO/KQjgk4QpkYgeyDCDySQNEwIDbdhMilIJe0ogQ1mqHR1TN3Ih5mGNS98qqY/3KWNtE&#xa;G3LYINIsTksw73Gl88v/K5dE75oy17X+rZJHjrpsobk+/6Pnwmbk4+PcT1faXLB1qC0qvGD/zs&#xa;fCrw4Ar/oPpZJSRew1+8Hqm1UNKV1sHVs8q1hm0lGP1S+tZjki3I3Tx6hOoHYJ/ZMiM0ZAgIKI&#xa;ap0xZ9b0WReofBRQcz9VXKN0NlgaJon0ZODKickNy35twwkJBhlQRWt3+WkTV5Z2TuS379kTHy&#xa;gr0vk3V23HC9F0//5AbKd9qMdBiuauvfG7cPjog+0DMu2SH+MXOKbDxuS7XfgnVLf2URUThYbe&#xa;HWB+T99kKYnx6hSUbKuqjX5tdNOLF1gGDywK3Ob/HKCnG3iapuCwEBn3CXs8Gb+7v78irHKkJ/&#xa;qp7J6wboLr4b1yBCeo8QfC/LqmhoWyOE8YfT/Wv1P+UBUTkBL6t18p+ZNKVh+2y9L3FfffyWe8&#xa;lffQY9OmvYczNhzeogGxpr9tlJneJzfii/ec5wwGn3BIsNstjyCICSFi0UOSiq2GGLl5wwadl8&#xa;mNdzOn4P4tEYEqWTRhu58K6ngUuLOqWzlbr8VhlCnhwA3WKWFRUjbE34DSCiNm9gbZGUWRWJLT&#xa;y1UxBX6MXGGbxjzGCPW02bNQAKDoVFY2yL6DcCl8bQmTKgDDY13KWoyUP6O9YmsPA+spmsvNFP&#xa;ec2qvLGsBFRIoV/DHQfEI0nt6dkuBc4H7gcOBC4ITo0ZglFlVMdVNSjZ9fSjQ0V1WqQiZciQFd&#xa;bQWJcVZGhXl/5nU1ND4M7qwxczy7gOHAdZE7mEZKlcGPn93jUhO9SK8TBYjCJWUYWTfPb4nAHc&#xa;HQXcGlV33mZOYn9ZRrINLEWYuirE1oGzaRDtLIC9380jvuL2lALlB3gbIwTDLozjb6ifPpI6c4&#xa;ejtt1EqfKk7Bt4gpx9ACKugCiLVX/zYfPnpMswZbFm9sFFivs+oKpkraB7E/ElCnLhL5m3KDTM&#xa;7/gjh00L2EmHzi2LyIvMjcy1RWrXTw+MQ8ztFITTDEMHjzq5pDO2kylRLoAu5kp2yIXoSzI1pZ&#xa;25IY/jsuUk+qybopaXA8xqSkPQUGVkdnQ1lbmI++/k2uLLFCEf7DVi7FJzO0iO+UpqMUDpXUx1&#xa;RFlmmujjE81bQQk6popoWLPE4YphnbV/pRPgmc1sng2EkgJ9jWPwjC441zpIP7xuL7bC6ADVMI&#xa;xbPzFfOV+ux/FRVOiO2izTnemZrl5buQh16NB31WGXmunjTIsoSiLZ+S5jpgLpoJ7c32O8qCQV&#xa;RYRMlTBKL5T6LW3A9cm5OUKOvl+LSm3krE9xJFh4BnEX5Knfo/RsbHTrSfk6VJnSxV044V0HKM&#xa;ZgupH3VmXzTcWI+/LLmZb5iDPB6GuPa3bIWdS3eh1sga4aAJ6DMHxayumegIkoUz8BS0GDPsRv&#xa;n+/ZHIZ0Yb2QVTk6ZUFWfpBOmHAspJ6+5nR7OQdGr4Fu2PIAs2xWcqkBg+aIjhN6yOLTM83/6i&#xa;MdH/iasPi6eJ4SonfgAlK0ZyYxiDnWN0sYJU0Yns0Q8s9v/ibPYVIexv778ZqKi6MfCZN/l8ij&#xa;mmN3gjazXjrLXk8ashYZzDpxOFTR0ZEjWt64tY0Dp18x+n643/bwJ8WMZ2N5YX9K3pvah9yx1q&#xa;wdH2UX8gWfOxYk5q95frS3OMPmugcwxBf5fR/jisQStqgBJS8MHnnJ9thPlngp9SMMgL3HbTr/&#xa;qK37EbMON+qNS17os7Au25vsDDdAO9uD969WD9uBIBYHqMDUTgQ7xhSLMEf4rPzTFw8E2aP9ED&#xa;vmo2uNEGRq/Jr9yztIoccQ+GgJoTe17hbJuk4N3Foc6TpFzzQX7XK1x2ZTVPcgeAlTUNAtjj/p&#xa;MbqJnk1KS1O/O/DudZTHXXfMX+Q7v16PAJPPLUF35naJdg9jsLrHxsUQGRMeM7k7XxdJRsaVh3&#xa;DZk57dJNtizE3u6XW1jPruySTbuehriKl18Ok1v7mkayzmFvHp9RpGY+9Wys1nMxt+kxm3bsxN&#xa;hMyGajbjT4Bzy/I/e1YTboWYm3HpjdsWIy94yi20/+zZzbQc47TYof9opz45TTKjYA2tPKTJb+&#xa;73y7d8NrV63imH3MSfySHwCZzRRd6knAkjbZPPk5N07AbnEj5JIvCJnAEh4BE/5eF8RkPEIX9U&#xa;QeATPsVnPXAi5JC4yBSEH08dImXHZ8eNrRQiZSdll5pYixQorr+nQYhDZqdk56aeOXK+hOB4K7&#xa;nxkc6jH60t4vlEz6EXm9B73T2G+FG5/qRnvUsj8Ameuf/ZQ8Dz+T2nz/sGJvSTdFYF0SthIYPo&#xa;ocDIoFqkb3b1sNcYHTVs5BKDXlKg3THvFrV8fmL7NMt85wNCz3AnBELPdCcKrmezRwres9YnDd&#xa;c1FTzL+IJ1LQXyCXvF7tDXJwhSy+Iw1lcJ27XRhw3bzYblpWfXxA7lPKc6HqxvqmO/Vihow6Nr&#xa;H+2WOG/HtrEZ7ZY5H4txnS3WuVi3Sgdyu08L+CvL98361ZHQTo9GL/irkfcNrsOXdU7wvXrxza&#xa;fU7D57AD12/P3L/yvm3ZUJvM8bR98HfAIqZwifRxQUbjaILYjfiiPGnCvyaZT8TnSX+K1R0vyy&#xa;qlHhYuiU8smPGB4Z1G/kmzPp0D7wp33h/d/DujqY79lXUX/94mb67zrxTVeg/H/Xicn+QyeWs3&#xa;cx/JdOTKLvbOryf3Ny+9dcLoxtclDwQUgOD8uKFWlF4V/ETcspFtQlUpRAyQo0Gxnw+7+IDcmy&#xa;0z3Opze8/SV2y90IV5ZXSjs2do+sOmdlAkQKlsOzOJ1POq/s/VMTe3/en91/1e5BBHane557It&#xa;cklTOOsvtO1nM/5jw9hhYcJuuulwpCuky1xzo/i1VYbDiXy7yJCgcLxB3OFEPPRGexT+pVEB2n&#xa;2O5qJZUTWkqvPh1PZYgVCmxWZA7mNwXUA4LCzALBBxA50sb0GGsz8i+zbrVedDoqL86unlA17x&#xa;a5jCwAFrdPSaFCJRZeO3W8l5Akja6ME+tEz2fUzWSZaHMPnloY05ARUcCyo7SbD7soHElrZ46H&#xa;kqtFfSkznOfmU0aM5u9Oc66y4Gu5Zx0q+CKhZcDHvBOlaqiYchAtI4j9bLjaBkOIw/CBZfz2ns&#xa;CfjT+pLGILGe4TPS7htkhG6CSWO5AaeaS1MmG10e4jipB4xL6sHV4fnasJWc4YwAmwmy7aTqTq&#xa;cN5gHzlonjV7WqQ/S3D6VJH9mI0oZdfoEagys7kOZHZJEd9ri+8ITBq9VFyOBGGpjgp57SpAa9&#xa;GgMMf3BQvxKGuCSOHAIfmBzjXKf2pmcWL5YYJsXDNVNiVXy/clcXnPVPfg2euw89FatG6dUX+H&#xa;+QVmX7RtbMfrCNccql5ZGtb2jjwoOnHFhkLUUocDmuviiNEW6WsaF1cD5aY6Z1idOyTIbQKrIz&#xa;vA6qxZzXZZbe1XHNFXN3OeekN4K37Lz9dZRevMZRUusIMMgB40aclubJS6yP4WcseaYYip6BU6&#xa;jsWSyM+IdWfAGUTcQV2r6mid0HTfrqi51RNHK6TiNOZiK3RFDuYgj/dYUSww1BHQD8WCL0CO5C&#xa;L9nGqUHAXdiSIMH5+7w1LBvT1s+mAYLrmlWYrN2Vals2RLdjb7duSk1h1PF4htdUfTGddZlqny&#xa;wecnoVuu1JQ7/qNsJZZDYOO5bb7IXBoaapaGc71MHizaiwm2IsuLACyOLB/xLZmMd1as2i7m6h&#xa;MxWVF1wqmduxsRRh0n+8SA6QqidtiKMQiM5qozAFEBnzaRLW+oOjhqEom5sL9vAkvXlpimGlAL&#xa;bVOpHhKYeSmVssSSQSgqnvOz8IaSa0u0Mqv5yfoK5M0vzHyB5FDGbtmRYnUF1azAJrFWplnR1W&#xa;pKqx2bjF5arM0ZGRcuR047e9CfZ6teg+uWzGfTuAsCTaq/Kbc5Qb1uHDrDzZx1xFl6hXaEWUkx&#xa;L45UsCcbHPaSZkWT9y3elJ89m0aU9n7MD+966vj9x56cA6PQp6XK4FOjofOUTu9NU1Zq66CDPS&#xa;2Dcei+ACt/63qIzk+5c3tLtO0UsiLtIyqMhQ/d0kol+hnrU83hDOgFM6Fo/vnXNrXEs94ZY+zT&#xa;K4bv97g3B1Y/bxegX4AFr5oYO07JI2DgHGt/xOMQjHEOxf6gxhLKH7Twm7qGa6hXBr7e2gNG39&#xa;kYUSFJcndYCjMMAfm4og5tZUCr756gatLkCtQ9RlCDHDMH+pIjF2Caa2iaaISZPmdtsm1ts3xZ&#xa;fVf0u8n+zfpgnIAZcXiTQ5fwUmX4Iv+ISSx6TN5CrmbvasE2a9aNXySTS7c/tPwKN+tWb2S4mI&#xa;B8glC76BnAxXKUpshmNbwDNFL0NZI4Ajgs1Fk4Yy5phwf9bGJMVNZUFe1TKy+7gpECWzOb+g67&#xa;AXy03hgb/qZsg/EuJ5r5kUS9lxkWPmCT8jeCWTVNwlcwPCKMRtXBbkdw/12RuyVI+Q7TUxbY9Q&#xa;zQYkXaDrAHcRJB/JJFO3C3OlIQGX0FKt/49+2dIJEqqxDYr1/8/9GvR6r+n48z/j9Q+X/6nKla&#xa;q2+KIXZbcwMAB6R4oTxYEtsGoEP9losQJHBtUMUYQozFYBtcQnqbRGJOpOlJuXP4C7cs54RFnL&#xa;4+VjPn9hOW3NTjAfWJYfTUlu4vM1PZ3IX/RWX2uwhDBt2Dms4DhxydJt5tZlvqHOf2VOaJFm1X&#xa;Dylg4zM6rpbuxkyaSzXGdHg5EhHMEZvSNJYrHvpzVXZMLU7VSeZWT6cU7a153hz+Lsew/MKTEy&#xa;2D6Ty2MIL8UMJ/SgUdWZOWJ1xeh+xnnEUquViczY7e9mE4e6XAaLWwmTZqxGiXfzjAWWnAbJFe&#xa;wvgglH6TUHuUf00SnDQJGBDKCKxmzspmol3snGbIsnhaa2NumJhDpXeir06d1Fw8XIwtVA4qHx&#xa;oTeyQQKoBtcB/n0+yUOHcpFBcD7YbuyJuI2KcNS1Nn0g2jTv+hxjJdyGmsxHM/oSEaYuKY38Jg&#xa;ELaWEwDPTbLfQQNkEXSn6B6qJamA1seLjMgn54VQw6IPvVTZY/6acbIfr6feundDHXJsR73d05&#xa;XSXqPEgGdDggUkBl3zQZsXH63FPU0z9ccyPZFkhEw4MCKDH3N2HKPZmH9K5A29brbRvMkh1VEY&#xa;rqTOA7+66OPBgoR4dcHAx0F2PBZxQ7FjaIUgBU1uuxKCraJ0xWUy7QxCwCLXEtNbc5gNZ64/t9&#xa;WlzVyiVlSGxGFshPDEDXNsNNlMF6oxRFJi4h+mBLE15RZu8RtKdFnWSqSZKVhhgme7Uc/HH41l&#xa;sucGsfAlMwZ3At0ZlkGbJSBB5CZUHIr52utynfwxSNTs3KP9V+90ZI7UIjo7jhxpjfX4FiguCV&#xa;sGLNrFnsVwTZNBgtb6Ab+HNNt5CjApLwaCdp3Ig1XYmAPz/W8d/WXgv7y9oUSu0NBCCXfFQbBo&#xa;IWS9BQAnLwsoa3JwdYU/JZZRlI2Exri7FG84j0Jwu4rBPWHaUAgR1BWJQbLRk3OGFBpiaqAyiy&#xa;Wt6Si+7KKG2kYchRBDuvzfNlsDg84o1HAVLR314oVEsgxGK+su9qruMoyoakNCLX5w6E9Sb9sJ&#xa;jLQ9Gts7R3JtzHU4HLqsuolsJbTUWTVL2hNZooMDpfGL5qO60h6kLxKlpNyzBObXFcZ33mbpxk&#xa;ESEYHgVAXZDRb0eY/iLnmJOQ0EaRVy/GqMG5bN55do0/MYvNoIc61lMbG8oj+zRnUFQpd5/Cam&#xa;sHtdaW1PbkDo5zJdugWtkN2LX9D5ePHNdfzyCjDGFwZWMrhSlrMOrEHmGJEGCP5vxp/eWqh1/v&#xa;P0OJIYwcL05lCk4JOvm+JjeYcZu34WPfr7tlkzIa2UXtDUoV2mLC1xl0B+R5D6NfvqQdnG7W35&#xa;o9YiMtEW0qGcUyFlgxt8fCrE/Pmi3H3X3aNtiZi+gfD13gHe1unkbcwdce28uVT78Umbf5G2kc&#xa;wiLC5yEe0DHlD9NllcFbpzl5cIn6OqCDSWglWwM+DeVUG8lpN367jk+Xr9Yp9ZWQt4h1u98zm/&#xa;04UfXSIyPKK39M8KXPHf+c8HvmDKICim+MN7xNSnyccsew066aZyUi1SJYYVPfgIp+TXiGRVzj&#xa;GJkcG4+RL+67kC2e3Nazbor1/1UP8deHEdHP8BPNb/HHT1P1fKpi4ulnbmzv+XqzDJ/+Lulfw/&#xa;p8UiZXFEC5DtUCg1i0EKRhtYV1PQihQn/UrJQ7HJhB8kxIRiPjcZKH71tt7snXevoDXS7eZZbv&#xa;7I1LF9TccUjj+DRvgnK53a+dz83ExN9P/7fY3wy/yeWJgp+bR4IWn6fYVuEHeUwblYQ41eo7hh&#xa;2pu6sxEJQ5jFXHvlQashL73dZOKTiHDMYaLBWXI749SzWkfqQ8lt3SWaNAfnhKyVNXxWnQULA/&#xa;5WgPe6nDGrapIVyjCM91FNihoFY2Z0sbXJdPrRxugGbTX7bza5LnccypiFCSS6beWYbfgeQnFl&#xa;YdYRzNZJycwnppYRqbgzLK/qnFQxwLnfSKLIWmwGHdpkq27KRDTlqdgmhSa6GGON5t1vngHOPM&#xa;Awj24390B1FS5MgmYUt194xOEtz9YaRVS/69LMdver6oxEn+j9yFi04OAX/ATkHqKwua/PjgKi&#xa;aGU0Yo5yHYKst+QnpPDYODZp2M4TXVQ0h9WElmn4JjGZouw9Yxm3ISZWI3C/N5ySpDCNSh5v52&#xa;+NAckwNkeeKymvl7B252olWFxWjzJN0ewI9gIQXVgIKzIpIXbh+IehOn69RSEEuUmOUJJ5ch2l&#xa;uSgxw4a4CB81Dcxttt8zcxmDoUN7XWokf0m6xgjoLWNzco84e7TcxcxRswYnmfQGPKmqqm+FU1&#xa;T3Mij3gZfvG9QoHiPBwoLv1y80fAihT4joxs8gVNm1i3aZpmNp68u7bKstnMGITCVI6ASgUAlL&#xa;J9gcRWFlR1pVvV3drFzFfDE7giqDZgyBJ1VLOag6yA/ZXjDcWVoNMbUoJZf5VPgiOe+KXKEssQ&#xa;gLoHiPz1pgva2gRxgJjWFXMV4iZ2qBL2s0TZv3UWWIiB+Yi/MwaQsOLUCHLnGFkXaMFPA6L+Dq&#xa;pe9xd9yW+VdRpg5KojG7rjFr2ir2dKN/I2haXab1+PI1qwv+WTcZ0XKoML/uT7Nz7mBpiWm2qa&#xa;Voz1StwBwtMTyQ6wcfwHMZyEuvt5ek/oBi86CM1sFgetalTYQ9PZCHerE0Hly+RA/F3lKDyaFH&#xa;SkE5S0MPTmq73uy2hLrln6/Rk7MaoQV3kAyDEw8M41SEX7KxnSVQH6iIZiVB3RoouHsQztBshp&#xa;5r/q6P/w5ZW+Zpmbn6q/YOm3tLCtFrsKad/sRypGQiFO0e5WJn0UIIPpCkQeG/FPtxkKb2tJu5&#xa;GDY+OintvPUinwRI/KvS1uVglXdCXVInk6TwfFztmeGLWWlz+VWhuMciAeIiPB8TpSAtoKMsEE&#xa;WTEZ7TCgi86EH2TlpgGBetz12pPb/m0qXxPlvviBxEF4q8UX6dW3HOz28mTPhGva6GW+SP8obY&#xa;ncsggNxjyBlVdCScv8GIXWSv9w50A3In7wt2kfLn8olQ9ULPcAzCuFWUf3ouq+8Z8iUBlvgKeo&#xa;HLao9rFHSxP0iW7eqI5d/evNH+B8I/FnkJIEhKb7Fs3mNmkOI6/rHt7kbiw7nwXSefi4GCq/hk&#xa;dhi7UZYLyHoivPR0r4pVr/dekHgGBjAMDxgOMCRKQJEqAkSo8YCsF0HwM0oLC6L4Jvwt+E+pZt&#xa;/h5mKPF20hD5DCnmrCBUALFzK2hzLcV4iDEfLq6q0B1/Y34vSBC/LtVNGtUYc3yG11pycSwRKh&#xa;bBxiMoMwZynf8zWu66IQKMkS8oUQ2f8o7aujql7erwFB6VK6u7u7u0tauuXQHdIN0h3SJShIdy&#xa;Md0iByDikCgnSIL1x/d11Avdev7/APh7XYe+Yzc/Z5zszzzM7umeAtS1IjIbGnhQ2Y68bg30l8&#xa;aCtId4HoEB8djqQ/UuTbxRc/7WV3xrIaXug5v8ejcYqDosWx266Xx3iGvEnOj+3lU42l/PWA/n&#xa;FIIkMtV+M3lFRSyyxCwDvfLZUTNJQLPj4R0pylB0nCH//S657T6XC5qwB16VaAitbs8S8GsX8H&#xa;qKr2BgCHpwaONvakeo7/97uJooWJkckP+cN/G8Ricl8bxIZCVUvL0I8+quJ4QdnlJ/kiQZFaDC&#xa;e4TwoT29TWVLj72RLSHp52vnlSEkVjYmuxzHszU588GNrd1cH6rebW5lYvzWt/2EvEpXuevbZ8&#xa;b4atPfpAvM363CW5aT2x+djOmk6ypQKfTzy89daxR6xM3pVreGpAGIUk0r5bWJRKUsuNH3ZlQP&#xa;WD9y9Qk7Yy9X1VisazLaOJ1jnG4eYehLNA7B8oEkkepMF3pKbwPPuYFImsijHAqtm4Dm0EUDRf&#xa;sj7bXI1QzmV0yBF6RgPFrIWlFZZYn5LvEQQ3u0mJ4RajvTB6gini0UrXNMZsMlljFpnTFz3IHp&#xa;GOMWCcfiFP0B/bEj8SF3gKf8+ja5S3HKeBpZ3RjvrD8z3qisHRMT2Q/HXacEMnBZ0MGaIEKHSy&#xa;p+VUc0xykfz0wJdYaSwQgAWuo4/JiZc1AJsT0gcNpINaR+GXmGuGJzLTrcUCmH5TL0ZRATZp2t&#xa;WxWSEDg97a5OGnZ7Mx2DaR7GkyilHCq2OfLBLuC1lCMzqyrah1oAURjvWPYtlosNuRGsMT9jE6&#xa;kqeSwaMKgbTa1apqDKEtgnzkJcdIkvOdBjxLyhOkPAMgyCQKkOCqjl880rkMK6h2mzBcmTnfwJ&#xa;BqEjoS1V1ZiM1Yj9pMJHbC71bB2wfGFe1y3EtglB4i6h9QiZqKBhZTYfbiYRm90MLnDw1PN/2o&#xa;PTwRdaX/xkLvc3BlTpKBTeaB1AQqCCozM1ZQKm/fJndRwM6N0kvbphJ5z7XE71L52yNnT0+6gJ&#xa;yEyOU/bMDyd6ZHaBrzdQaXU2u0We/ZPqdu0iu1nmmhlmROG04RK3Q/cTy2Qi98NH3g5p2MDypV&#xa;K+HqHY+M5UFPhfYYt2i/VwIU74fnAPUGOOnsNbgD1l+nGu4pkvEqR3fGUrYyWEBmvK8K6LUZxH&#xa;/+NQglbHa/OoJXFSrLSIn0iVGdK0Qkal0EcSwsPggOuMp9+CxX2cHaBnqWoit3s8Jpe+ue08Me&#xa;Lvto6ZL1OguJTkIR9O4Qlr6uSsuPOZ+TuoQjhbZL+VLUay8ctB9znAibOERqX8o9HevUm7LOoC&#xa;dH6MyqmhDvfynk0J4f/a5iu5xIMZSPus/pTRvh+mBY/p5F8yCTrGeAOSE7yQQ+cieueZKYxNix&#xa;hyMhKDPUvN8brk9sTKpUrPABdCw68rzEiDllCranb7hIrlxFgfGl2UF3Kv7lhrxW2hSpEBifK8&#xa;7nkD2ZRhe70MWuHb45qIUMMKRxukhmAhBThtjsIXLXhf7KF0nq04dnR9FnUNN+M90EB+gBIqUQ&#xa;RwwNUC9Ev/GgzbHGRSJLQV8AMLLPkVvTOtBP4AmIgUZyo+qSgTA0nzpdoX1JIFfB2o8AC5NvqC&#xa;/ko1++ZpPXM5Cxs67gW3j5hnRaO9ZLZr7leDr0DBkArPkMjLdxIqwPfk7sSzAau9D7/r1Zcl/B&#xa;k2y5hR0jb7JzXJZivoUPThmoPhMkwOkQ6eR8VeXCs6Mc+nmf+AidKNp10QbR8mIpT18ZgAmYbs&#xa;x1mCthrtcs6k2GKtnSNlfOIP8MqcW1pxbjWVCH3sYLJ6R8ASmDHTTi89H1Jzl1wiWr65TI7dps&#xa;iM4t4ho5BTCgYpnApAibIojWfJsQ0UdbdY+kv1/LxoPuPD1yFedOw/5bWi7Hf1ddGF6XXDD/WH&#xa;ORcLfmojY/Gkd8VzncHE6JFnU0FTOsRi6Jsc1yJj8tEn37a0nzpa/39nWk6+V+qppV2NpXuJ0y&#xa;S+ZHy38lm1uD9U37w1xmR39dxNNmcNE2mpECTJBeXOP1ai/BjDJIESno3OZKi3vKIK/RwDfL4m&#xa;papUGtnVAy1IjGGDRlMV9ZPlI40MCVMVzHA+sHTzWQKZ/0Uoo/V53GQmGgPDWKaeCdWX2f9Xtg&#xa;HFs4d1AGvx1SQxC8RyaMglBydvb9mGw69JEnk68+0ZfvP1R36+PKJvYTD3o9EWfJU0kD1FtRWV&#xa;gzDc3S178vIuPRPYaXG0/1KaE/musq+K9s6QWpmMAKJo+z6X7JfhS+YkAqskjPMnGMVQBMN6x7&#xa;pA03ZNZNMMs9sAfROXVksWN8YM9lxtn0ocYpp4wCvRWENNsYivrxYQZv81NJWuveKGgI16hsBx&#xa;HFZSg06xksIehG1adC1yUXSmNbw0dMAelYuR22nI0fSUmw08IeJzgHyzYgcNP416BDiBgpddkK&#xa;hG5JyeCGZHeuQ/IXo+Qx+yDHj897Uj2O1odG7aRWNo8gDKUPKpdTKiWUU40nLV/GMZpiCG0cex&#xa;ciwkm7dD8AOqxavuIItbM+0mRa/K+Si7DrkguhiRr+sYGRmSkErxxZitwmAKn9fct8tJxXREHv&#xa;B2A+zTRoplRuzVJ0K4Bzj1IpR0rnqRnbyE/NQ7s4akrAK5UsJ0wrzefg2Lhhv/Z7o/o+B1pneU&#xa;pNro1NhSnAAaUpyMDSbaShWaePfS3d1y0YLvJSykv+KAUliC4nSl1f9qwgWcASbd2OyE+pqTwH&#xa;SlvMbQXTEMeaGpaeqWiAwlF7vG8mVaSHYzFfNQIYCQ2L6YI3/aKkzk+oYo9cTd/Dwkl79g0xab&#xa;3c+ksqM5PjhcUnlVy6eyUA1a2CyJkEtAKuXvZBi9km1bSRhENUAtatsIc9kCJ42R8LP5K+Lzaq&#xa;LzGQVTJVi0jjjcBSTimVTiid2P1KzIwbXtbZ7c5GvW3MU6SdYADwhEoMc3kRnu6V1PBpTZemiH&#xa;fy8Xua/XyxqklLSMTyUlccsRi6z0xb7vePYQHitnC61P3JaJQCL7zXkrLGjyWEj41ASi6z3FWn&#xa;tSAVzylBMIFCy/2Pi46aWPbkWjViU1Dv2UUb38IJBYquPmlgzxlx+zCk2bmSOzkLA/CgGQsHbP&#xa;gpMZlnf2ClGyOijZNUDZbdJInlk88aMpNFSQjJfZRZQWlFzFVqGR5B7WBpDO6esaErqCsjyKsE&#xa;FjlkHxEinbeHyFrVbwNKRX3hezD/OnJF/YBNZkQkuWeYTNTjE2rfhNfWzmbZ8ymKsFZDmypvWu&#xa;xNtZywkzkCtR5vdBsYQByvH3csHqfPejeJyBuMUXkPwyPiIQh7ckKoVVkfVMViNvfsZ6QzRNhw&#xa;j9xJ87vdlbWaKPbgjuhBhAjnFq4+JEKkKnNKczxTcZ4+y+CuIFHoXKqyz1T+9PVMU9U+AqsDLs&#xa;F5sEcEXyDq/NR32eQ2YYSgC1e5amTyTue4vnBSjbTvUmPz5RWaP9KSC2D9BOVIApkpqphEsuCs&#xa;nufYzHzw6pPVtwIvp+hXPgeTErm7+dJ6T1EKp13DXh5el14sMzEJ9qF0YMG7Qz/gfZURKmZc3a&#xa;YATZFoawek/zK7QsIaPkmmgz+yKMJfH1KLTlrEw/wGQu75WMkLwT7x7a79pDwPZLtjsqrkx/1k&#xa;VXU9UviTBVL47+Bjveaq0yXpYvJVgZlA8BTGNvahCzyHzoAOb2gzHTjSneUev0L5Z06Z7j3hDx&#xa;vDT1srElaIF7+FwwcRCGl3BHci2VmlywrUB7sRX4artc3j50plhyGBtKViPKT0lKG8KLxRJcW6&#xa;j2O1Vv+KjOfeoLzzuoqM9W4VXhT58NxSeOZfbN0aGDsbAIxM/pb8H+wqdK+3Md5ziD7ohOakpF&#xa;OjqSkighF/raZdTVcgHeMzpUg7x45HzmHMOJgXB5PoPTt9Gd2isi38spRAwansklx93suMHBpV&#xa;d9febG3R4Wh2fX9Y4Nvl0QOfdydKhHGlb9295uKYeVbPCmwahwXHaOlSosheNTppWz8qK9G2cb&#xa;UX9UfeSDnWcbHg0mbLOH1Kzzs2Kk45nTaiBZB6PCjOhyPlhtBbi2HiLMs9zuKlqTU9QzY6yerG&#xa;HI/OWDM+Nirft04Js6WAuIYxSMayYmcNENK6dMODcYR2RJpIKE8oTT08q1NxhlI+Tdwyrpfmgz&#xa;CdNhmBM+8mRiF3gAAltu3A1Ridf4ZJlwRU1zmZ2Yrrf2hrOnAwrdZ67cW16UauiyOFuAiQI4aN&#xa;EXNzp3gjJ9bwzv8rTJetYC8/JkzXXpjgwqsZJ9+404y8qCdO6O+DGJrtgtuzof2bE5oEJZTag7&#xa;MOmleo2SF6tU8WicGtX9IUBQYyV5GYsTUR2SpaP4eKJVpKPnjlAZBzv6yMAsf92JbG2YOsAV7s&#xa;MC8jWcrN5ZvXga2qY2RpAK73Hn2hBgGe6h4FlCH7vdl9WeMGUL3LUD21Lj46Z/xz4mWPAhWGxk&#xa;XQmydEg584c2CX6IiLUqkhnfiovFiK1H35a9p7gnQEDKkbswrzgemCjdRDivVmKkiBltyL3aeQ&#xa;i+1QvsAkk9f6bs5DrVVbMmRMWsxWtPQIW3HNJXrstrK1LzOmXjp5+oxBLvaS4XmM1Qe3PKOMXg&#xa;DsW9YRv+Dgg9f+ZmgfHuc/n3Wfm7/DFcKoDhvilcpkTK+mE2PfFPZrdo5zIAI5TBpdncm3IFoZ&#xa;hcr95NRF8IE42b0CLCVjrgNyGxtFupPM7cEHJCYY1s/PtiltGyZydvDpWFbidmKf9lLEF7FBhK&#xa;YN2qnk4L3BTSiLgEmXaiGEZ7AcE2Qw3zspAMFqWp4I9/bWZfcfykQ1ZohYJXsA3gbNWmKhsKHI&#xa;wGhEc5cDG6jj3RCjkwJ0/elGexg36/yjINEVJ+1wsqg6mhQRq0rG22Tl+ry7wdIMluS3PaOmgZ&#xa;+Jpu/jHAWSpBrRSUiyJekaDiZnlhV0VWnNqD71+jScpxne0vilhqQQO9xhPNz5DBAAabrVMBSp&#xa;1BsKgKp5wb9jWwAJjL/YatiiLI0gHagHJUKiQtUCNb+E6SZgmgqClnYltF2EnYhGvz5sGB0yE4&#xa;ZKQ2vTA3cis/uaqofBtb/s6fwy24U6YZi3q7S1SAZsQOfcH47Il7+pAPCgBa+LKLO4ttMzfC/D&#xa;iN5Pizzaj1uuqC9iTCCWKSoqDx/oCv9RQrLagNoorz7FAoDIJ8welSZCc8JS59ECLBG5kOB4K9&#xa;gJ3bI6AOjoHYOGPhwndV0gZY1QAScSy/U3C+uB4k+Il8c+jdfonify3sLyzgltxd15avul8S3I&#xa;Qpw2ioUTh8uFSpgvRqtbjOSIZU7F6m3ZQu+q5xlMw8QONrnpPpItV3NYcQJhUD/hQOM+lTtrBN&#xa;O9p5XQnzG/qjmfK4u3MulKYklEYpVbLKuUYy0/FjIRIos0wS/GRVCGw2Xk/4bXDTPHQdCZymZY&#xa;HEz5ShR0sR3S5RATuOKletnDX16qcREO+1BB/2V7hmtEoGaJO5Ki1NewfLn4YwGxwp5Km85jIV&#xa;vRpQtd9GEkyxBF0d5mwqK5v+6qxG2ZSAZehcjxt0LkRIvbAsr9CwH9flfl3/opZHoVLMvZOJvc&#xa;dXv4O0vhu5AmlqhpTURDkuhPPrYOL1YmfcH2KLxGLrgPBgue5aOxXz7H+RzBuEuJbojT4RfV6U&#xa;0b++r3ZqaC0eYVDGbDqzzn8x8OB/WeffuC42PgyWBLrR5zeBZPYeI8fij3wTmjxTD3MbOX21DZ&#xa;vCWf8lE+B5C+P0fN6ROCAqIVMoSuQ+YnenqT0gKWpKFACmwtSOZyjqTqhdiXyZHu7LFfsKNsGN&#xa;5uFTnmSeyOn0XiQeBZlSgEjEP0PNbC1oI6EghObVs0fua9qMMqwq9utp6/mvUuRjBN0ExP10Cj&#xa;vkTz1XMuE3XCBJt+5cTSJomVqxXOBV6mQdohKi+48GjGbdH56Tc83+W+MuzanQMFuK2PaXHewy&#xa;8fw9UwSPCO5IWK9F1qD0mJlldSKrCYOG8TD33sWIQ0nCk0QoqABM0wIB/TOOsuOV5+C4idqsZ4&#xa;f7+2F5e7r2JD2qgUBcJaLJ9cZ/wBmXoFKudU1wM5iLEOT3/sZM57DCZVQdNQiEXbY4LMkLgJl2&#xa;wjZVIjeuNjwZ3WrvckPsLSEDo5e/haJDL0xqhqfA2zkkWQ3aCZ95uv8QPPXwoQHCwgacwMk1Xj&#xa;PY7i0s7v84d4sB9j5jniuGkyre2qxRPghhCsRpxO7NdfJhz94eE4h38T2oYB11Pa0UOSoMp9TS&#xa;3sYdiqkkcIDC7WJfm7qVG1dvS+tbZP9HfFUGg1MnX3GehPlaUi4gex42TufTKpLUlDwH0n51DI&#xa;ZYX32YDU18VOqRdQ9Tln+zMcaa12FzY93IYVehDdkrB9eMzX+c+w3PxtGhC5dajfBRXLibF9fP&#xa;MNO8bXbATq74LacC2oXzBTd/gH4uD3Cp4oGXM7UthY12nt8s2nwGkNIG7i72kr6UNaKaXUgkjw&#xa;J7Db2xFqsubeHH4Iw6oZNO2fkYwdsevcl2atw4h39VSxD6Rl8yxYFtFR/3jGNb84cKWlXgWzQW&#xa;OWmyiTWN+1FJQqHc/FHo1Rd62lwhybdZE1kGtKk3ZwWZQdUW0tpprYRcVUswwbFiyOC31Jn9ed&#xa;ThrfVhONnmeVpW7TSZhPZukayqVlljV0x2Nr6DwFn9qGeYNexnOlpRQ4cG+utNS9PFi0YPtKS1&#xa;F6Q5/AJObwr72uhQQk6Djr2Mc/do+30LWTgQj1m9+ldZstl4YfZ7LbRRGUMRNWIxk9vcc92mcj&#xa;zJWR0qYHeShqdxFbCrf11c57/vEYX4q0Gf5SQtaEkQ9ZlIRfMJEvflPJE5hhxCXCkYktZDOm4d&#xa;kd4iIyCKoiA2E54wgSEaxcF8pD5F5DSQHREqg4LJKhocG5tTYR4+U6ptcRH/w5NmiiuLsEWP3h&#xa;WeGBVvLOqPzyUGGKHGp+vVYB9+2YCfPMq/ZkxzhHXsWOS5FkodK4snQ95+tWeAlkCOTBibggH+&#xa;eUfd5th21GvEwvXtSrQlOn3+UtamWJVr/qURevICAePKfbfSJ7yU+fr85Yj3uiSGWcWisglBSk&#xa;JO7TjQ7Ey2+WtlHo5zSURVMWf8U0xGTtOchktEBbRFn0gul9Lk2zkLmvV09haw6n/Nc1Eg0Wcd&#xa;pDsNVVyfRWohhX+vHopuD+rJlOOyi4Z7sdJ0aYpba9BAbeQerN50V53j0g8n6PrBe6Rme1S/Nt&#xa;XMSMl4gP13kmZSlzlgFLqtt611r6riBGc+VKS6tg/y27i+4XWmpkY+umYGhpYvRDOsE/G7OYQd&#xa;p1EzPhqijCwqnCFY/NS4maJWH0YaCoLHHJH2Bim4IGA8LmpubDFS5hP1SoSW9/+WI8/YXDqfh8&#xa;EL6W3DEwySGtufVrhldL8/8dp63v8onYuAfOH0V0u9mPO6pKcETupJuicxSgq9evrVT5WSTR8l&#xa;P6MlXRaRfUt8TQFvXYM297xSAbb3CUreaZrp2GaVXGtSSoMeN6RVK8cvDXLuncb8Rngx/iGRt2&#xa;nYIH2pOjbmKu8LHDY+SkqDnpHmK6BpOsUnitSsAaszJC7rNn4w5stb5l1QOhc7DyC3+wljEy/1&#xa;gDBU6nq2jtMajBjGWYEqa+IgMlTFHSp6stHGPPJZwsyfJ6Hr4aw0nEhZ5loSTsgmgBkWsnzcR8&#xa;+8mavBbdo8qGTpXEfGX2B7lecAlU569yYprljvrwJKSVKKL6oJfQYsWc3DLVRqPUTQJsdYRIUj&#xa;f7zvP8TG0OsUXeao5ZB7XIJjDnrrCtDsZ2ljH5L/oAJDsokQZHox++5aksGkoDYcPzobmqK4pE&#xa;ryAFRYVxJYxKCL+IZ66SoJGmivLGYiLFRJWQrgggzRfFpcEUFLk3bKiomD3eoJTBXhJ3BraIOr&#xa;OOBcH9Psd6xNi0m/lzSThUzhfE/Eh6N7FHARrGgV8Utt4OVqh2PmEuq27+QraEfwDrG504H7BW&#xa;CUiQtZVwmhxBzvbcHvm4Q+FekYgRKo1pUvRw/DB9HpF03kHFFkrdJM8u0mDJpH7YMvGJozgHLj&#xa;2tslu1JHbsLr9IblGLF+4yGplySrUfDmYSU1CEH3oVrJICs2ipNRQqv76iM2CDLVZmrFLmSO2D&#xa;9iNZEpplclPeJd2S61wEgrUiv4Zq/6GllZZoyLTBVJnhy/Lp2TLN9MwTQaQ+hNHgjQ7+6ZdGH3&#xa;sq5+0tKZ37izt7q2gTF0yi+vNRETtPN4g4eF/K6wjUSt574LiMEh2t/trneQBqUtE7PDytjn44&#xa;umGPkLAkNDqAWlAUD+yanba5fiTwRIaZuj1eSVTYN0ysfTznsYqUE30NyVOZeInJganZ3OPtxp&#xa;OmTOhYB4/8Amk+CjnznLjUFf5SrQZzcBbDF2cvqKd2ZIvEnn1IH0Pg19TSXkl8hppyZDiyWSP/&#xa;gKpzV5tTLY7ZVNHD9l2vxbznJLISlUPeIBqLgsAHzTfGFhepT5YmkiAOVIS277PRge95gI8ubA&#xa;1XUjKmPhPEtN7JjJWDLaI4d3YcPUHbnkIWxRtqng+Bn+4CfX1uR8ykg1McuerdXSy5rUPKSitG&#xa;WvEpTNJBoNH6Ej9SpCi74kHhXsPG1yr3e+8P5F4u5qm16cJIC7mQScKUTOxdjLJvi7BSUB6IPu&#xa;PkxjyH0tXmfPjMz0FI9ig4uKuPyi7W1a9WJFnmKUjBHhrEHwk78+ygU8iTFH4ZnM4ShjOAQNc9&#xa;g973hL6Zk77uAFN89PPDOtk3ry2JIbAE4jGIXmMIzYbajvDYSSAlAEHZGroSPZtEL33CnWJMff&#xa;PrNJ7CfU4k6luVrHx+UJ0VKnOwRtQUHD9iOyGxHWkNdOfcfbhpOJ884xlSLHuBldr9kR0wZIZv&#xa;QN0SiMShq3ys2w6Zmpkr1yE3jlwNQ8Ag/JkQxN7TMbZLMavhSnlh8XhDRDJyc4KDZ7uFexRlyv&#xa;sBQWHygEL2SPC9il7Kp2drBwJ9HArnRWPBjJfiNJHaJ1sM9pjPgnbZt/YKKYfjPp2RYMavMSCO&#xa;Pn0WRR66yR5isxDgqvCFLKG9ljX4rWi7C4A4//tmLyyuhzIJFBjYm78OycAhHoH9o7+1oh5VVZ&#xa;hgYAjc11cBQ4Ldbj+q8Xfhvey/g6SfIeeILUHVdwXQeaXx7LdQLjF/+/jtzi7yTY7rQ72aGbfn&#xa;z9HAwJAVvzs6/9No8P+d40e866QOJfaBJZf7YGBMiFcIt/BgWX8zxeNH4NdQvrKsQ98+ZV49cn&#xa;l4MDDWW8Bz3L8JfMfm5C7D2PQcfsgVAx783a7PCf4eA/OPwOX3fGVTWdE5sK6AeeG+HwD80xrF&#xa;/wPYwcRR0d7G1sTe0e3OF527D57TpDrH/Yog82ppEN0i4ZL9V5KfPwwsTdWrb8tgYKRw3033/m&#xa;kQGv/d53/pq5JLupw3JRdo/Ap8/Ye5tNP9H+fyF09DpIFtN/aK4QP83e7nG/1+938yn4SQnvLD&#xa;oCd4vFdrnBHhu7PCPy3e4ha4DQBwFWLZ2N8yW/j7jw7/suCvWXLkKDe0roYQB/f9uP2fxm77ny&#xa;zyNsb/MP3HcILCacoWr2RmCPYu0anTnxH9ZFKuiSDY6fx/PiJBjz8j+sk7+ZqoB5l1c/hqRPM/&#xa;jOie758Rsf2ciI95Y+7nI+IO+jMi9p8TCZtTKfx8RF/D/4yI4+dEFssLv5gj1pg/I+L8OZHbtl&#xa;QFwRWR2w9Ex4l/RsT1cyKCaohgJVQwsHPKK2m/RfQs/ZdEP0Jd3/J/06369oclzqufG6z8+i1+&#xa;jXfT8/S2SgVV/8+O13fBb/qE3QaPbvyfTVTvgt+0nbktgfVdf248dpflpt/CbZbe/j83tLnLcv&#xa;O+RMzbS370104ON1Gu71a8eS0X1y2UuaX/j5sWb9JcJxPcrOoiuf3g137rxq+74erNggTyW4DA&#xa;i98tDbuJeV3KcDPn9zamCwT4bxY23P1Ev5mXxnYL0/wB+O/FDHdzh+/GwjdTOG5LEibCz7r92+&#xa;ludyfx5kni7YBQERX8v9bKr/JDbpJcH0re3G1nvkXCjPnzSfj3I8qb+Nd79jd3oLhv4Tvg/Rz/&#xa;93bw7y7Qm9+16G7xtBL/nOeXu1uKMlD3r/+R7Oqn9Cp446MEv3r1/wBQSwcIAiViXy8hAQD+NQ&#xa;EAUEsBAhQAFAAICAgA7ryBTwIlYl8vIQEA/jUBABEAAAAAAAAAAAAAAAAAAAAAAGxpYi9DaGVz&#xa;c1RyZWUuamFyUEsFBgAAAAABAAEAPwAAAG4hAQAAAA==" ID="ID_1032970876" CREATED="1575241405695" MODIFIED="1575241405734"/>
</node>
</node>
<node TEXT="images" POSITION="right" ID="ID_209340361" CREATED="1521562135195" MODIFIED="1540216035600">
<edge COLOR="#7c7c00"/>
<richcontent TYPE="NOTE">

<html>
  <head>
    
  </head>
  <body>
    <p>
      An add-on may define any number of images as child nodes of the images node. The actual image data has to be placed as base64 encoded binary data into the text of a subnode.
    </p>
    <p>
      The images are saved to the <i>${installationbase}/resources/images</i>&#160;directory.
    </p>
    <p>
      
    </p>
    <p>
      The following images should be present:
    </p>
    <ul>
      <li>
        <i>${name}-icon.png</i>, like <i>oldicons-theme-icon.png</i>. This will be used in the app-on overview.
      </li>
      <li>
        <i>${name}-screenshot-1.png</i>, like <i>oldicons-theme-screenshot-1.png</i>. This will be used in the app-on details dialog. Further images can be included but they are not used yet.
      </li>
    </ul>
    <p>
      Images can be added automatically by releaseAddOn.groovy or must be uploaded into the map via the script <i>Tools-&gt;Scripts-&gt;Insert Binary</i>&#160;since they have to be (base64) encoded as simple strings.
    </p>
  </body>
</html>
</richcontent>
</node>
</node>
</map>
